{"test_accuracies": {"FPGA2.5cm_14": [0.7721518987341772, 0.7742645587352411, 0.7778055736228549, 0.7762545654675539, 0.7772552158903288], "FPGA2.5cm_15": [0.7789563216090459, 0.7739143486091655, 0.7796067443838495, 0.7828588582578676, 0.7809075899334568], "FPGA2.5cm_16": [0.7755040776504728, 0.7753652191314789, 0.7815079801871216, 0.7817581427928153, 0.7768549557212188], "FPGA2.5cm_17": [0.7771551508480512, 0.7762657594556734, 0.7774553459748836, 0.7822584680042027, 0.7817081102716766], "FPGA2.5cm_18": [0.7800070045529595, 0.7769661797078247, 0.7795567118627108, 0.7863111022164407, 0.7811577525391504], "FPGA2.5cm_19": [0.7798068744684045, 0.7768160896537922, 0.7830589883424226, 0.7851603542302497, 0.7815079801871216]}, "train_accuracies": {"FPGA2.5cm_14": 0.8004762530326843, "FPGA2.5cm_15": 0.8055471777915955, "FPGA2.5cm_16": 0.806677520275116, "FPGA2.5cm_17": 0.806662380695343, "FPGA2.5cm_18": 0.805975079536438, "FPGA2.5cm_19": 0.8099424242973328}, "validation_accuracies": {"FPGA2.5cm_14": 0.7884124517440796, "FPGA2.5cm_15": 0.7929654121398926, "FPGA2.5cm_16": 0.7944663763046265, "FPGA2.5cm_17": 0.7949166893959045, "FPGA2.5cm_18": 0.794316291809082, "FPGA2.5cm_19": 0.7980186939239502}, "GIT_SHA1_ONSAVING": "d213120d69048907d68ba3f8ee67c014a502990c", "GIT_DIFF_ONSAVING": ["paper/TEMPEST_ATTACK_VARY_TRAINING_DATA.ipynb\n=======================================================\nlhs: 100644 | fcf20b54e56436f0b706fd7f758d1b619c9ec282\nrhs: 100644 | 7303e61fdb2ec4a2411206912c16325fd3606717\n---@@ -10,7 +10,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 1,\n    \"id\": \"ca8f60de-7398-49a9-a734-3f19e817e32a\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -43,7 +43,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 2,\n    \"id\": \"e320dcf4-a857-47e0-8de6-99a0ce4eb17e\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -71,7 +71,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 3,\n    \"id\": \"91866f75-1bcb-4089-839f-5b80ca993610\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -122,7 +122,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 4,\n    \"id\": \"d9e4a0d8-97e0-4ac7-b635-b1209cef0bc4\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -135,7 +135,7 @@\n     \"    print(f\\\"Evaluating datasets: {positions}\\\")\\n\",\n     \"    \\n\",\n     \"    for i, elem in enumerate(positions):\\n\",\n-    \"        for max_train_files in range(2, 29, 1):\\n\",\n+    \"        for max_train_files in range(14, 29, 1):\\n\",\n     \"            print(f\\\"------------- dataset {i}: {elem} with {max_train_files=} ----------------------------------\\\")\\n\",\n     \"            training_data, training_labels, validation_data, validation_labels = pp.get_datasets(\\n\",\n     \"                os.path.join(data_directory, elem), technical_details, offset_header=offset_header,\\n\",\n@@ -187,7 +187,998 @@\n     },\n     \"tags\": []\n    },\n-   \"outputs\": [],\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Evaluating datasets: ['FPGA2.5cm']\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=14 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"2022-07-05 17:19:04.602906: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n+      \"To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n+      \"2022-07-05 17:19:05.038198: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43614 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:81:00.0, compute capability: 8.6\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Model: \\\"sequential\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d (Conv1D)              (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d (MaxPooling1D) (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d (SpatialDr (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization (BatchNo (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_1 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_1 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_1 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_1 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_2 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_2 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_2 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_2 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten (Flatten)            (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense (Dense)                (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_1 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"2022-07-05 17:19:15.892195: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n+      \"2022-07-05 17:19:18.988257: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n+      \"2022-07-05 17:19:20.424866: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"14210/14210 [==============================] - 134s 9ms/step - loss: 0.6470 - accuracy: 0.7193 - val_loss: 0.5426 - val_accuracy: 0.7691\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"14210/14210 [==============================] - 129s 9ms/step - loss: 0.5706 - accuracy: 0.7555 - val_loss: 0.5238 - val_accuracy: 0.7774\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"14210/14210 [==============================] - 129s 9ms/step - loss: 0.5508 - accuracy: 0.7647 - val_loss: 0.5128 - val_accuracy: 0.7837\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"14210/14210 [==============================] - 129s 9ms/step - loss: 0.5373 - accuracy: 0.7711 - val_loss: 0.5091 - val_accuracy: 0.7832\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"14210/14210 [==============================] - 129s 9ms/step - loss: 0.5254 - accuracy: 0.7767 - val_loss: 0.5054 - val_accuracy: 0.7863\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"14210/14210 [==============================] - 128s 9ms/step - loss: 0.5135 - accuracy: 0.7823 - val_loss: 0.5048 - val_accuracy: 0.7872\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"14210/14210 [==============================] - 128s 9ms/step - loss: 0.5021 - accuracy: 0.7875 - val_loss: 0.5076 - val_accuracy: 0.7881\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"14210/14210 [==============================] - 128s 9ms/step - loss: 0.4924 - accuracy: 0.7921 - val_loss: 0.5157 - val_accuracy: 0.7864\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"14210/14210 [==============================] - 128s 9ms/step - loss: 0.4834 - accuracy: 0.7964 - val_loss: 0.5060 - val_accuracy: 0.7897\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"14210/14210 [==============================] - 128s 9ms/step - loss: 0.4743 - accuracy: 0.8005 - val_loss: 0.5114 - val_accuracy: 0.7884\\n\",\n+      \"Epoch 00010: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4777    7   26  144]\\n\",\n+      \" [   9 3416 1016  657]\\n\",\n+      \" [  27  992 3563  392]\\n\",\n+      \" [  93  779  412 3677]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8466503227097614\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8131785660679441\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8844749086906489\\n\",\n+      \"Test accuracy: 0.7721518987341772\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4808   13   26  107]\\n\",\n+      \" [  16 3386  980  717]\\n\",\n+      \" [  25 1012 3563  374]\\n\",\n+      \" [ 100  789  353 3719]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8521612967780668\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8120872523514109\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8842805683410047\\n\",\n+      \"Test accuracy: 0.7742645587352411\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4810   13   29  102]\\n\",\n+      \" [  10 3482 1000  606]\\n\",\n+      \" [  22  962 3576  414]\\n\",\n+      \" [ 105  784  394 3678]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8499024365837795\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.819382598689148\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8863261119727823\\n\",\n+      \"Test accuracy: 0.7778055736228549\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4821   13   19  101]\\n\",\n+      \" [   8 3449  978  663]\\n\",\n+      \" [  16 1016 3564  378]\\n\",\n+      \" [  70  789  421 3681]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8506529244008606\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8172812328013208\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8845749737329264\\n\",\n+      \"Test accuracy: 0.7762545654675539\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4807   13   16  118]\\n\",\n+      \" [  15 3394  932  757]\\n\",\n+      \" [  24  952 3642  356]\\n\",\n+      \" [ 101  762  406 3692]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8552559163456247\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8167809075899335\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8824736078450993\\n\",\n+      \"Test accuracy: 0.7772552158903288\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=15 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_1\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_1 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_1 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_3 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_3 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_3 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_3 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_4 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_4 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_4 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_4 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_5 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_5 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_5 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_5 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_1 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_2 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_3 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"15303/15303 [==============================] - 143s 9ms/step - loss: 0.6477 - accuracy: 0.7188 - val_loss: 0.5447 - val_accuracy: 0.7677\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"15303/15303 [==============================] - 137s 9ms/step - loss: 0.5801 - accuracy: 0.7506 - val_loss: 0.5294 - val_accuracy: 0.7751\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.5572 - accuracy: 0.7617 - val_loss: 0.5147 - val_accuracy: 0.7821\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.5424 - accuracy: 0.7689 - val_loss: 0.5051 - val_accuracy: 0.7877\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.5268 - accuracy: 0.7758 - val_loss: 0.4975 - val_accuracy: 0.7871\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.5131 - accuracy: 0.7825 - val_loss: 0.4914 - val_accuracy: 0.7915\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.5010 - accuracy: 0.7878 - val_loss: 0.4953 - val_accuracy: 0.7897\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.4924 - accuracy: 0.7917 - val_loss: 0.4895 - val_accuracy: 0.7924\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.4844 - accuracy: 0.7957 - val_loss: 0.4933 - val_accuracy: 0.7915\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.4760 - accuracy: 0.7993 - val_loss: 0.4989 - val_accuracy: 0.7903\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.4690 - accuracy: 0.8025 - val_loss: 0.4955 - val_accuracy: 0.7947\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"15303/15303 [==============================] - 138s 9ms/step - loss: 0.4625 - accuracy: 0.8055 - val_loss: 0.4953 - val_accuracy: 0.7930\\n\",\n+      \"Epoch 00012: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4825   18   11  100]\\n\",\n+      \" [   7 3422 1002  667]\\n\",\n+      \" [  33  998 3598  345]\\n\",\n+      \" [ 105  750  382 3724]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8520538349927452\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8165807775053785\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.889278030719968\\n\",\n+      \"Test accuracy: 0.7789563216090459\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4846   14   23   71]\\n\",\n+      \" [  11 3386 1002  700]\\n\",\n+      \" [  29 1033 3571  341]\\n\",\n+      \" [ 112  819  364 3666]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8525115069041425\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8104362617570542\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8848809285571343\\n\",\n+      \"Test accuracy: 0.7739143486091655\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4835   16   26   77]\\n\",\n+      \" [  14 3450 1011  623]\\n\",\n+      \" [  32  953 3634  355]\\n\",\n+      \" [ 144  794  360 3663]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8534047130634913\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8168809726322109\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8889278030719968\\n\",\n+      \"Test accuracy: 0.7796067443838495\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4844   13   15   82]\\n\",\n+      \" [  12 3490  929  667]\\n\",\n+      \" [  19 1002 3614  339]\\n\",\n+      \" [  94  783  385 3699]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8571071196277581\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8203332165907841\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8882773802971932\\n\",\n+      \"Test accuracy: 0.7828588582578676\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4843   14   23   74]\\n\",\n+      \" [  17 3373  961  747]\\n\",\n+      \" [  23  963 3681  307]\\n\",\n+      \" [  97  746  407 3711]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8579076399659779\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8181818181818182\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8857257217191175\\n\",\n+      \"Test accuracy: 0.7809075899334568\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=16 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_2\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_2 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_2 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_6 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_6 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_6 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_6 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_7 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_7 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_7 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_7 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_8 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_8 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_8 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_8 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_2 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_4 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_5 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"16396/16396 [==============================] - 153s 9ms/step - loss: 0.6508 - accuracy: 0.7172 - val_loss: 0.5487 - val_accuracy: 0.7623\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5740 - accuracy: 0.7541 - val_loss: 0.5186 - val_accuracy: 0.7753\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5527 - accuracy: 0.7643 - val_loss: 0.5087 - val_accuracy: 0.7840\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5389 - accuracy: 0.7708 - val_loss: 0.5002 - val_accuracy: 0.7862\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5266 - accuracy: 0.7762 - val_loss: 0.4982 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5139 - accuracy: 0.7819 - val_loss: 0.4911 - val_accuracy: 0.7917\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.5035 - accuracy: 0.7866 - val_loss: 0.4899 - val_accuracy: 0.7915\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4945 - accuracy: 0.7906 - val_loss: 0.4885 - val_accuracy: 0.7937\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4865 - accuracy: 0.7946 - val_loss: 0.4857 - val_accuracy: 0.7936\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4792 - accuracy: 0.7979 - val_loss: 0.4867 - val_accuracy: 0.7932\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4718 - accuracy: 0.8016 - val_loss: 0.4893 - val_accuracy: 0.7933\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4656 - accuracy: 0.8042 - val_loss: 0.4885 - val_accuracy: 0.7949\\n\",\n+      \"Epoch 13/15\\n\",\n+      \"16396/16396 [==============================] - 148s 9ms/step - loss: 0.4603 - accuracy: 0.8067 - val_loss: 0.4893 - val_accuracy: 0.7945\\n\",\n+      \"Epoch 00013: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4815   14   27   98]\\n\",\n+      \" [  10 3365 1003  720]\\n\",\n+      \" [  29 1007 3551  387]\\n\",\n+      \" [ 109  684  399 3769]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8485515585130334\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8160304197728524\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8864261770150598\\n\",\n+      \"Test accuracy: 0.7755040776504728\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4829   12   37   76]\\n\",\n+      \" [   8 3339 1009  743]\\n\",\n+      \" [  21 1027 3575  351]\\n\",\n+      \" [ 108  748  350 3755]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8528617170302182\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8114368621172704\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8864318591154693\\n\",\n+      \"Test accuracy: 0.7753652191314789\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4835   14   22   83]\\n\",\n+      \" [   8 3448  949  693]\\n\",\n+      \" [  21  996 3591  366]\\n\",\n+      \" [ 133  715  367 3746]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8541051683594336\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8192825336468704\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8896282583679391\\n\",\n+      \"Test accuracy: 0.7815079801871216\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4833   16   19   86]\\n\",\n+      \" [  10 3472  916  700]\\n\",\n+      \" [  21 1016 3596  341]\\n\",\n+      \" [  97  741  399 3724]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8558563065992896\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8200830539850903\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8875769250012508\\n\",\n+      \"Test accuracy: 0.7817581427928153\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4820   15   25   94]\\n\",\n+      \" [  15 3356  923  804]\\n\",\n+      \" [  24 1009 3597  344]\\n\",\n+      \" [ 114  710  383 3754]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8550557862610697\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8147295742232451\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8839245509581228\\n\",\n+      \"Test accuracy: 0.7768549557212188\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=17 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_3\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_3 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_3 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_9 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_9 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_9 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_9 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_10 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_10 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_10 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_10 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_11 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_11 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_11 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_11 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_3 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_6 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_7 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"17489/17489 [==============================] - 163s 9ms/step - loss: 0.6604 - accuracy: 0.7132 - val_loss: 0.5464 - val_accuracy: 0.7681\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"17489/17489 [==============================] - 157s 9ms/step - loss: 0.5818 - accuracy: 0.7518 - val_loss: 0.5207 - val_accuracy: 0.7800\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"17489/17489 [==============================] - 156s 9ms/step - loss: 0.5592 - accuracy: 0.7617 - val_loss: 0.5183 - val_accuracy: 0.7794\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"17489/17489 [==============================] - 157s 9ms/step - loss: 0.5451 - accuracy: 0.7681 - val_loss: 0.5024 - val_accuracy: 0.7879\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.5279 - accuracy: 0.7760 - val_loss: 0.4931 - val_accuracy: 0.7929\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.5145 - accuracy: 0.7821 - val_loss: 0.4879 - val_accuracy: 0.7930\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"17489/17489 [==============================] - 157s 9ms/step - loss: 0.5047 - accuracy: 0.7867 - val_loss: 0.4894 - val_accuracy: 0.7939\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4954 - accuracy: 0.7908 - val_loss: 0.4839 - val_accuracy: 0.7959\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4868 - accuracy: 0.7947 - val_loss: 0.4833 - val_accuracy: 0.7967\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4793 - accuracy: 0.7981 - val_loss: 0.4851 - val_accuracy: 0.7991\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4729 - accuracy: 0.8011 - val_loss: 0.4857 - val_accuracy: 0.7988\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4664 - accuracy: 0.8041 - val_loss: 0.4869 - val_accuracy: 0.7978\\n\",\n+      \"Epoch 13/15\\n\",\n+      \"17489/17489 [==============================] - 158s 9ms/step - loss: 0.4608 - accuracy: 0.8067 - val_loss: 0.4929 - val_accuracy: 0.7949\\n\",\n+      \"Epoch 00013: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4836   21   15   82]\\n\",\n+      \" [   7 3312 1018  761]\\n\",\n+      \" [  33  956 3575  410]\\n\",\n+      \" [ 118  674  359 3810]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8513533796968029\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8170310701956272\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8859258518036723\\n\",\n+      \"Test accuracy: 0.7771551508480512\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4842   16   32   64]\\n\",\n+      \" [   9 3239 1039  812]\\n\",\n+      \" [  26  955 3613  380]\\n\",\n+      \" [ 134  669  336 3822]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8532619571743045\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.813338002801681\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8859315589353612\\n\",\n+      \"Test accuracy: 0.7762657594556734\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4850   15   22   67]\\n\",\n+      \" [  16 3314 1020  748]\\n\",\n+      \" [  28  919 3599  428]\\n\",\n+      \" [ 148  678  359 3776]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8513033471756641\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8183819482663731\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.88522539650773\\n\",\n+      \"Test accuracy: 0.7774553459748836\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4844   16   14   80]\\n\",\n+      \" [  10 3388  942  758]\\n\",\n+      \" [  28  943 3619  384]\\n\",\n+      \" [ 121  689  367 3784]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8567568919797869\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8211337369290038\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8866263070996148\\n\",\n+      \"Test accuracy: 0.7822584680042027\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4841   13   18   82]\\n\",\n+      \" [  15 3306  954  823]\\n\",\n+      \" [  33  919 3674  348]\\n\",\n+      \" [ 117  658  383 3803]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8583579326562265\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8196827938159804\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8853754940711462\\n\",\n+      \"Test accuracy: 0.7817081102716766\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=18 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_4\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_4 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_4 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_12 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_12 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_12 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_12 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_13 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_13 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_13 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_13 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_14 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_14 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_14 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_14 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_4 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_8 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_9 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"18583/18583 [==============================] - 172s 9ms/step - loss: 0.6563 - accuracy: 0.7133 - val_loss: 0.5542 - val_accuracy: 0.7612\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.5772 - accuracy: 0.7527 - val_loss: 0.5279 - val_accuracy: 0.7757\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"18583/18583 [==============================] - 167s 9ms/step - loss: 0.5566 - accuracy: 0.7628 - val_loss: 0.5191 - val_accuracy: 0.7778\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.5424 - accuracy: 0.7692 - val_loss: 0.5073 - val_accuracy: 0.7819\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.5300 - accuracy: 0.7749 - val_loss: 0.4993 - val_accuracy: 0.7883\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.5190 - accuracy: 0.7796 - val_loss: 0.4969 - val_accuracy: 0.7883\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"18583/18583 [==============================] - 167s 9ms/step - loss: 0.5089 - accuracy: 0.7845 - val_loss: 0.4951 - val_accuracy: 0.7891\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.5013 - accuracy: 0.7882 - val_loss: 0.4913 - val_accuracy: 0.7918\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.4942 - accuracy: 0.7914 - val_loss: 0.4913 - val_accuracy: 0.7904\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"18583/18583 [==============================] - 167s 9ms/step - loss: 0.4882 - accuracy: 0.7942 - val_loss: 0.4908 - val_accuracy: 0.7918\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.4823 - accuracy: 0.7969 - val_loss: 0.4878 - val_accuracy: 0.7946\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.4769 - accuracy: 0.7994 - val_loss: 0.4883 - val_accuracy: 0.7953\\n\",\n+      \"Epoch 13/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.4721 - accuracy: 0.8016 - val_loss: 0.4891 - val_accuracy: 0.7950\\n\",\n+      \"Epoch 14/15\\n\",\n+      \"18583/18583 [==============================] - 166s 9ms/step - loss: 0.4677 - accuracy: 0.8034 - val_loss: 0.4879 - val_accuracy: 0.7944\\n\",\n+      \"Epoch 15/15\\n\",\n+      \"18583/18583 [==============================] - 165s 9ms/step - loss: 0.4627 - accuracy: 0.8060 - val_loss: 0.4893 - val_accuracy: 0.7943\\n\",\n+      \"Epoch 00015: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4839   14   19   82]\\n\",\n+      \" [   6 3164 1096  832]\\n\",\n+      \" [  30  842 3686  416]\\n\",\n+      \" [ 105  585  370 3901]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8533546805423525\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8203332165907841\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8863261119727823\\n\",\n+      \"Test accuracy: 0.7800070045529595\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4855   16   21   62]\\n\",\n+      \" [  12 3099 1149  839]\\n\",\n+      \" [  22  839 3762  351]\\n\",\n+      \" [ 117  659  371 3814]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8540624374624775\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8144886932159295\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8853812287372423\\n\",\n+      \"Test accuracy: 0.7769661797078247\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4838   10   20   86]\\n\",\n+      \" [  13 3212 1099  774]\\n\",\n+      \" [  21  831 3704  418]\\n\",\n+      \" [ 129  609  396 3827]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8508030219642768\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8214339320558363\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8868764697053084\\n\",\n+      \"Test accuracy: 0.7795567118627108\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4834   17   11   92]\\n\",\n+      \" [  11 3259 1006  822]\\n\",\n+      \" [  15  843 3740  376]\\n\",\n+      \" [ 100  608  370 3883]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8591584529944464\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8250362735778256\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8884274778606094\\n\",\n+      \"Test accuracy: 0.7863111022164407\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4841   11   19   83]\\n\",\n+      \" [  13 3142 1004  939]\\n\",\n+      \" [  27  809 3745  393]\\n\",\n+      \" [ 115  585  376 3885]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8597088107269726\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8208335418021714\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.881773152549157\\n\",\n+      \"Test accuracy: 0.7811577525391504\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=19 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_5\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_5 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_5 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_15 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_15 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_15 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_15 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_16 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_16 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_16 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_16 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_17 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_17 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_17 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_17 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_5 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_10 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_11 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"19676/19676 [==============================] - 183s 9ms/step - loss: 0.6307 - accuracy: 0.7267 - val_loss: 0.5280 - val_accuracy: 0.7748\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.5611 - accuracy: 0.7599 - val_loss: 0.5072 - val_accuracy: 0.7864\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.5397 - accuracy: 0.7702 - val_loss: 0.4983 - val_accuracy: 0.7892\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"19676/19676 [==============================] - 176s 9ms/step - loss: 0.5264 - accuracy: 0.7763 - val_loss: 0.4878 - val_accuracy: 0.7953\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"19676/19676 [==============================] - 176s 9ms/step - loss: 0.5131 - accuracy: 0.7824 - val_loss: 0.4845 - val_accuracy: 0.7946\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.5006 - accuracy: 0.7882 - val_loss: 0.4816 - val_accuracy: 0.7958\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.4916 - accuracy: 0.7924 - val_loss: 0.4824 - val_accuracy: 0.7975\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.4834 - accuracy: 0.7958 - val_loss: 0.4862 - val_accuracy: 0.7972\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"19676/19676 [==============================] - 178s 9ms/step - loss: 0.4765 - accuracy: 0.7991 - val_loss: 0.4808 - val_accuracy: 0.7990\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.4704 - accuracy: 0.8021 - val_loss: 0.4845 - val_accuracy: 0.7977\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"19676/19676 [==============================] - 178s 9ms/step - loss: 0.4647 - accuracy: 0.8048 - val_loss: 0.4824 - val_accuracy: 0.7987\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"19676/19676 [==============================] - 177s 9ms/step - loss: 0.4592 - accuracy: 0.8072 - val_loss: 0.4834 - val_accuracy: 0.8005\\n\",\n+      \"Epoch 13/15\\n\",\n+      \"17365/19676 [=========================>....] - ETA: 20s - loss: 0.4541 - accuracy: 0.8098\"\n+     ]\n+    }\n+   ],\n    \"source\": [\n     \"git_sha1, git_diff = get_repo_sha1_and_diff(search_parent_directories=True)\\n\",\n     \"result_file_path = os.path.join(data_directory, f\\\"result_vary_raining_data_{datetime.datetime.now().strftime('%Y%m%d-%H%M')}.json\\\")\\n\",\n\n---", "paper/Visualize_Results_Vary_Train_Data.ipynb\n=======================================================\nlhs: 100644 | a3ce525c3ab66b8f0970469f61a271da4dd5d9bc\nrhs: 100644 | e0dcf5d94a3031f7041193054a3e2f3cb20a4c29\n---@@ -2,7 +2,7 @@\n  \"cells\": [\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 2,\n+   \"execution_count\": 1,\n    \"id\": \"63bbe8e3-4d50-4240-b473-a7ad8dfad902\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -21,7 +21,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 3,\n+   \"execution_count\": 22,\n    \"id\": \"6d344711-3707-40af-9763-afd5e0f7bf17\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -67,7 +67,9 @@\n     \"        # Adds the 25% (or 50%) accuracy line\\n\",\n     \"        guessing = np.full((1000, 1), guessing_level_percent)\\n\",\n     \"        ax.plot(guessing, 'r')\\n\",\n-    \"\\n\",\n+    \"    \\n\",\n+    \"    ax.set_ylim(60, 90)\\n\",\n+    \"    \\n\",\n     \"    ax.legend()\\n\",\n     \"    ax.set_ylabel(\\\"Accuracy (%)\\\")\\n\",\n     \"    ax.set_xlabel(\\\"Number of measurements\\\")\\n\",\n@@ -86,7 +88,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 4,\n+   \"execution_count\": 23,\n    \"id\": \"ca1fe49b-f77b-4422-a172-7eb144577936\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -100,7 +102,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 12,\n+   \"execution_count\": 24,\n    \"id\": \"3ad46a0a-51fb-411f-a8da-cc6efed3ea36\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -129,7 +131,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 13,\n+   \"execution_count\": 25,\n    \"id\": \"301626aa-b0b7-46a7-861c-6144a1d446e8\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -178,7 +180,7 @@\n     },\n     {\n      \"data\": {\n-      \"image/png\": \"\\n\",\n+      \"image/png\": \"\\n\",\n       \"text/plain\": [\n        \"<Figure size 1440x1080 with 1 Axes>\"\n       ]\n@@ -212,7 +214,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n+   \"execution_count\": 26,\n    \"id\": \"9b1c2ac3-dce9-449f-a4c5-cc3f4dab0e72\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -221,55 +223,63 @@\n      \"output_type\": \"stream\",\n      \"text\": [\n       \"Warning. Failed to interpret n_classes from json file! Set to default.\\n\",\n+      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.]), accuracy=array([[71.88172312, 70.46728037, 71.02616701, 72.44709061, 72.36703858],\\n\",\n+      \"       [74.41837194, 73.97938763, 74.22824836, 75.06379146, 74.43838495],\\n\",\n+      \"       [75.12883374, 74.87992796, 75.15885325, 75.71921749, 75.12883374],\\n\",\n+      \"       [75.69920448, 75.53532119, 75.94936709, 76.07945164, 75.71921749],\\n\",\n+      \"       [76.10947116, 75.50030018, 75.92435083, 76.59978986, 75.70921099],\\n\",\n+      \"       [76.50472807, 75.33520112, 75.93936058, 76.2195427 , 76.36463701],\\n\",\n+      \"       [76.52974433, 76.20072043, 76.71486466, 77.31525492, 76.70986141],\\n\",\n+      \"       [76.70986141, 76.04062437, 77.04007605, 77.39530695, 76.73487767],\\n\",\n+      \"       [77.1501476 , 76.97618571, 77.30024516, 77.45034272, 76.90999149],\\n\",\n+      \"       [77.35528093, 76.76605964, 77.56541752, 77.9856907 , 77.5053785 ],\\n\",\n+      \"       [77.21018662, 76.83109866, 77.25521589, 77.66548256, 76.87496873],\\n\",\n+      \"       [77.42032321, 76.84610766, 77.515385  , 77.92064842, 77.48536549]])\\n\",\n+      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.]), accuracy=array([72.40206003, 75.03377199, 76.12448335, 76.65482759, 76.62981153,\\n\",\n+      \"       77.44033337, 77.5404036 , 78.15079689, 78.20583582, 78.88127565,\\n\",\n+      \"       78.3059001 , 78.77120376])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([[54.37534397, 52.61156694, 53.84499925, 54.60049032, 54.68054235],\\n\",\n-      \"       [55.57612448, 55.65339204, 56.00140091, 56.41667084, 55.56611798],\\n\",\n-      \"       [55.96637815, 55.47328397, 56.67183669, 55.94136189, 56.10146595],\\n\",\n-      \"       [56.95201881, 56.91915149, 57.65247411, 57.59243508, 57.5073798 ],\\n\",\n-      \"       [57.58242858, 57.32939764, 57.94266273, 58.14779607, 58.12277981],\\n\",\n-      \"       [58.1127733 , 58.0648389 , 58.46300095, 58.87326762, 58.81823185],\\n\",\n-      \"       [58.91329364, 58.8903342 , 59.44363836, 59.08340421, 59.31355381],\\n\",\n-      \"       [58.76819933, 59.02541525, 59.82888878, 58.70315705, 59.53870016],\\n\",\n-      \"       [59.01335868, 58.69521713, 59.35357983, 58.99334567, 59.29854405],\\n\",\n-      \"       [58.63811477, 58.92035221, 59.773853  , 58.80322209, 59.4186221 ],\\n\",\n-      \"       [59.59873918, 59.38062838, 59.90393756, 59.78385951, 59.54370341],\\n\",\n-      \"       [59.35858308, 59.08545127, 59.56871967, 59.13843999, 59.25351478],\\n\",\n-      \"       [59.20848552, 58.6151691 , 60.17911643, 60.02901886, 60.05403512],\\n\",\n-      \"       [59.56371642, 59.4506704 , 60.25916846, 59.93395707, 60.14409366]])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([55.3309679 , 56.76689744, 57.81758428, 59.02836919, 59.3685925 ,\\n\",\n-      \"       60.0990653 , 60.63941717, 60.98464131, 61.11472249, 61.35488153,\\n\",\n-      \"       62.05533743, 62.20043302, 61.92525029, 62.46560216])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([[52.26897483, 50.94056434, 51.85370491, 52.15390004, 51.88372442],\\n\",\n-      \"       [51.63856507, 50.51030618, 51.36838945, 51.27833092, 51.46345124],\\n\",\n-      \"       [52.67924151, 51.96117671, 52.52914394, 52.74428378, 52.66423175],\\n\",\n-      \"       [52.75429029, 52.87172303, 53.29464152, 52.75929354, 52.57917646],\\n\",\n-      \"       [55.71121229, 54.94296578, 55.43103017, 55.85130335, 56.15650173],\\n\",\n-      \"       [56.07644969, 56.20872524, 56.73187572, 56.23155051, 56.27657978],\\n\",\n-      \"       [55.65617651, 55.13307985, 55.68619603, 55.53109521, 55.68619603],\\n\",\n-      \"       [56.62680742, 56.26876126, 56.98704158, 57.01706109, 57.18216841],\\n\",\n-      \"       [56.2115375 , 55.62337402, 56.44669035, 56.46170011, 56.52173913],\\n\",\n-      \"       [56.59678791, 56.29877927, 56.74688548, 56.63181068, 56.67683995],\\n\",\n-      \"       [56.52674238, 55.563338  , 56.32160905, 56.37664482, 56.46670336],\\n\",\n-      \"       [56.39665783, 56.58895337, 56.27157652, 56.38665132, 56.47170661],\\n\",\n-      \"       [57.48736679, 56.24374625, 57.34227248, 57.51238305, 57.51238305],\\n\",\n-      \"       [56.8069245 , 56.18371023, 56.72687247, 57.07710012, 56.76689848],\\n\",\n-      \"       [57.32225947, 57.70462277, 58.20783509, 57.71751639, 58.36293591],\\n\",\n-      \"       [58.19782859, 57.86471883, 58.60309201, 58.38795217, 58.75819283],\\n\",\n-      \"       [58.3529294 , 57.93476086, 58.37294241, 58.583079  , 58.78320909],\\n\",\n-      \"       [58.15780257, 57.79967981, 58.79821884, 58.65812778, 58.77820583],\\n\",\n-      \"       [58.78821234, 58.20992596, 59.20348226, 58.92330015, 58.96332616]])\\n\",\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([[71.06619303, 70.53231939, 70.59588733, 71.12623205, 70.6409166 ],\\n\",\n+      \"       [71.7166158 , 71.42785671, 71.85170361, 72.45209386, 72.09185971],\\n\",\n+      \"       [73.03247111, 72.19331599, 72.85235403, 73.55280933, 73.05748737],\\n\",\n+      \"       [74.31330365, 74.06944166, 74.37834592, 74.80862561, 74.29829389],\\n\",\n+      \"       [74.3183069 , 73.82429458, 74.31330365, 74.84364837, 74.04312803],\\n\",\n+      \"       [74.60349227, 74.76485892, 74.44839145, 75.11382399, 74.73858008],\\n\",\n+      \"       [75.78425977, 75.31518911, 75.73422725, 76.83994596, 76.05943864],\\n\",\n+      \"       [74.62850853, 74.58975385, 74.40336219, 75.15885325, 74.64852154],\\n\",\n+      \"       [75.63416221, 75.05503302, 75.41902236, 76.14949717, 76.06944514],\\n\",\n+      \"       [76.324611  , 75.94056434, 76.0844549 , 76.70485816, 76.17951669],\\n\",\n+      \"       [75.63416221, 74.69981989, 75.2689248 , 76.00440286, 75.32396057],\\n\",\n+      \"       [76.60479312, 75.91054633, 76.40466303, 77.0450793 , 76.34462401],\\n\",\n+      \"       [76.25956872, 75.94556734, 76.04442888, 76.58978336, 76.34962726],\\n\",\n+      \"       [76.0844549 , 75.78046828, 76.47971181, 76.59978986, 76.0944614 ],\\n\",\n+      \"       [76.45469555, 76.02061237, 76.77490369, 76.89498174, 76.55976385],\\n\",\n+      \"       [77.19517686, 76.30578347, 76.68484515, 77.43533297, 76.83494271],\\n\",\n+      \"       [77.03006955, 76.69601761, 76.66983539, 77.29023866, 76.62980938],\\n\",\n+      \"       [76.37964677, 75.62037222, 76.26957522, 76.71986791, 76.1044679 ],\\n\",\n+      \"       [76.92500125, 76.48589153, 76.72987442, 77.49537199, 76.85495572],\\n\",\n+      \"       [76.75989393, 76.32079248, 76.69985491, 77.34527443, 77.05508581],\\n\",\n+      \"       [77.12513134, 75.96557935, 76.76489718, 77.37529394, 77.09010857],\\n\",\n+      \"       [76.61980287, 76.17070242, 76.86996548, 77.26522239, 77.22019313],\\n\",\n+      \"       [77.09511182, 76.83109866, 76.98504028, 77.65547606, 77.15515085],\\n\",\n+      \"       [77.05508581, 76.71102662, 76.86996548, 77.49036874, 77.44533947],\\n\",\n+      \"       [76.95502076, 76.57094257, 77.12012808, 77.78055736, 77.42032321],\\n\",\n+      \"       [77.55541102, 76.60096058, 77.66548256, 77.94566468, 77.45034272],\\n\",\n+      \"       [76.85495572, 76.42085251, 77.00005003, 77.39530695, 77.1601541 ]])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([52.47410536, 51.6535759 , 53.55981588, 53.02446485, 56.6868484 ,\\n\",\n-      \"       57.35228062, 56.41166568, 58.03272128, 56.83193803, 57.94766545,\\n\",\n-      \"       57.54740834, 57.36228824, 58.67813826, 57.75253773, 59.2885375 ,\\n\",\n-      \"       60.15910506, 60.2391541 , 60.36423445, 60.74948907])\\n\"\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([71.81668282, 72.26697206, 73.62785935, 75.26892424, 75.27893186,\\n\",\n+      \"       75.71921945, 76.74488425, 75.82929134, 76.74488425, 77.3853004 ,\\n\",\n+      \"       76.52474046, 77.91564465, 77.47035623, 77.30024457, 77.56041288,\\n\",\n+      \"       78.26587558, 77.84059644, 77.44534016, 78.14579606, 78.18582058,\\n\",\n+      \"       78.26587558, 78.38094831, 78.53104472, 78.99634838, 78.69114876,\\n\",\n+      \"       78.66613269, 78.22084427])\\n\"\n      ]\n     },\n     {\n      \"data\": {\n-      \"image/png\": \"\\n\",\n+      \"image/png\": \"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Ro8eTUJCAr179yYvL499+/Zx2WWXlffdUKoM0zQruoYzSk5ONlesWFHRZYiIiIiIiIgIsGnTJpo1a1bi48pqSJqc2al+ZoZhrDRNM/lU+6uHkYiIiIiIiIiUi3ttsyu6BCkmBUYiIiIiIiIiUi7utX1S0SVIMSkwEhERERERERERLwqMRERERERERETEiwIjERERERERERHxosBIRERERERERES8KDASERERERERkSqle/fuzJs3z2vbyy+/zB133FHkMStWrADgsssuIz09/aR9xowZw7hx44q89pw5c9i4cWPh908++SQLFiwoQfVVgwIjEREREREREalShg4dyowZM7y2zZgxg6FDhxbr+K+++oqwsLCzuvbfA6NnnnmGXr16ndW5KjMFRiIiIiIiIiJSpQwePJgvv/yS/Px8AHbt2sW+ffvo3Lkzt99+O8nJybRo0YKnnnrqlMfXr1+fQ4cOAfDcc8/RtGlTevXqxZYtWwr3eeONN2jTpg0JCQkMGjSInJwcli5dyueff86//vUvEhMT+f333xkxYgSzZ88GYOHChbRq1Yq4uDhGjhxZWF/9+vV56qmnSEpKIi4ujs2bN59U065du+jSpQtJSUkkJSWxdOnSwrYXX3yRuLg4EhISePjhhwHYvn07vXr1IiEhgaSkJH7//fdSuGdPsJXq2URERERERETkwvP25Sdva9Ef2t4CBTkw/eqT9028FloNg6OHYdYN3sfeOLfIy1WrVo22bdvyzTff0K9fP2bMmMGQIUMwDIPnnnuOiIgIXC4XPXv25LfffiM+Pv6U51m5ciUzZsxg9erVOJ1OkpKSaN26NQADBw7klltuAeDxxx/nrbfeYvTo0Vx11VVcccUVDB482OtceXl5jBgxgoULF9KkSRNuuOEGJk2axL333gtAZGQkq1at4vXXX2fcuHG8+eabXsdXr16d+fPn4+fnx7Zt2xg6dCgrVqzg66+/Zs6cOfz6668EBASQlpYGwLBhw3j44YcZMGAAeXl5uN3uIu+zklJgJCIiIiIiIiLnJv0PyNjtve2PH+GrB07e948fT3z+7DRzDi1+Hno8UuQljw9LOx4YTZ06FYBZs2YxZcoUnE4n+/fvZ+PGjacNjH744QcGDBhAQEAAAFdddVVh2/r163n88cdJT08nOzubPn36FFnPli1baNCgAU2aNAFg+PDhTJw4sTAwGjhwIACtW7fmk08+Oel4h8PBXXfdxZo1a7BarWzduhWABQsWcOONNxbWGBERQVZWFnv37mXAgAEA+Pn5FVnb2VBgJCIiIiIiIiLn5r71xdtvTCiMySiVS/bv35/777+fVatWkZubS1JSEjt37mTcuHEsX76c8PBwRowYQV5eXpHnMQzjlNtHjBjBnDlzSEhIYNq0aSxZsqTI85imWWS7r68vAFarFafTeVL7+PHjiY6OZu3atbjd7sIQyDTNk2o807VKg+YwEhEREREREZEqJygoiO7duzNy5MjCya4zMzMJDAwkNDSUlJQUvv766yLP0bVrVz799FNyc3PJysriiy++KGzLysoiJiYGh8PB9OnTC7cHBweTlZV10rliY2PZtWsX27dvB+C9996jW7duxb49GRkZxMTEYLFYeO+993C5XABccsklTJ06lZycHADS0tIICQmhdu3azJkzB4D8/PzC9tKiwEhEREREREREqqShQ4eydu1arrnmGgASEhJo1aoVLVq0YOTIkXTq1KnI45OSkhgyZAiJiYkMGjSILl26FLaNHTuWdu3a0bt3b2JjYwu3X3PNNbz00ku0atXKa6JpPz8/3n77ba6++mri4uKwWCyMGjWq2Lfljjvu4J133qF9+/Zs3bqVwMBAAPr27ctVV11FcnIyiYmJjBs3DvAEUq+88grx8fF07NiRAwcOAJCYmFjsaxbFKI9uTOcqOTnZXLFiRUWXISIiIiIiIiLApk2baNasWckPLMUhaVIyp/qZGYax0jTN5FPtrx5GIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIlI9uD1d0BVJMCoxEREREREREpHz0eKSiKyiWefPmkZiYSGJiIkFBQTRt2pTExERuuOGGYp9j2rRp7Nu3rwyrLFu2ii5ARERERERERKQy6dOnD3369AGge/fujBs3juTk5BKdY9q0abRs2ZKaNWuWRYllTj2MRERERERERKTK6d+/P61bt6ZFixZMmTIFgEmTJvHggw8W7jNt2jRGjx4NwNixY4mNjaV3794MHTqUcePGlfia77//Pm3btiUxMZHbbrsNl8uFy+VixIgRtGzZkri4OMaPH8/s2bNZsWIFw4YNIzExkdzcXK/zvPHG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T9o3Z/nyws/7H330lOdLffU1okbfVeQ1jw9LOx4YTZ06FYBZs2YxZcoUnE4n+/fvZ+PGjacNjH744QcGDBhAQEAAAFdddVVh2/r163n88cdJT08nOzubPn36FFnPli1baNCgAU2aNAFg+PDhTJw4sTAwGjhwIACtW7fmk08+Oel4h8PBXXfdxZo1a7BarWzduhWABQsWcOONNxbWGBERQVZWFnv37mXAgAEA+Pn5FVnb2VBgJCIiIiIiIiLnpPGihcXab1NsM5pt3lQq1+zfvz/3338/q1atIjc3l6SkJHbu3Mm4ceNYvnw54eHhjBgxgry8vCLPYxjGKbePGDGCOXPmkJCQwLRp01iyZEmR5zFNs8h2X19fAKxWK06n86T28ePHEx0dzdq1a3G73YUhkGmaJ9V4pmuVBs1hJCIiIiIiIiJVTlBQEN27d2fkyJGFk11nZmYSGBhIaGgoKSkpfP3110Weo2vXrnz66afk5uaSlZXFF198UdiWlZVFTEwMDoeD6dOnF24PDg4mKyvrpHPFxsaya9cutm/fDsB7771Ht27din17MjIyiImJwWKx8N577+FyuQC45JJLmDp1Kjk5OQCkpaUREhJC7dq1mTNnDgD5+fmF7aVFgZGIiIiIiIiIVElDhw5l7dq1XHPNNQAkJCTQqlUrWrRowciRI+nUqVORxyclJTFkyBASExMZNGgQXbp0KWwbO3Ys7dq1o3fv3sTGxhZuv+aaa3jppZdo1aqV10TTfn5+vP3221x99dXExcVhsVgYNWpUsW/LHXfcwTvvvEP79u3ZunUrgYGBAPTt25errrqK5ORkEhMTGTduHOAJpF555RXi4+Pp2LEjBw4cACAxMbHY1yyKUR7dmM5VcnKyuWLFioouQ0RERERERESATZs20axZs5IfV4pD0qRkTvUzMwxjpWmayafaXz2MRERERERERETEiwIjERERERERERHxosBIREREREREREqsKkxxIx5n87NSYCQiIiIiIiIiJeLn58fhw4cVGlUBpmly+PBh/Pz8SnScrYzqEREREREREZHzVO3atdmzZw+pqaklPnbTJk16Xd78/PyoXbt2iY5RYCQiIiIiIiIiJWK322nQoEGJj0u9806izmJ1NSl/GpImIiIiIiIiIuUiavRdFV2CFJMCIxERERERERER8aLASEREREREREREvCgwEhERERERERERLwqMRERERERERETEiwIjERERERERERHxosBIRERERERERES8KDASEREREREREREvCoxERERERERERMSLAiMREREREREREfGiwEhERERERERERLwoMBIRERERERERES8KjERERERERERExIsCIxERERERERER8aLASEREREREREREvCgwEhERERERERERLwqMRERERERERETEiwIjERERERERERHxosBIRERERERERES8KDASEREREREREREvCoxERERERERERMSLAiMREREREREREfGiwEhERERERERERLwoMBIRERERERERES8KjERERERERERExIsCIxERERERERER8aLASEREREREREREvCgwEhERERERERERLwqMRERERERERETEiwIjERERERERERHxosBIRERERERERES8KDASEREREREREREvCoxERERERERERMSLAiMREREREREREfGiwEhERERERERERLwoMBIRERERERERES+VOjAyDONKwzCmZGRkVHQpIiIiIiIiIiIXjEodGJmm+YVpmreGhoZWdCkiIiIiIiIiIheMSh0YiYiIiIiIiIhI+VNgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiBcFRiIiIiIiIiIi4kWBkYiIiIiIiIiIeFFgJCIiIiIiIiIiXhQYiYiIiIiIiIiIFwVGIiIiIiIiIiLiRYGRiIiIiIiIiIh4UWAkIiIiIiIiIiJeFBiJiIiIiIiIiIgXBUYiIiIiIiIiIuJFgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiIiIiIiIiJcyDYwMw7jPMIwNhmGsNwzjQ8Mw/AzDiDAMY75hGNuOfQ4vyxpERERERERERKRkyiwwMgyjFnA3kGyaZkvAClwDPAwsNE2zMbDw2PciIiIiIiIiIlJJlPWQNBvgbxiGDQgA9gH9gHeOtb8D9C/jGkREREREREREpATKLDAyTXMvMA74E9gPZJim+S0QbZrm/mP77Aeqn+p4wzBuNQxjhWEYK1JTU8uqTBERERERERER+ZuyHJIWjqc3UQOgJhBoGMZ1xT3eNM0ppmkmm6aZHBUVVVZlioiIiIiIiIjI35TlkLRewE7TNFNN03QAnwAdgRTDMGIAjn0+WIY1iIiIiIiIiIhICZVlYPQn0N4wjADDMAygJ7AJ+BwYfmyf4cBnZViDiIiIiIiIiIiUkK2sTmya5q+GYcwGVgFOYDUwBQgCZhmGcROeUOnqsqpBRERERERERERKrswCIwDTNJ8Cnvrb5nw8vY1ERERERERERKQSKsshaSIiIiIiIiIiUgUpMBIRERERERERES8KjERERERERERExIsCIxERERERERER8aLASEREREREREREvCgwEhERERERERERLwqMRERERERERETEiwIjERERERERERHxosBIRERERERERES8KDASEREREREREREvCoxERERERERERMSLAiMRERERERGRSij11dcqugS5gCkwEhEREREREamEDk2cWNElyAVMgZGIiIiIiIiIiHhRYCQiIiIiIiIiIl4UGImIiJyrxc9XdAUiIiIiIqVKgZGIiMi5+u6Fiq5ARERERKRUKTASEREREREREREvCoxERESkfGkIn4iIiEilp8BIREREypeG8ImIiIhUegqMRERERERERCoRd0EBOatXV3QZp5X66msVXcIpVda6qipbRRcgIiIiIiIiciFJffU1Dk2cWKx9N8U2O+M+kXfeSdTou861rGI7NHFiuV6vuCprXVWVAiMRERERERGRchQ1+i6iRt+FOy+P7B9+IG/jRqrfcw8A+x55FCwGQV26svfeewnu04eA1klE3HADruyjbOvUCd+mTfGPj8c/IQH/hHjsdepU8C2S85ECIxERkXORl1HRFYiIiEgV4s7NJfu778n6dh5ZS77DzMnBGhFBtZEjsQYHU/P5fxfuuxeoPeHlwu9NRwERN1xP7pq1pH/yCUfefx+AGk89SfjQoTiPHCFvw0b84+OwhoSU8y2T840CIxERkbO15Wv48BrP10tfg8RrISCiYmsSERGREkl99bUyH8bkPnoUDANLQAAZn3/BgaeewlqtGqFXXUlInz4EtGmDYTvzy3NbeDjV//lPAEynk/zt28ld+xuB7dsBkPPzz+y939Pu07ChpxdSYgIhfftiDQsrs9sn5ycFRiIiIqez+Pnir+j17WOej6J0exh6PHLudYmIiEipKat5b1zZ2WQvXkLWt/PI/v4Hoh95hPBrhhDS5xJ86tcnILk1htV61uc3bDb8YmPxi40t3BbYtRt1p75F7m+/kbv2N7K//56MOXMI7NwFa1gYmfPnk7t6zYmhbDVqlMZNlfOUAiMREZHT6fGI58M0Ydt8+OE/sPsXqNMebpp3Yr8xoTDqJ1j5Nuz+FW79HiwW2L0MqjcD3+CKuw2VjdtV0RWIiIiUKdPhYM+993H0hx8wCwqwVa9O2NVX458QD4A1LIzAdm3L5NrWoEACO3YksGNHTy2miWPvXuy1agKQv2kzR957j7SpUwGwVa+Of6tW1Br/XwyLBdPtxrBoMXXxUGAkIiJSlB1L4Nsn4MBvEFoHLhsHra47eb8aLeHy/3jCJcMAZz58MARcBRB3NbS5CWrElXv5lcbOH2DDp7Dpi4quREREpFS5MjLIWrgIZ8oBIm+/HcNux7BYCLtmCCF9++KfmFhhIYxhGPjUrl34fdTdo6k26jbyN28md+1v5P72G+7MzML69tx+B46UFK8JtX0aNlSIdIFSYCQiIvJ3Lge4nWD3h9wj4MiBfq97gh+bT9HHGobns9UHhn0EK6bC2g89vY9qt4Hez0C9jmV/GypCSYbwjQk98z4awicicl4pj7mCyovzyBGyFy0i85t5HP35Z3A68alfn2q33IJhs1H71VcqusTTsvj4eAKh+PiT2gLatuXo0qVkfv016bNmARDYrSt1//c/AI4uW4Zvo0blWq9UHAVGIiIixzlyYfX78NMESLoBuj0IzfpBs6vAUsI5BgwDaid7Pvo8B2s+9IRHxrF36NJ3e3ohRZ5HT7q6PuAJxTbOgc1zPSvI/Wu7ZyLwtJ0QVB18Aj1h0RitLicicqEpq7mCyovzyBEsgYFYfHw48sEHHHr1Ney1axMx/AZC+vbFr2VLjONvHFVR1W4aSbWbRmK63RTs2kXumrVYQzxD6925ufx540hweYaXb0lqDXY71W4cQeSoUbjS09n5jyEYVqtnAm+bDcNmI3zYtYT1748zNZV9jzx6rM2KYbNjWK2EDhxAUKdOOFJSOPy/KRh2G1g9xxo2K8G9e+PXrBmOlINkzfsGrMeOtXmuE9CmDfaaNXEePgx4JgMvzgTicma6F0VERPKzYPlb8PNEOHoQarf1BD3gmYvoXPmHQ4c7oP3tJ7b99DIsfxMadIXkmyD2crDaz/1af7X4+fLrobN1HnxyK+Slg08wNL0UmvfzBEQAEQ3Kpw4REZFS5Dx8mKz5C8ic9w05y5ZTe8LLBPfqRdjgwQR1645fi+ZVPiT6q9RXX+PQxInF2tedk+M55uUJpL484ZT72OvWxeLrC4DpcuHKzASnE9PpxHS5MJ0Ogrp1BcCVnkHm3LnHtnvacTjwqV+frAULi13X5pZnngIg8s47q3R4WV4UGImIiHx2l6dXTMMe0GUq1O98YmhZafrrObs+CMExsPId+Gg4BEVDu1HQ5f7Su953L5RNYOTMh98Xe+6zZld6wq7IxtCkL7To77kf7X6lf12REjifhr6IlIQe+6XDeeQIe++9j5zly8HtPjbc7GZ8mzQBwB4djT06uszriLzzzjK/xl9Fjb6rWI+fTbHNaLZ5U4nOba9RgwazZp623a9pE5r8+ovXNtM0Ac9cTJG3j8J99KgnTHK6wOnAdLmwVauGJTAQV2YmW9u2I+SqK8le8p1nbiZ/fy6a+yX2mjUxTfO8CvfKgwIjERG58GQdgJ9fgzY3Q3h9z9CzjndD7dblV0NwtGcIV+f7YPsCz3C1zL2eNtOEnd97gquSDoUrK243bP0aNsyBrd9Afib4hUKtY/dZREMY+L8KLVHkr6r60BeRs6XH/tlxpBwk69tvMV1Oqo0YgTUsDMNmI3LUKIL79MG3SeMKCRsu9J/lX+9zw2bDGnr6ORCtISEA1HrxRUyHg5zlyzm6bBm2mBgADjz5JAV79hDcqxfBvXqVS+BX1SkwEhGRqqE0hlcd+cMzP9Hq98HtgKhYT2AU3aJUSjwrFis06eP5cLs92/Ysh3evgtC60Hq4Zz6loOrlX1tBDqRuhlpJnt5R85+EnMOeoWbN+3uG051pEnAREZFKwp2fj+vQIey1agGQtXAhOcuWA7C9WzfAM+lztREjMAyDum+9WWG1yrkx7HYCO3YksOOJhUbsdeqSs3wFKWOfJWXss/jFxxM2eBDh//hHudRUFXv/KTASERFv5TnvTUmcy/Aq04Qv7vEERRYrJF4Lne7x9IqpTI7PlxSTCFdP8/Q6WjQWlrwAza6Avi9AcI2yraHgKGz71tOTaNu3YLF7Jq62+cCw2RBau/TnWhIRqYKq4ou/85VpmrgzM3GkpOBMSSGwQwcMm43do+8me/78Ep0rZ9kyNsU2O2Wb5r2p2iJvvYXIW28h//ffyZq/gKwFC8jfvh3wzK90aNJkgrp1LbPJy6ti7z8FRiIi4q2s5r2pCIe2e1YhMwywB0C726DjaAipWbrX6fZw6Z7P5gMtBng+Dm2DFW97hoH5hXna962B8HqeybRL0+rpMPef4MyFwChIuMbTm+j4sDhNXC0iFaCyBjNV8cVfVWQ6nThTU3GmpOBIOYgzJYWQK6/AFh5OxhdfkvraqzhTDmLm5RUe02jxIuwxMQS2bYtj7x7s1aOxRUdjrxGNrXo0oVdegeHjg+lwgM3G5mbNSzwfj1RdvhddhO9FFxE56jbPxNpA/vbtHJo0iUOvvYatRg2Ce/YkuHcvApKTL+gV1y7cWy4iIuevP5bCD//xzA1080LPimeXvlB21yvLgC2yMfT9N1zyrKcHkmnC7Bshcx+0HORZYe34kLGSyMv0hFAbP4MOd0G9DlC9GbQa5hluVq9j5Zk/SUQuaApmzl/uggIce/biPJiC48ABnMcCofBh1+J70UVkfjOPvffff2LI9jF+LVtiCw/HGh6Of4sW2Hpc7AmEoqtjq1EDa0QEABHXX0fE9ded9vqGXT1mL3SG1fNcx69pUxr/+APZS74ja+EC0j/+mCPTp1PnrTcJ6tQJV3o6hq8vFn//Cq64fCkwEhGR84Npwu8L4fv/wJ9LISASej7pCVzOB8eHqxkGXP2OZ7jab7NgzXSoEe+5rY17F30OZwGs/9gTEv2+EFwFnpXaslM87bWSPB8iIiJnyZ2fD243Fn9/XFlZZC9ZgistDWfaEQD+HHkTETeOIKhLF3LXrOHPG4Z7HW8JCSGoezdPL5AmjYkcdRu26tHYanhWJbNFR2MN9/SwDerciaDOncr9Nsr5yRYeTtiA/oQN6I87J4fsn34isE0bAA6/NZW0994jsHMnz6TZ3btjDQur2ILLgQIjERE5PxRkw+yR4BMEff/PM1G0T0BFV1U2YuLhypeh9zOwbhYsnwrOY13xsw/C0dQTE3nnHoEju6BmK0/YNO9RsPt7Vohr3h9qtzkRRpWX0h7CJyIiZcI0TdxHj+JKSysMfVxHjuDTsAEBrVrhyshg74MPkrdpM66DB4t1zqNLl3J06dLTtrszM8ld+xtBXbvi27AhUXffXVo3R6TYLAEBhPQ+8UZc0MU9cB89StbChWQvWMh+q5WgHt2p89prFVdkOVBgJCIiVZPL4ekts/lLuPpd8A2GGz6H6s3LfeWu8fO3cl/vJuV6TQD8QjzBT/JNnh5WAMvf8sxDVaed5/uXGkFILbhnrWey6luXQGid8g+J/up8mSNLRKSKMd1uXBkZ4HJhi4wEIH32bM8cQWlHPMHQkTQC2rUn8rZbweVia5u2J/7HHBN+/fUEtGqF4eeHMzUVv8aNsbZrhy0iHGt4BIEd2uOfkIDpcFCwZw+2iAgswcFsbt5CcwVJlRTQqhUBrVoR/fhj5G3YQNb8BZguZ2H73gf+hW/jxgT37oVvw0q2qMo5UGAkIiJViyPPMwzrp5ch/U+o3sIzpCokBmomVkhJExZuK9/AaPHznlCoKLt/9Xx2OyH9D3g67PT7dntYIY6cN0yHg+zvvvN87XIVzk8hcj4xnc7CiXjzf/8d56HDuI9m487KAiDjs88I7dcPgL33/5O8rVtwpR3BlZ4ObjdBPXpQZ9LrABycMAFX6iEsgYFYIyKwRoQXzotn2GxEP/oolqAgrOFh2CIisEZEYKtWDQCLry8NP/nktHUadju+DbRgwvko8s47K7qEU9o5qC2nXuOudBgWC/5xcfjHxRVucx89SsGff5L55Zekjh+PT8OGBPfqRWj/flU+PFJgJCIiVUfqFnjnKsg+ALWS4dIXoUnfkk/4XNX1eKR4Ac+YUBiTUfb1lNAX9z3NleOfqugypIpKffU1Dk2cWKx9N7doecZ9tEy2lCfT7cZ99CjunBzs0dEA5K7fQMEfu3BnH8WdnYUrOxvDaiPqLs8L8pSXXiLnl18p2LMbd0Zmsa6z76GH2ffQ6Yf/Zi9eXLj6XMNPP8USEoLF59S9c4uaNFouXJX17+ZDTVZxWTlf0xIYSINZM3EcOEDWwoVkLVjA4bfewqdhA3wbNsSZmkrBn3+Wc1WlQ4GRiIiUDZcTHDngyPX0cgmt5dm+bzVkp55oc+SAXyjEDfa0//Bfz5w7x9scuRDd3NMW0RAadoPEYdCg64UXFJ0nGn09AxQYyVmKGn3XKV+opDz/PGnvvItfy5ZE3j6KPXfeRa1XXyGkd2/cubls69oN/4QEgnp0J7hHD+w1a5Z/8VJlmMeGYBmGgTsnB1dGBmZBAWZBAe58z+fjcteuJXftWlxZWV6hT63//AfDYiH1lVdJ//hj3NnZuI8e9ZzXz4/YNasBSHv3HTI//+LExS0W7LVqFQZGht2ONbIaQfXqYQkOxhIUiD2mJhHXDQMgZ/VqzPwCTy+g4CB+79OX2PXrir0U+PGhaSJybuw1ahAxbBgRw4Z5VlU7FsJmfv01eZu3VHB1Z0eBkYiInOy3WccCm2OhjemCrv/ytC17A3b96B3o+ATC8M897bOGw+a54HacOF+1RjB6pefreY/BHz+dfM2Pbzp9Pb8v9Hwee+xJ7W8zT7+vhleJXBBMh4OMzz/Hr2VL/Jo2JXzYMAI6dCCoWzeMY2Hy8QlL3Xl5hA0aRPbixaSMfZaUsc/i27Qp0Y88QmD7duVa9/FeHVIyuevWYxbknwhtCgrwT0jAXr06BXv2kL1oUeF2s6AAM7+A8KHX4FO3LjkrV3Jk+vTCoMfTnk/Mv/+Nb8MGZHzxBQf/898Tbcc+Lpr3DT716pE2fTqp//nvaWvL/u47Dr0+CQDD3x9rUBCWoCDMvDyMgADsdesQ2KkT1uAgLIFBWIKDsQYHYZomhmEQdfc9RN52G5agYKxBgRgBAYWPYYDq995b5H0T0KrVSduKGxaJyLkrSc/XTbFnHjBXmXq+6i+JiMiFojjz3hz3yS0nb1v0rPf3QdEQcZGnd1Bg1IntjXpBRAOwB3hW47L7e5a4P+7SF8GZD3a/Y+0Bng+/kKJrqqTDq0SkfB0Pig5Nmoxjzx4iRo7E78F/4VO3Lj51657yGFt4ONEPP0T0ww+Rv2Mn2YsXk7V4EdZQz9+do0uXkvHVVwRffDGBHTpg8fcvs/oPTZxYaV4IVGYFe/ZiWIzCnmC7rr76pH1qT3wNe8+e5G/fTsq/nz/RYLFg+PoS1KM7PnXr4srMJG/TZgwfH8+Hrw+WgBM/Y1v1aAI7dsTwsWP4+JC3fj25q1bze5++Z6zz7y/+zNxcnLm5kJrKlqTWgOfFX81/P3fac/jUrnXG60jZqqzz8UjVcLqer3+3KbZZlZv0XYGRiMiF4u/z3uRlwOr3YdkUzxCwYbOhcW9PMHPXyhNhjz0AbL7FH/6VdH3R7TXOPKeIiMipZHzxJakTJuDYswe/li2Jfvwxgrp1K9E5fBs2wLdhA6rdNLJwW8HuPWR9M4+M2R9j+PoS2L49QT16EDZoIIbdXto3Q44pybvyp7LnTu8XaNVuvZWou0ef1LsmuEcPgnv0OO15Atu1JbBd2xJfvyq++JNTU4hbcq+veZ07Eu+o6DKkjCkwEhG50ORlwqKxsOYDKMiGOu2h1xho2P3EPpGNKqo6EREvpsMBNhuGYZC/fTvWsLDCoMgopXnMwof8g7AB/clZuZKsxYvJXryEvM2bCRvyDwCyFi3GFl0dv+bNS+2a4v2ufMGff3Jo8v/I+OwzDKuVsKuvptotN2OvUUPBjEglNGntJAVGFwAFRiIiFwLT9CytHl7f02No+0KIvQLaj4KaJ899ICJS0UyHg4zPPuPQpMlEP/4YwT16EHXnHUTde0+ZhDaGjw+BHToQ2KED5iOP4EpLwzAMTNPkwNNP40xJwRYdTVD37gT16E5g+/ZY/PxKvY4LVdp775M5dy7h115LtZtvxh5dvaJLEhG54CkwEhE5n+Vnw28z4Nf/QW463LfeM7zszl/BqmEWIlL5/DUocuzdi1/LlliDgwEKV5wpa4ZhYKtWrfDrBp98TPZ335O9eDEZX3xB+syZhA29hpinnsJ0u3EdPowtKuoMZ5W/yt+5k8OTJxM6cBCB7doSefsoT4+i6gqKzmeVda4gDa8SOTUFRiIi56OMvfDL67DqPcjPgJhE6PJPMCyedoVFxTJ+/lYmLNxWrH3rPzz3jPvc07Mx9/Vucq5liZzX/rxxJDkrVnjmKHri8VIdena2bNWqETZwAGEDB+AuKCDn12XYjgUbeRs2suvqq/GLjye4R3eCevTAt2nTCq+5ssrfsZNDkyeR+eVcDB8f/JNaE9iuLbaIiIouTcpBZZ0rSMOrRE5NgZGIyPnCNE+sPpb2O/wyCZpfBe1uhzptiz9ptRS6r3eTYgU89R+ey64XLi+HikrmZedA7q3oIv4m/dM5ABx49jmCe/UkIDlZyz9f4EyHg4y5cwm57DIsPj6ED7+BiJtvqhRB0alYfHwI6tK58Htb9Sii7r2HrEWLSZ3wCqkTXsFWM4a6//sfvo0bV2Cllc+Bf/+bI+9Px/D1JWLECKqNvBFbZOSZDxSRC97ra15n0tpJxdo37p24M+5ze8LtCgmLQc/QREQqyuLnvVctO1uOXFj3kWfYWf3OcOn/Qf0ucN8GCIk59/NLlfWyc3C5BkZf3Pc0jb6eUax9j7z/Pkfef7/IfbZfeg1Xjn+qNEqTMpL66mtn3WPg70PPDJud0CsuJ6R371KprbyGvtijo4kcNYrIUaNwpqaS/d13ZH//A/Y6dQA4/Oab5K79jaAePQjqXrIV3c4H+Tt24FO3LobNhk/dekTcOIJqI0cWDvmT0ldZh32JnIs7Eu8oVsAT904c64avK4eKLgwKjEREKsp3L5xbYJS5D5a/CSvehtw0qN4caiZ52gxDYZGUuyvHPwVFBDym282RGTNIeWYsTVetJPvHHynY9QeRt94CwJ+33orF15fgXr0I6t6dZqGh5VW6nKVDEyeWODAyXS4yPv3Ua46i40PPSlNFDH2xRUURNngwYYMHe23P/e03subPL+zpefitt6h2003lXl95ytu6lUOTJpH1zTxqvvA8of36EXHdsIou64JQWYd9ydnR/EpSkRQYiYhUVYufg9XToell0O42aND1vB529nOdW+hQ0UXIWUn/+GMC2rTBp25dIq69lpRnxmIJCCDkkksK9zFNE586dcn69luy5i8Am43Atm0Iv+46gi++uNxqPZceM1I00zQ9Q8wsFo58OANreHilmaOoNKS++hqHJk4seifTBODgS+M4+NK4IneNvPPOKvlYzNuylUOvv07WvHlYAgKodsstBHbtWtFliVRZml/p/FEVe/8pMBKR81tpDfuqaM4C2DjHMy/R5eOgVmvo9hB0eQAiGpTutbo9XLrnKyVDt/VgV0UXISWW9s47pDz/AmHXDCFmzJjT7mcYBjWeeJzoxx4lb906shYsIGv+Ahy7dwPgSk/nyKyPCO7VC9+GpfyY/4uz6TEjRTs+9CztvfepO+1tbOHh1HljCtbw8DINisr7Xfmo0XcV67GzKbYZsRvWY1ituI8e5fe+l+JMTQXAt2lTgrp0JuTKK/Fr2rSsS/ZSGmGpaZrse+CfOPbtp9qo24gYPhxbeHgpVVj5VMUXfyJScari8wsFRiJyfjvXYV8VLfugZ8jZircgOwWqNYK8TE9bWN0yueR45yDuK5Mzn7+GbZoHVL5Jryva4alvc/DFFwnu3Zsajz5arGMMiwX/hAT8ExKo/s9/YrpcAOSsWk3qf/9L6n//i89FFxHcsyfBvXvh17LledE75Xz09zmK/OLiPMvPh4eXy4pYlfldecNqBcASGEij778jf8sWsn/4gaM//Mjhd97FXq8efk2b4kg5SNbCBQR16YLPsTmRysrZhqV5mzZx+O23qfHkU1iDAqn50kvYa9TAGhZWarV91NngyVI7W+mpii/+RM5Ek0uXnao4vFCBkYhIZeVywqROcPQgNOoF7SbCRT3BYinTy05YuE1Lv5fQdVvmV3QJlc7hN9/k4Lj/ENy3L7VeehHDbj+r8xx/YR18cQ8aLV5E1sJFZC1YwOG33uLwlClcNO8bfOrVw5mWhjU4+KyvI6XLlX2UnQMG4Ni9G7+4OGo8+QSBXbsq3DsFwzDwi43FLzaWyFtuwZV9tHB08dGfl5LyzFhSAHu9ugR17kJgl84EduiAxde3QuvO3bCBQ69PInvhQizBweT/4x8EJCfjFxtb6tf6qIu1UgZGlfXFX2WtS6oGTS5ddirzGxmno8BIRKSycDlh85ew9RvoPwmsNrj8PxAVC1EKcKTqMAsKyJq/gJDLLqPmi/+HYSudpxv2mBgirhtGxHXDcB45Qs6y5fjUqwfAgbFjObr0Z4K7dye4dy8CO3XC4u9fKteV4jEdDnJWrSawXVusQYGEXHopAa2TFBSVkDUosPDr0H79CEhMJPuHH8n+8QfSP/6YI9On0/iH77FERZG3cSPYbPg2blxu97E7L4+9991P9uLFWEJCiLzrLiJuuB5rSEi5XL8yqawv/iprXSJS9SgwEhGpaDlpsOpdz4pnGbs9Q80y90JobWh+VUVXJ5XQ+PlbmbBwW7H2rf/w3DPuc0/PxqXWq8x0ODB8fKjz1ltY/HxLLSz6O1t4OCF9TkyaHda/PxYfH7IWLybjs88w/PwIH/IPoh+pwkNS/6IyT8btNfRs/35Pr686dah+vwa3nivDMPCpX5+I+vWJuP463Pn55G3YiC0qCoDUCa+Q/d132KKjCezciaAuXQjs0AFrGaww6Ni/H3tMDBY/PwxfXyLvHk3E9ddjDQ4u9WuJlBYNrzp/6GdZMRQYiYhUpL0r4e3LwZkL9btA3xeg6aVgsVZ0ZVKJ3de7SbECnvoPz2XXC+Uzt5Jpmhx69TVyVq2izv8me/WSKA9B3boR1K2bp5fL8uVkLViIrXq0p7aCAvbcex+BnToS3LMn9ho1yrW20lAZJ+M2CwoA+L3vpZ45ilq2JPqJx7HXrl3BlZ2/LL6+BCS1Kvy+xtNjOPrjj2T/8CNZ8xeQ8fEn+CckUH/mDADyd+zAp169wqGdZyN37VpSJ04k5+dfuOjbedhjYqj98vhzvi1yYSrv4XIaXnX+0M+yYigwEhEpTaYJ+ZmeVc2CPO8As/krT4+h3HTIPeL5aNDF01YjHpJvhMRhUKNlhZUtp1bcnjxfU/49eSoT0zRJnTCBw5P/R+iggWXWq6g4DLudwI4dCezYsXCb48ABCnbuJHvRIlLGPotfXBzBvXoR2r8f9ujoCqu1qjAdDvJ37iR/yxbyNm/Gt+FFhA0aiOl0AmANDyf6iccJ6tZNQ8/Kmb1GDcIGDyZs8GBMp5Pc39ZhFuQD4M7NZWf/AVj8/Qns1InALl0I7NQRe/XqxTp3zurVHJr4Okd//BFrWBiRd92FJfjCG3YmpUvD5USqFgVGIiKnYpoUzjqausUzVOyvgY/dHzqO9rTPuRN2/3qizXSd+fxrP/B8Hhvp+fzL66fft9vDVXultyqsuD15Ns15oNx68lQ2pmmS+t/xHH7jDcKuvpoaT4/BOMPE7O837c1z5VQfgE/dulz09Vfk79hB1vwFZC1YQOr48QS0TsIeHU3BH3/gysjAr6VCW1dGBs7Dh8mc+xWHJk487X77H3us8Ou89evZM+r2Is8beeedla6H1PnGsNm8eh9hsRDz739z9IcfyP7pJzK/+gqAGmPGEH7NEEyHA0wTw8fnpHM5Ug7yx3WeeYmi/nk/4UOvLfdegyIif6UhaRVDgZGInP/yszzL0x8PdHKPQEE2JI/0tP8yGbYv8G63B8D9Gzzt85/0TET9V9VbnAiMAqt5egf5hx/7iIDw+tDsCk/7kT88AZNfGNj+8sR8TCiMySjLWy7nSD2Mzuzw5MmesOiaIczocA0THv36zAc168P0Cri/fBs2xPe2W4m87VYc+/djO9bTIu396Rx57z1sx3ob7X/6aXxq1SLippswDAP30aMY/v5nDMKqoqNLl3J0+XLyN20mb8sWnPv349u0KQ0/m0PU6LtIeeklAPxiY/Ft2hTfBg28VqLbFNuMZps3VVT5UgSLry+hV1xO6BWXY7rd5G/ZQvYPPxLQJhmA7O++Y9+DDxHQvj1BXToDJ+bKskdXp87rEwlITsYSWHZBkV4AyoVMj/+SKc6QNNM0iX83XkPSSpECIxE5P2UdgOBj85QsehZ+nfy3HQxIGuFZov5oKuQc8oQ94fU8n4P+Mkylx2PQ+f6/BEJhYP3L0t29nym6lvB6pXCDzl+VeQLnU/Uwysxz4Gez4mOz8NW6/by2aDsAoy9uRPOYEFrUDKVOhP8FMzQnuFcv3Hn5RN17Dywo3s+xIqS++lqRPWYAnCkpAKR/6Jn/5eC4/5x234COHak39S3PcYcPYwkOxnKKnhqVgTsnh/ytW8nbvJm8zZtx7N1HnSn/wzAM0j/5lMyvv8anQX0CWrfGL7Ypfs2bFx4b/a9/VWDl56ePOhvlvkS8YbHg16wZfs2aFW6z16pFyFVXcvSHH8letAiAIzNnEn7dMGzh4QR161bmdWlOErmQ6fFfMgrYKoYCIxGpmhY/D9+9ULx9TwqLAEx4JvzEt0UN+4qJL3F5UnyVcQLn43IKnKz+M531ezNYtzeDDfsy2XnoKDNvbU+7htUI9rEQGewLwOtLfsflNgFY+vDF1AzzZ+nvh9iXnkfzmBAaRwdht54fPVRM0yR70SKCLr4Y38aNqX7fvcdbKrKsIkWNvqtYQ6KO95hx5+Vh8fMDIHPet+StX4dj7z4c+zwf7szMwmN2334HeevWYYuMxF6zJvZaNfFvlUTE9dcBULB7N9bwcKxBQWVz444xTRPngQPkbdpMYKeOWHx9OfS/KaS+/LJnmC1gCQ7Gt2kTzJwcjMBAoh95mJjnnsXi61umtZWmqv6i4aMu1nINjIoTlh7nOnSIbR06FrmPhheKlI7K+resMtblcDm4uO7FxATGEGAPoE/9PjjcDtpPb0+BuwAfiw9NwpvQrFozPtr6EeuGr2PNwTXc/O3NdK3dlT71+9ClVhcC7AHnVMeFSIGRiFRNPR7xDnjcbs+8QAufgewUiL8Gej4J45tr2NcxlbknT2WQdrSgMBhq1yCC5PoRbH9xPBHvT6Ur0PWvO8+BTUAkcPxR+OUn/yxszpgDGUD4sQ+A7cC3ba4gZeANPNe/JYZh4HKbWC1VqyeS6XZzYOxY0j+cQcZT/8eami3YsC+TDfsyGJBYi10vXE5GjoOL/7OE5jVDaF7T0+uqRc0Q6lcLxGoxaDLuXrY+8HJF35QiHQ+LAEL6XEJIn0u82k23u/DraiNvJH/77zj2e8Kk3A0bME2zMDD649phOFNTsYSEeAKlmjUJ6t6N8H/8A4C8jRuxVa+OtVq1EvdMy9+2jfTZs8k7NqTMneH5e1d/9mz8W7bAv1UikXfdeWxIWSz2WjW9rmGrVq1kd0wloHflS6akYamIlI/K+resoutyup3YLJ6YYsKqCfy09ye2p2/H4XYA0C6mHX3q98FusfOf7v+hZlBNGoQ2wG7x9P7/aOtHAIT7hTOw8UC+3fUt8/+Yj7/Nn261u/FQ24eI9I8s1ZorY8hWWhQYicj54cMhsO1bqN0GrvkAaidXdEWVTmXuyVPeCpxufGwWjuY7uW/mGjbsy2Rvem5h+7/6NCW5fgTz2lzJxOwTw3OaHd7FoO1L6LB/Ay6LhQV1kvlfXD/mfPkoALuDong9YSBrohqf8rp1wv2plZpd+IJ9+NRl7E3P9QQrMSG0OBauRAVXnt4epmmyNz2XDfsysZomLWZNJn3WLD5tejFT1lhg7WZqhfnTvGYI9SM9c52EBthZ8Xiv04YfvlELy/MmlIm/zmcU0rdvkftGP/Yojj17PL2T9u7zfL17N+BZmn7noMGeyYd9fbHHxGCvGUPogAGEXnklptNJzqpVABx+6y3yNm8hf/Nmqj/wT4K6dcN56BBHZn2Eb5PGhPTpg29sU0841OgiAALbtiWwbdsyuhdEzk+V9cVfZa1L5GxlFWSxOW0zmw5vYlPaJjanbcbhdvDlgC8BOJhzkFDfUK5rfh3NI5rTrFoz6gTXKTy+e53upz13vZB6PNruUR5q8xCrDq7im53f8OuBXwnx8az2uOCPBVgNK51qdcLHem5Dyis6ZCtLCoxEpOrK2ANBNcBqg4RrIO5qaDnYMy9RBSpuT55dfhdmT57ydiAjj3V7M1h/7GPd3gw6N47kv/9IJMDHysGsfFrXC2d4x3q0rBVKi5qhhPp73qX6V59Y/tUnFoCshQvZc+drWEJDCR91KxHDhhEfFcX9wKYvH6XOG1Owj32W53/6HyGXX071hx484/LVPWKrs2znYX7bk87c3/YD0KVxJO/d1A6AN3/YQUyoPy1qhlA3IgBLGfdGMk2zMOSZ/N3vfL81lY37M0nPcWCYbp7e9jm1Nv5Itdtuo3m3wUwP8aN5TAjhgSc/0bpQ5nAqjjMFSrUnvuY13M2xbx/u7GwAHAdS+POG4QAcfGkctuhofGObYhwbQhbQti1NVyzHsFrL9kaIXEAq64u/ylqXSHGk5aWx6fAmthzZwvDmw7FarPx35X+ZvXU2ANX9q9OsWjOaVWuG23RjMSw81/nc11S1Wqy0qdGGNjXaeD3PmbZhGmtT1xJsD6ZH3R70qd+HDjEdsP91nlJRYCQiVVDBUfhpgufjkmeh7S3QclBFV1WouD15GMN535OnOEp7qNzlcTF0axrFP5I970Bd/9avbDuYjcWAi6KC6NQokq6NowBPqDHnzk6nPI87N5eMOXOwBAQQ2q8fgV26UGPMU4RedRWWgJPHwAd16ULDzz/j8BtvcnjKFHLXreOir78q8oX8TZ0bcFPnBgBk5DrYuC+zcIhavtPFi/O2UOD0DH0K8rXRLCaYa9vVZUCr2pimicNl4mM7u4A0z+Fiy4GswuFkG/ZlkpXnYOE/uwOwaX8m2flOLm1Zg+Y1Q2mZsRu/L38m8o7biRw9mv4KhErFof9NOeX8MgfWrePA0ydPqO9MScGZksLR774/5fk0v0zFUe8PERHPm0/geY61/MBy3t34LpsObyIlJ6Vwn151e1E3pC5XN7mannV7EhsRW+rDxE7lr29mvd33bX7d/yvf7PyGRX8u4vPfP+fyhpfzQhfPHKkutwurRW/GKDASkarDNGHdRzD/Kcja5wmJmhT9zr1UfmczVO6v7xDNWr6bL37bx/q9GRzJcTB33X6W7Urj6ta1MQyDJ69sToCPlWYxIQT4nPnfnvPwYY5M/4AjH3yAKz2d4EsuIbRfPyw+PoRfc02Rx1r8/IgafRehV15BwZ69GFYrptNJ3pYt+LdoUeSxof52Olx0Yj4ZX5uV3566hG0p2WzYl8HG/Zls2JdJToGr1EM2H6tBq7rhJDWpXjiv0oRrWv1tr3rkffoJfk3U2600aX6Z84d6f8iFTIHphck0TfZk7WFTmmdI2fGhZeO6jaNNjTbkOHL4M/NPkmsk0yyiGc0imtE0oimhvqEANK/W/AxXKDt2i53OtTrTuVZnClwF/Lzv58K6dmftZtjcYfSs15O+9fuSHJ18wYZHCoxEpOr47C5Y8z7EJMLgqVCvQ0VXdE5eDwtFT4WKZ3+GZ36hf3+1iXV7MtiSksXShy/Gz27lz7Qc0o4WcEnzGrSsHUrLmiE0iwkpDJS6HOtNVBxp777LwXH/wSwoIOjii6k28kb8W7cucb0+9evjU78+AOmzP+bA008TdvXVVL//PqxhYcU+j5/dSlztUOJqh3ptHz9/a4lrKsrt3S/ivt5NT9puOp3sf/wJgnv1JLhXL4VFUinohamISOkwTZPDeYfJdeaS58zzfLjyqB5QnXoh9chz5vH575+faHd59ulSqwsA6w+t59qvrgXAZti4KOwiutbuSrBPMADd6nSjW51uFXb7isvH6uNVp8vton3N9szdMZfZW2cT4RdB73q9uTX+VqoHFD3dwPlGgZGIVG6Z+8AnCPxCIHGoJyRKuLbC5ykqDZPCFRidTkauA1+bBT+7lfd++YMn5qwHYNrSXTSrEcylLWuQU+DCz27lgT5NeaDPyWFHcZimSe7q1fjUqYMtKgqfBg0I7dePiBtH4NuwYanclpArrqBg1y7S3nuPrPnzqf7AA4QO6O81aXJJ/b1XlmmaHMzKZ8O+DOJrhxEZ5Msnq/Zw/6y1XB4Xc2ylspJNqG06HOx98EGyvv4G38aNzrpWOb991Nko1yXiQT15RCqjqvR7aZom+4/up2ZQTQDGLR8HQLeZ3bBb7NgsNgLsAXxy1ScATFo7iV/2/VLYZrPYCPMN49nOzwIwY/MMth3ZVthmt9iJ8IvghhY3AJ7JlVNzUwvbbBYb4b7hdKrlGRK/LnUdea48r/MH2YOoHVy7sOaNhzd6hTphfmG0jva8ofXexvdIz0/3CnziIuO4JtbTK3r418PJcmSdaHfm0a9RPx5q+xBOt5Mes3qcdB+NbDmS+1rfR74rn7G/jC3cbrPY8LP6USOwBgCNwxvzVIenaFatGY3DGp/z5NGVRf3Q+rzY9UVynbn8uPdHvtn5DXN3zOWuRE+P4FUpqzAMg4SoBCyG5bx+I0OBkYhUTo5cWPoa/PhfaHMzXDIW6nf2fMh5pSTDqwqcbtbuyWDtngym//rnKfcpziThpstF1oKFpE2dSu7atUTecTtRd99NUJcuBHXpUuLbUBRrUCDRDz9E6ID+HHj6GfY/9hg5q1ZS87lzn8jxOMMwiA7xIzrkxFLwA5Nqc/+stUwcllTi85kOB3v/+QBZ335L9QcfpNrIG0utVjm/fNTFWu6BkciF6nx+UVpWSnKfpeWleX1/qvuwun91qvlXI8eZU7ht/aH1/LD3BxxuB063E4fbQa2gWoWB0fRN01mRssLrPM0imhUGRs/++iwbD2/0ak+qnsQ7l75T+P2QL4d4tXet3bUwMJq2fhqpuan42fzwt/njZ/UrXAkMPMvLh/uF42fzw8/q2Scp2vPcwGax8Xi7x08ca/Nj3q55TF0/lanrp550+51uJ9nubMat8IRsbaa3OdVd6aUqP878bf70rteb3vV6U+AqKAzEJq2dxC/7fyE6IJpL6l9C3/p9uT3h9jMu+FEZAtOSUmAkIpWLacLGOfDtk5DxJzS7EpJHVnRVZeLqH1wwvKKrqBgut8nRAichfnb+0aYOk7/7nXynG6vFILFOGJ0aRdI/sSYNo4IKj3ms390899kr53ztIzNmcPitqTh278Zepw7RTzxO2IAB53zeM/Fr2pR6779HxpzP8KnrmZDbffQopukJlSoL0+lkz333kb1gIdUffohqI0ZUdEnlKvLOOyu6BBEROUumaXLg6AHWpK6hVfW/z8V37gY1GXRS+HG8p9Hf6zjutZ6vke/KLwyTnG4nFuNEL+MxHcaQVZDl1R7iG+J1vld6vOIV6oT5hhW2fT3oa+wW+2nDipd7vHza22MYBkNiTw6jirM6WWUNP25PuL1MzvvX3lPju49nyZ4lzNs5jxmbZ/DexvfoVbcX43uML5NrVyQFRiJSuSx8Gn4cD9Etof+X0OAce3t0e7h06ioDV/9onnmn84RpmvxxOIcftx/ip+2H+HnHYXo1i2bc1QnUDPXjps4NaF0vnLYNIgj2O/VyptdtmX/W13dlZWEN9oynP/rrr1gjwqn+wAME9+pZrsuRGxYLYQNPhFOpr7xK5jffEP3IwwT36VM5lqK3WvGpVYvoRx8l4obrK7qacqcVxuRCVRHDCyurytqTpyoN+ypPGfkZzNk+h7Wpa1l7cC0Hcw8CniDmjsQ7+EfTf7AudR3xUfFU8692ynOU9n321//ngfZAAu0nvzFUksfZ3YvvPuM+VbknT2kqj/sgyCeIKxpewRUNryCzIJPFfy4u7NWVWZDJDV/dQI+6PehTvw9Nw5tWjud3Z0mBkUhVs/h56PFIRVdRurIPgtsJITU98xOF1YOkG6A0ViM43+6rc1DaK2udaehXToGzcFWyoW/8wi87PF29Y0L96N0smj4tPOPfDcPgwb6xxaqrpPJ37CDt7WlkfP45DT6ejW+jRtT8978x/PxK9Z/32b7QCrm0L0eXLWPvvfcR2KkTNZ54vHCy7PLmzs/HmZqKT+3aRD9ydr83lfVFlkh5qOqPfw0vPEHBTOV14OgBTzCUupbm1ZpzRcMrcJkuxq0YR62gWiTXSCYhKoGE6gk0Cfc8R4n0j6RH3ZPn6aloepydH0J8QujXqF/h90fyjhAdGM3b69/mzXVvUj+kPpfUv4QhTYcUcZbKS4GRSFXz3QuVMwQ5myDLmQ+/TILvx0HjXnD1NIhq4vmQUnc2y9eXxNF8J8t2pvHT9kP8uP0QqVn5LH+sFxaLwZUJNbk8LoZOjSJpEBnoFdYUN8j6mmIGWRc34rbwTA5PfZvsxYsxfH0J7d8fS0AAABZ//xLftjM52xda/omJNPhoFkc+nEHqhAnsuPIqYv79HKFXXlnqNRbFnZfHnrtGk79tGxd9NRdL4NkNkdOTX7mQ6fEvUrpM08QwDEzT5NEfH2X5geWk5KQA4Gv15bpm1wEQ4RfBd0O+I8Iv4qRzVPUgV6qGoh5nuzJ3MeW3KUz5bQpQ9R5nCoxEpHSUJMgyTdg8F759HI7shCaXQo/Hy7Y+KXUOlxuLYWC1GEz7aSfPzt2E023iY7OQXC+cKxNqUuBy42exMqxdvdOep7hB1qY5DxQryHJlZrKt21Asvr5E3nkn4dcOxVbt1F3QKwPDZiPi+usI7nMJqf/5D34tWwLgLijA4lP2q424c3PZc+ddHP35Z2KeHXvWYdH54vU1r1eaJ2ly9hwuR+Fnm8VWpYcDXOj+yPyj8Ov0vHRcposAewB+1tLtKSoV72DOwcJhZWtT1+Jr8+XNS97EMAzyXfkkVU8ioXoCCVEJNA1vit16Ygj7qcIiUJB7Nqp6yFYR/8fP9Dg7kneEcL/wKvk4U2AkIuXv18nwzcMQFQvXfQKNelZ0RVIMpmmyNSW7cB6iX3cc5p2RbUmuH0Fc7VBu7tKQzo0iSa4fjp+9+MMJz7WHkZ8zn0v+WE6Lwzt4vs313NOrCbe9MQW/Fi3KpDdRWbFXr07N//u/wu/33n8/hsVK9KOPYK9Ro0yu6c7NZfftd5Dz66/E/PvfhA3oXybXqUomrZ1UKQMjzS9TNKfbic3ieVp73+L7WLJ7CQBJ73tWAmpXox1v9nkTgGFfDWNf9j7P8tWGZwnr9jHteaz9YwDcvehush3ZJ5a4Nmy0qdGG65p7ejM8/+vzuEyX1/HxUfFcXPdiTNPk3Y3vei2fbbPYaBTWiObVmuN0O8v3jqnkSvuFaavqrfCx+hBgC8Df5o+/zZ+YwBhuS7gNgMV/LiY9Px1/u3/hPmG+YTQObwxAdkE2dqsdH4tPhYZRpmkWToBstVjxtfricrs4kHMAp9vp9REVEEX1gOrkOnNZmbKyMCz9bvd32C12GoY1pEZgDfJd+fyZ+Sd2ix271Y7d4rmdgfZAr+ClvDjcDnak76BpRFMAnvjpCeZsnwOA3WKnRbUWxEfGF+7/3+7/LfcaL1RVPWSrjP/Hw/3CK7qEs6bASETKx9FDkJPmGW4W9w+w2KD1jWAt2z9D4+dvLVbvFTk1p8uNzWph+8FsrpnyC4ey8wFoEBnIgKRahPp7nmS2rhdB63qnfnfvTM62h5EzNZW096dzZMYM3BkZ+Ldqxc2PdsEaGnpWdVQmptuNf8s4Dk2aRPaPPxJ1111EXH8dht1zfxc3ZBu2aR71i5j3/ab1XzBg+6+sv+FemiksqtTKe36Zyv4O81HHUVYfXM2KAytYnrKcI3lH+GrgVwA0CW9CnZA6vL3+be5KvAun6SQmMKbw2I41O5Kak+p5wW16XnTXCDwRyloNKy63i3xnvmfFItNJvdwTvSS/2/MdOY6cwuMdLgeDmgzi4roXF86l8nc3triR5tWaFy7Ffeu3tzKi5Qg6xHS4oHvJ/P2FqWma/HrgV9747Q2WHVhGmG8Yw1sMZ8KqCawbvo5l+5fxe8bv5DpzyXHkkOvMxW6xc2/rewGYsGoCyw94Hg+5zlxynbnUCKhRGBhN2zCNVQdXedXQvFpzZl4xE4CR80ayKW0TVsNaGDi1qdGG/+vqCfOf/OlJMgsy8bd5AieAj7d+zKAmgwAYs3QMmQWZXoFO+5rtGdnSs9rr0C+HkufK81oN66qLruLupLvJd+XT6cNOON1OXKarsL5b4m7h7qS7ySjIoO/HfU+6D+9Juoeb427mUO4hbl9wYnWouxZ5JvB/tN2jDI0dyq6MXQz+YvBJxz/b6Vn6NerHmoNrGDlvZGGg5GPxwW6x80SHJ+hcqzNrDq7hpRUvFQZNx0On2xNup2lEU55e+jSzt80u1s/9TH8zHG4HHWp2qHQv+ktbZf87KwIKjESkrDkLYPkbsOT/ILIx3LwAAqtB21vK5fITFm4r98CouE8AZlG5ngBk5ztJzykA4PE56/hp+2EuaRHNI5c2o06EP10bR9K+YTU6NqpG7fCAMq+nKEeXLWP3TTdjOp0E9+pFxI03EpBU+svnVhTDYiFy1G2EXHE5KWOf5eCLL5Lx6afUenk8vhddVOzzXLdlPtOb9Tlt+/TYS1gT1ZjObbqXQtXFD7KCm5XOxOpSdirbO8zZBdkE2AOwGBZunnczvx749ZS1/N1ra14r/PqppU+d8ty3J9zOTXE3FX5/pmWRvxn0zWnbrIaVpUOXntQLJNDHM9TT3+rp9bgtfRu3zb+N2IhYhrcYTp/6fbBbyr+XR0U70//L9Px0JqyaABT9//Kt9W8Bnp/l+5e9f9r9Xrn4FY46jhaGTbnOXK+lsq9rfh0pR1MK23KdudQJrlPYfiTvCHuy9xS2Aaw6uKowMNp6ZCtHHUcLe5bZLLbCHj8ANQJrYGIWttktdi4K8/xNtxk2rm12LTbDu3dafJSnl02QPYhnOj5zUu+1hqENAYgOiOa9S9/DbrVzzZfXMOPyGRS4C6gVVAuAmKAY/tPtPzjcDgpcBTjcDhxuB3GRnvs10j+SG5rfQIG7AIfLUdh+vGeE1bASaAvE4XaQ48yhIN9zjjxXHgCda3Vm/p/zcbgcFLgLCnvTzbh8Bi0iW/DR1o945udnAIiPjCc+Kp6E6gl0rdWVAHvZPaeozKFMZfs7K2evMj/OzpVhmpV/Wefk5GRzxYoVFV2GSOUwJhTGZFR0FSf7e12mCdu+hXmPwuHtcFFP6PNvqF42q2GdztlO4FzWTIeDzXHxNNu8qdTOmedwkZnrIDPPQUaug8xcJ1aLQdcmUQC8+cMOtqVkk5l3Yp8m1YP575BEALq+uJg/0zzvfgf4WGnfsBr9W9XiqoSapVbj2TJNk83NmlN78iSCu3fHnZdH6ssTCB96DT71Tj8/UnkpyydzpmmSvWgRh16fRJ0338AWHl44EeiZbIptdtJjzJWdTeorr1D9nnsqbL6iyvzkt7LWdqHVlVWQxeqDq1l+YDkrDqxgY9pGZl0xi6YRTfll/y8s27+MNjXakBCVcNoXm5X5Plt53Urm7pjLtA3T+DPzT74a+BUxQTFnPriM6yrv+8vldjH/z/nsydrDzXE3A7Dwz4V0rtUZX6tvhdZWHKrr9I4Pq7NarFgMCzmOHI7kH6Hvx30rvLZTqQz32elU1tpUV8lV1toMw1hpmmbyqdrUw0hEysaGT2H2jVCtEVw7CxpfAhdwt/u/O/DvfwPgPHIEW7jn3TuHy01WntMr9MlzuOndPBqAT1btYdWfR8jI9eyTkesg0NfK9JvbA3DzOyv4cfshr+s0rh7E/Pu7AbBkSyrbDmYR4mcnxN9O9WA/aoWfmOPn3l6NcbjcPPTxOtY8eQk+NkuZ3w/F4di3j/1jxgBwaJInMLL4+RH98ENlfu3K0GPGMAyCe/Yk6OKLPavFuFzsvuUWgi/pQ9g/rsawFP/n5MrKYvfNt5C7YQPBPXoQ2KFDiWqRC0d5v1uaWZCJ2+0mzC+MlSkrGTlvJG7Tjd1iJz4qnlvibiHEJwSA9jHtaR/Tvng3pJLysfowoPEA+jXqx5a0LYVh0QPfPUCtoFoMazaM6gHVK7jKsuNwO/hqx1e8ue5NdmXuonF4Y4a3GI7dYqdn3Yqf17Cy9haorHWdimEYXnMjBdgDyrQnkYiUDQVGIlJ6ctIgbSfUbg2xV8AVL0PiMLCV/UpPlckX9z1No69nFGvfbR06nnK7HYg8fr5Lr+HK8U/xy47DLNh0kBA/G6H+ntCnRohf4THXta9H35Y1CttC/GxEBJ6471vXC+fH7YdIycwv3LZo80FeXbT9pOs3efzrM9ZeWsOFUl99jUMTJxZr37y1v7EptlmR+0TeeSdRo+8657qg+PMrxb3zcJn3ZDveo8iVmYnpdHFgzBjSP/mEGk89iX+LFmc83pWZyZ833Uzepk3UGv9fhUVSpLIeKpGRn8GKlBWsOLCCFSkr2JK2hTsT7+S2hNtoGt6U2+JvIzk6mfioePxsfmc+YRVlMSw0q+b5m3Z86NK0DdN4d+O7XNHwCka0GFE4ZOlsVbaQYfmB5Tzx0xPszd5LNT/PCpbbjmwj6b2kCq/tuMo6VKiy1iUi5y8FRiJVgcsJvy+ELZ4JPfl9MVzUA7IPwtJXwGL3TCJttYPFCo37QI2WnvbNX57cXrsthNbyBDwH1nm3WewQXh/8QqDgqGefv7fb/T1f/7U+gFeTwCcI7l7jCYmSbyzve6pS2H7ZUEb7evfqbHNgE/9cNYNU/zBGd78XDIOv5zzA1rDaNEnfw9KYlryWMJAjfiEnne+eno0AeHFwQpHX7duybFbSKmtRo+86ZcCT/cOP7L7lFgI7dqTGM8/we69epTqErzgq2wstAFt4OHXfmUbmF1+Q8n8vsuvqfxB+7bVUv/8+LAGnfvfWlZ7uCYu2bqX2KxMIvvjic6pBpKTS89JJzU2lcXhjHG4HvWf3JteZi6/Vl4SoBG5PuJ1udTy9IYN8gor8PamMv5dQunW5TTdf/P4Fc7bP4aVuL9G3/smTHRdXZQgZchw5ZBZkUiOwBjUCaxAdEM0jbR+ha+2uxRpeW94BSGV9jMn5RY8zqQoUGIlUFoufh+9eKN6+7/Uvun3hM9DtYbjoYvjyvpPbr37HExjtWw3vDzy5fdjH0LgXbF8As244uX3kPKjbHtZ8CJ+PPjHUrEYc9Hm+zFc+q+z+2itlf2omR1+bgOOXD+CiRrzZ7gZevrIVl8XF8PucB7jqx69Je+cdOr3yKv+4sjrBPcuuK35xe8tU5LxPptNJ3saN+MfHE9i5E3XefJPATh0rbBWhyvBC61QMwyD0qqsI6t6d1JcncPSXnzFs/zrt/q6MDFwZGdR+9RWCu3cvtzrlwpWWl8bKlJWeOYhSVrDtyDZaVGvBjCtmYLfYebz949QKqkVcZJzXpMPFUVl/L0vb9c2vJ8geRMeanp6oP+39iSxHFr3q9sJmqRr/ZzMLMvlw04e8v+l94qPimdhzInWC6/DOpe9UdGlFulAeY1Kx9DiTqqBq/LcRuRD0eMTzkXsEUjZC/U6eiaNfbw8RF0HitZ55gJ6NOvWk16YJphtcDk/vH6vds0LZ/ZvB7QC309MTyO30hEUAtZJgxFcnt8d4VuQgJhGaXApb/zY8aeppVl3a+T1M7lT07ez2sOd2nufW7k5nxjer6PTmc1yUsY/w666j+r8e4E1fX6/9DJuNajfdRMiVV2Kv7pmvImPuXPzj4/GpU+dUpz5v5W3axP7HHif/99+56NtvsUdXJ6jzGR5PFzhrSAg1nnwCd34+ho8PruyjHHjqKSLvvAPfhp6Vc0zTxKdePS76ai6GT9kOD9W7pReuw7mHWX9ofWEvoWd+foaFfy7E3+ZPYlQifVv1pW2NtoX7X3XRVRVVapXhb/MvXA4e4KOtH7Hwz4XUCqrF8BbD6d+oP/42/yLOUHHS8tJ4f+P7fLj5Q7Id2XSt3ZVb4spndVSpGPr7L3J+UmAkUhm4nLBjMayZDpvneoZ8PbANbL4w6kdP+HMmhgGG1XuomM0HQopYdcU/3BNMnU54PcZHPcOE364/4+V3+V1L/bwPzrjfPc7GnKLP03lj4aYUXl/yOyv/OEKo3aBXzRj8HvsXNa4qejjB8bDInZNDynP/xp2bS/V77yH8uuswrNYij63q3Pn5HHp9EofffBNreDg1X3wRe/T5O9lrWbAcCyLzt24l+4cfyPz2W6oN9/QOTP3Pf6j+wANlHhZB5X63tLK+mKmsdZ3J4dzD/Lrfs7R9vzn92JGxA4BFVy8iKiCKW+JuYUSLEbSo1sJr4tvzWVk//v/T7T8s3r2Ytze8zb9//Tevr3mdu5Pu5uomV59NuWVq5paZvLnuTXrV68UtcbcUztMk56/K/PdfSqay/l+qrHWd7xQYiVS0TV/AV/+CrP3gHwHJI49NFH2sJ0oFP9Eu7jAmxlApl68vD1l5DgJ9bFgsBis37ubib9+l362jGNCjBcF+l5XoXJaAABp88jEHnhpDyvMvkPHVV9R89ll8Gzcuo+orljsvj52DB1Ow/XdCBwwg+qEHsYaFVXRZVVZAUisu+vorDr40jsNvvgVAYOfOFVxV5VBZX8xU1rpK8sT8eFgEcPFHp54fS0/Mz53VYqVXvV70rNuT1QdXM23DNHwsniD4qOMoh3IPUS+kXoXUtidrD1PXT6Vzrc5cXPdihjUbRp96fWgY1rBC6hGRs1dZ/y9V1rrOdwqMRMpb7hFY/wnUaeuZ8yc4Bmq2gsSXPJNVX2Arip2t4i53DmW33Pkfh4/y9k+7+GjFbiYOS6Jd3n4GvP4wBfv38+8P6vHkd3uLPP7romoLu4JuybW5/bc5HB04mNjFC7FFRp563yrIdDgw7HYsfn6EXnElfi1bavhZCZRkZbk/R5x58vnSXFnuTDLyPUNqd2fupk7IhTXssioZ1mwY/jZ/VqWsYnXq6sKf2zMdn2FA4wGk56Wz7+g+hnw5RE/My5lhGCRFJ5EUfWJVsY+3fsy4FeO4uO7FjGgxgsTqieVSy46MHby17i3m7piLxbBQJ9jzOx3iE0KIz8mLOIiISNWiwEjkVBY/X7rz7LhdniFnq48NOXPlQ7eHPIFR7WQY+mHpXesCUVETOJumybKdabz1407mb0rBahhcGVeDmLmz2DX1f9irV6fB9PeZ3qrVGc+1ac4DZ6jtCpxpd3B06c+FYZFj717stWqV0q2pGNk//MiBp5+m5ov/R0BSEpGjbjvzQeLldCvL/d2m2GblvrJcUdYfWs8/l/wTgEW7FzG8xXAOHD3A4z8+ToPQBjQMa+j5HNqQKP+oCpvsvDxVhi722QXZrE1dy6qDq2gU1ohLG1yK23Tz35X/pX5IfS6uc7EnoKieVBgIhPmFEeYXVqLrSNm5rOFlpOenM3PLTBb+uZBW1VsxosUIetTpUWa/R+OWj+Pdje/ia/Xl2mbXMrz5cKIDo0t0jsrw+BcBz2NHRE6mwEjkVL57ofQCI9OEyV3g4AbPnEGtR3gmsI4peol0qVxM08QwDJxuk3tmrCHf6eLO7o24vkM9LNOmcGjKJIL79iXmmaexhpTeu6q2iAhCr/CESkeXLePPG0cSccMNRN09Got/5Zzs9HRc6emeYXaffYZPw4YYNv0LulCYpsmMLTN4aflLRPp7ws/LG3oe15kFmeQ4c/hixxccdRwtPOb4UuI7M3ay8M+FNAxtSMPQhtQOrl1lVogqjorsYv/fFf/ll/2/sOXIFtymG6thZWjsUC5tcCkfbva8kbErcxe7Mnfx6fZPi6ztTPRCvmxF+kdyd9Ld3Bx3M59u/5T3Nr7H+5ve5+K6niGCLrcLq+Xc58Nbm7qWJuFN8Lf5E1stlpvjbua65tcR4RdxVufTEBOpLPT3Sc7F+Rx+nz/PuEQqi7wMz5Cznd/D4Kmeyajb3gwB1aBJ3xNzE0mVkHa0gOm//MH8TSnMHtURH5uFqSPa0CAyED9cGD4+OIcNw167DqED+pdpjwi/Zs0IGzyYtLffJmvhQmLGjiWwXdszH1gJZM6fz4ExT+PKyKDaqNuIvP32woma5fxRnCdM+4/uB6DHrB5F7vev7/7FjvQd1Amuw4RVEwq32yw26gXXY3yP8TQIbcC+7H0cyT9Cg5AGBNgDzv1GnGdM02RX5i5WH1zNypSVOFwOXuz2IgBbjmwhxCeE2+Jvo1X1ViREJRTeh3ohXzUF2AMY1mwYQ5oO4UjeEQAO5hxk2FfDuLrJ1QxpOoRQ39ASndM0TZYdWMaU36aw7MAyHm33KENjh3JFwyvK4iZIKVBvGZHydT7/z1RgJFIa3C7Y+d2xIWdfgjMPoppB9kEIjvZMZC2lqqznMNqWksXUn3byyaq95DvddGkcyZGcAqJD/IiN9OPguP/j4MZN1J32NrZq1QgbOKDEt+GjzgZPlmB/a3AwMU+PIeSyy9j/xBP8OXw4EcOHE/3IwyW+dnlz7N6DPTqaum++gV+zs1stp6T3l5S/vz9hOt6rIc+Zxxc7vmBQ40FYDEuJnzB1r9OdXRm72JGxgx0ZO9iZsbOwR8Oc7XMKQ6qYwJjCIW13J92Nv80fh8uB3Wo/r9/9+6u/9iR5c92bvLfxPdLy0gAI9w2nbUzbwh6Tk3tNviCG/V2IbBYbUQFRALz525scOHqAV1e/yqurXy3yuOI89g8ePVgqNUrZqYx/m0SkalJgJHIu3G6wWGDrNzDjWvALg1bXe4ac1Wzl6V0kZaIs5zD6bU86V732E742CwOTanFjpwY0iQ4GIH/HTvb+85/kb9pE+PXXY7rdnO1P+aMu1rMKQALbtaXhZ3NIfe017DVrnuXVy5ZpmmR88gmWkBBCevcmYvgNRNxw/TkNQzvb++tcXCghQ2k50/31zM/PFH5dkvsr2CeYuKg44qJOPqZ/o/40CmvE/7d313FWV/kfx19neqihOwYQKRFUbBQFsdu1ftbqrrpgu+qau3a7LgbYyqq7a3ciYicmKgoGSkhJ59T5/TEDcnUSJpnX8/HgMXPvPd/v98Phzp1735z4YdEPa8Kk5+c/z9lbng3A5e9fzqs/vUrXrK4c1OMgumZ1ZaOmG7F9h+IXWa9r//u3PHc5n8/7nE9mf8JHcz5i4tyJvHDQCzTPaE7zjOYM6jCIzVtvzmZtNqNrk64JAZFhUf1w/jbnc/425zN5wWTGfDmG579/nhAC4w4eR7OMZmva/fa5H2PkqBeOYu7yufyp35/Yb6P9SE+uHyND6/pr/6hPR23Qv2vqG0eMqSYZGEkVtXIxfPkEfPof2GgoDD4HNtoFDh4DPfeo8iln/8o7kNOr9Ar1z8rcfJ74ZAbLc/L506Cu9OuQxaX79WXvTdvTvGHhrnWFAcgTzLr8cpLS0+k4ahSNh5Q+paYqJWVm0ubss9fcXvjkkyx7403aXHgBKc3XbS2JypIzfTqz/v53lr3zLo13240mw4YRktd/7YyaUNYQ49UjNepayFBVRgwYwXGbHMfVH1zNY1MeY8u2W3L94Ot/t75JZfZX+0btad8oMThd/e8CsF377UgKSXy/8HvGTxvPY1Meo3Pjzjx3YOHIwyveu4KFqxbSLatwwW2Ar375ij4t+gDw7YJviURSklJISUohNSmVBqkN1uwAlZufS0pSSrWFL7+s+IX05HQapTXilR9f4azXzyI/5hMI9Gzek/032p/c/FwADuxxIAf2OLBa6qpOdf3DfE3ZuNnGXDHoCk7Z7BQ+nPXhmrDolk9uoX+rwnUVn/r2KR6c9CCjdhlFy8yWXD/4elpktiA1KbUmS692dX16yejPRteL53R94b+lapKBkVReP7wBH98Pk56BvBXQsic0KfqQkpIOffevljL+lfeHWhkY1cUga/bildz/7o88+P6PLFieyzbdmnPc9tmEEDh62+yEtnHlSubdfjuZm25K+2uvIbVNxXaCqWoFixaxeOxYlr3zDm0uOJ8me+9d7aMHYn4+Cx58kDk3/ouQlETbi/9B00MOqdYaqkNeQR5vTH+Dh755iL4t+nLq5qcCMPLjkRzf7/h6vY7OtMXTOPP1M/l6/tcc3+94RgwYUSMLVK/93N8tezd2y96NUZ+O4uM5HwPw05KfSg0SDn320DKvsTpk2PmRnVm0ahEp4ddAaa9ue3HBNhcAcMBTBxBjJDU5dU2bXbN35ag+R5FbkMtZr51VeFzR46nJqezQYQeGdB7CirwV3Pn5naQmF35Y3+eJfZi6eOqare17Ne/FcZscx+ZtNqd/q/40Tmu8Pt1WZ9T1D/PVPVqgpIDt/LfO/919F759IVD6GmP1JWCTJBkYSaVbPPPXUOi92+DHtwqnmw04Ajps7pSztVR3kFXZaxj9YfMOXHdw/9+FLCsmfkF6j41Iysyky7/HkNKqVZmjZcpbW+Pe67a+UnGaH3MMDbfbjpkXXsjMs89h0bPP0u7ii0lt167M81eWZe+8y+wrr6Lh4B2r/drVYd6KeTw2+TEemfwIs5fPpnWD1uzYccc1j9818S6e/f5Zzt3qXIZ0GlIvp/tc8cEVzFw6k1uH3prQN7VBWSHDirwV/LT4J/7wzB94bN/H2LhZ4c/c2zPeZlnuMnILcskryCO3IJf2DduzXYftADi+3/Esy1225rHcglz6tui75rwbN9t4zf2rz5EUkoDC9YamLZ1WeGx+Lnkxj7yCPDo06sAQhrA8dzl3TbyLSASgS5MuHNDjADZrvRkAHRt3XBNYqu6o7rClrOd+bn4uL0x9gQveuoBbhtzCjh13rJevX5IqprZOlautddVVBkbSb+UsL/x6z+7w03tw6ifQvCvsdT1kNofUjJqtT0DF1zDKL4iM/Wo2G7VuyEatG/PFjEU8+tF0jt0+my4tGv7uuJifzy933c3cm26ixQnH0/q000ht27ZSa+s35twKr69UmvQePcj+z39Y8MADzPnXSFZOmrROoc0Rk14CyldXzMlhxZdf0mCzzWg4aHs633cfDbbeaoP5sHHrJ7dy2+e3FfvYnOVzuPqDq7n6g6vX3Ddr2SxOH396iefbEP9nPrcgl5V5K2mc1piLt72YgljwuylidUFmSiY9m/cEWBMWASWudbTaMX2PKfXxa3a8psTHMlIyeHzfx0t8vEVmCz4/5nPyC/IZcP8Abhl6S6nXktZFanIq+3bflwveuoDBnQbXdDmqo5wqWv/U1n+f2lpXXVWuwCiE0AxoD6wApsYYC6q0KqmmzP0GHjqy8Ptl82Do3yGjaPvZJnXvA5AK3fPWD9z3zlR+mr+c47bvyt/36cMmHbLYpEPxWwvnzp7DzL/9jeXvvUeTPfegxbHHVnPF6y4kJ9P8mGNostdepLRsCcCiZ54lY5O+pHftWq5zHPnN2HK1WzFxIj9fcCE5P/7IRq+MJaVVKxpus3WFa66NbzKX5Czh6e+e5uUfX+aJfZ9go2YbMXXRVEIIdGnSpdi6Jh4zkdyCXP4z6T+M+nQUe3bbk39s+4/1qmN9VfXOcrOWzeKs18+icVpjRg0dRduG5QtVVTGrdz2TpNqqrk8VlVS8EgOjEEIWcBJwOJAGzAUygDYhhPeAUTHG8dVSpVRZxl8Fr19ddjuAX6bAuEsK/5Rk8Lmw83mVU1stVdXb16+PafOXM3PhChYsz2Xh8hwWLM8lKcCJg7sDcPHTXwJw6bNfMbBLM87boxfD+pS+9tCy9z9gxmmnUbBqFe2uuJysAw+sk6NlVodFBStWMPuaayhYsoRWp5xM8z/+cb12Klt9zrk338L8++4jpWVLOtz4T1JatVrn89WmN5lfz/+ah755iOe+f44VeSvYpMUmLM1dCkB2VnaZx6cmpXJM32PYLXs3MpIz1pxzwcoFbNt+26osvVhVubPc2zPe5tw3zyUnP4dLtrukTv6c1Aa1MTDVhmVDeI45xUSSakZpnxoeBf4N7BBjXLj2AyGELYCjQgjdYox3V2F9UuXa+bzfBzwF+bD6f2+/eRHabQr/7A0XL6rW0mprMFOV29fHGFm8Mo+Fy3NYuDyXBctzWLQil337tyeEwJOfzODVr+ewYK3H8/Ij750/FIBrX/qGZz6bmXDOtk0y1gRGjTNSOGLSSxxyy6X079S0XDWltGpFWrdutLv8MtK7davQ32e12vTmPCkzk66PP8bsyy5jzvU3sPj5F2h35RVk9Oq1TucrWLGCHw44kJypU2l6yCG0Pvsskhuv30K7taW/lucu5+gXjibGyB5d9+DQnofy+vTXOeqFoyqttqP7HL1mu/e6Kr8gn9GfjeaOz++ge9Pu/HOnf67ZXUxS7VObQvl1ZQgqaUNQF8PvEGOs6RrKNHDgwDhhwoSaLkMbokUz4JE/wsDjYMDhv95/cVa1B0bltS7BTHXIPvc53j9/KAuW55DdoiEZqcl8MWMRb0yZWxj2LMtZMxLo7mO2JKtBKte99DW3jv/ud+f66tLdaJCWwj9f/oanPptJ0wZpNGuQSrMGaTRrkMZFe/cmhMAXMxaxcHkuTRuk0qxhYZvM1OSEkQ6TevWm99eTSq191fffs+iZZ2h16qmEEBK25K5K1fnmPMbIf6+7j+wHR9EgdyV/3PUCFmYUH/S88ORZ7LH/9Qn3pRTkkVe029XBk1/lm2ad2fmwPSpttFh5VHZ/TVs8jUcmP8I3C77htl1uI4TAOzPfoW+LvmSlFz9dcV1qW5W/inu+uIe7Pr+L1ORUTh5wMof1Oqxadg+riufYgpUL+MPTf2Db9ttywTYXkJmSWSvqKktFgsnyqO5RFtXdZ3W9v6B2ByC1kf1VcbW1z2prXVC7a5PqqxDCRzHGgcU9Vu53qyGEVsBpQCYwOsb4bSXVJ9WM71+DR/8EeSshteIfeOqTGCO/LMthxoIVTF+wgm26NadFo3TGfz2Ha178mhkLVwCw9ZXjAHjx9B3o1bYJH/+0gGtf/IaM1CSaNUgjK7Mw9FmVlw+kslPP1jRrkEbTBmk0zUylWcNUmjZIIz2lcMTXmbv25Mxde5ZYV0lrEFXk77XosceYdcWVJKWn0+yQQ0ht167Kw6KCWMA7M9+p0mv8VgiB/zvnWPJPOIBl773Hp7vvDkDOtGmkdeqU0HbSk2clhJJLxo9n1qWX0eH662iwxRaUd0Hs2ii/IJ83pr/BQ5Mf4u0Zb5Mcktm5086syFtBg9QGbNd+u0q/ZnpyOsP7D2evrntx5ftXcs2H15CalMqhvcreur0kNTEq66tfvmLjZhvTLKMZD+3zEC0zW5br+rXFhjDKojrZX5IkqSL/vXkD8AAQgf8CW1ZJRVJVKyiAt2+EVy+HFj3g0PuhVcmhRHWpySlp+QWROUtWMmPBCmYsXMGATk3p0qIhH/+0gLMe+YyZC1ewMvfXte7v/eOW7NyrNQ3TU+jYLJOtuzZnzLs/cvn+m9CsQRrtmhQGcIcM7MQhAzuRkVr8gq1bZjdny+zm5aqxsuUvXsysiy9m8fMv0GCbbWh/zTWktmld5dddkbeC8948j3E/FYZr81fOp3lG9fVBctOmNCkKi5Z98AE//fFYmh1xBK1PP42khom7xeXNn8/sK65k8XPPkd6jByGj7u8Q+MLUFzjvzfNondmaEf1HcGCPA2nTsPR1rSpL5yadGb3LaF6f/vqaYOrLeV/SoVEHmmY0rdC5qvPDfIyR+768j5Efj+TUzU/luE2Oq3NhEdSeqY+SNhzVPb3E1zFJ1a20Ra9fBK6IMb5ZdFcaMJXCwCi96kuTqshP78K4S2GTg2CfmyC9UU1XBFTtWkE5eQXMWrSS6QuWM33hCnq3bUK/jllMnbeMo+/5gJ8XrSA3/9fpqZfvvwldWjSkWYM0AiSERQDH3vdhsde58MkvyqylstZWKm/A9gLFBGwxMvL1kXRfNJMxffbksTY7ccrnCzljWNUHRm9Mf4Px08ZzyMaH8PDkhzn6haO5bZfb6Ni4Y5Vf+7cy+vSl2eGHs+CBB1g6bhxtL72URoMKtxBf/MILzLrkUvKXLaPlKSfT8vjjCWlp1V7j+ogxMmH2BB7+5mE2b7M5h/c6nKGdh3LjTjcyuNNgUpNSyzxHVb45zy/I56+v/5Vlucs4Y4sz2H+j/UkKSeW6VnVZnLOYC9+6kPHTxjOsyzAO3vjgUtvX5g8zjpipf+riWhGqW6o7bPF1TFJ1K22E0aHARSGE4cBFRX/+QeGUNKNo1T0rFkJmU8jeHo59ATpvCxvIrj4rcvKZsbBwdNCMBSvo3LwBg3q0ZOmqPHa54XVmL1nJ2suVnbzzRvTrmEWzhmkM6NSUvTZtR4emmXRstvpPAwC6tmzIuL/uVK4aqnttpfIGbGtPr4r5+RACISmJpW81I7lRQ64bMIDrqrpYCtexSU9OZ7fs3dio6UZ0b9qdhyc/TF5BHstyl1VDBb+X3KghbS+6kCZ77cnPF1zItD//mWZHHAFA7qzZpHbpTJfLLye9R48aqW9dLclZwjPfPcPD3zzMd4u+o3FaY/q26AtAZkomu3TZpdznqso358lJydw05CYuf+9y/vHOP3h8yuNctM1F9Gxe8yMeASb9MokzXjuD2ctm87ct/8YRvY8oc7qmH2ZUmzhyQpKk9VNiYBRjXAScFULoBlwBzABOKrpfqls+vh9eOh+OehI6bgFdKn+dkqqWk1fA29/NA+Dpz2ayb//2xBgZdM34NWsIrXbg5h0Y1KMlDdOS2blXK1o3zqBDs0w6Ns2kQ7NM2mUVThnLykzlpsM3q/a/S03InT2bmef8jYaDtqfl8cevGUlTHd6Z+Q4XvnUhNw+9mb4t+tK9afc1jz1zwDOkJqUSY2Tq4qk1sttUg803p+uTTzBv9GhS2xROz2p+9FE0P/ooQnLx0wlrs3PeOIe3ZrxF3xZ9uXS7S9m96+7rtDBzddi42cbct/t9PP3d0/xzwj859NlD+c9e/6FPiz41XRqRSEpSCvftcR/9W/Wv6XIkSZJUzUqbktYNGA7kAn8FugMPhxCeBUbFGPOrp0RpPeSugOfPhk/uh647QtPONV1Rhf28aAX/ef8n/vvBNOYtXQXAIxOmrdl6/sDNO5CekkTHZg3o0CyTDk0zadOkcK2ZEAJXHbhpTZZfKyx5dTw/n38+BatWkbX//tV67ccmP8bl711O16ZdaZHR4nePr54W9eS3T3Lpu5dy6faXsk/3faqklrk338K8W28tV9uv+25SZpuWJ51Eq1NOXt+y1suq/FW8PPVlHp38KNcPvp5WDVoxov8IThpwEpu0LPvvUBskhST232h/du60M09++yS9m/cG4MfFP9K5cedq2bFvteW5y3nlp1fYt/u+9GnRhyf3e7JadnOTJNUPThWV6pbS3gX+FzgfaAjcH2McCuwWQjgGeBkYWg31Setu/g/w8NEw63PY4SzY+XxIqhujJdbe1v2yZ7/ihS9mMaRna47YpjPH3TeBfx+31Zq2fy1lF7H6rmBF4cir6SNGkN67Nx1uuIH0blU/gqe4dVymLJjCsEeH/a7tb9dxOf+t8zn/rfMT7qusdVxanXJyuQKeSb160/vrSet9vao0bck0Hpn8CE9MeYKFqxaS3SSbn5f9TKsGrejXquy1cWqjrPQsjul7DABzls/hkGcOoX+r/py/9flkZ2VX+fW/W/gdZ752JlMXT10zEs6wqOrV5nWfJKmy+fok1S2lvRPMAH6gMDBqsPrOGOOYEMLDVV2YtN4mPgILf4TDH4Keu1fo0H/lHcjpVVNVqZatyuOJT2bwwHs/cusRm9O9VSPO2rUn5+3Rm07N1/wYVuuIg7omb/58CpYuJa1zZ/LmzgWg2dFH0fqss0iqY4s2q3gLVi5g3yf2JRLZudPOHNrrULZuu/UG9XPRIqMFp21+Gjd/cjMHPn0gx21yHH/u92cyUqpmp7pnvnuGy967jMyUTO4YdkfCtElVLdd9kiRJtVVpgdEI4DogB/jL2g/EGFcUe4RU0wryC0Oi5t1gh7/CgP+DrF93nyr/1vV/4F+VvHV9ab6bu5T/u+M9Zi9Ztea+oTe8XmL73+36VYytuzbnoRO3Xe/ayt9n5aursvqsItOrFvz7fhb8+/5S21Tm9KoRA0ZwwqYnMO6ncezaZdcSg4ziPgAWxAKun3A9D3z1AGP2GMNmrevHGlOliTHy/A/Pr7ndLKMZlw26jIFtBtK2YdsarKzqJCcl83+9/49ds3fl+gnXc/vnt/P8D8/zyD6P0DC1YaVe69oPr+X+r+5nizZbcO2O19K6QdXvFihJkqTar7RFr98G3q7GWqT1s2wePHoczJkEJ39YuCNaVuJW5VW5df26Wroqj71uepP8gsh+A9pz9LbZbN65aYkhQ23djay661o9vWr6KaeyZOxYANJ79aLx0KE03nUYGT0Lp+pV5/Sq7xd+zxXvX8E1O15Dy8yW7Ja9W4XPkRSSOGfLc9i3+770at4LKNx+PbmOTKesbItWLeKy9y7jpakvAZCbn0tqcip7d9u7hiurHi0zW3L1Dldz4EYH8tHsj9aERUtzltIorVGlXKNvi74ct8lxnLLZKU5BU4W5HokkSRuu0ha9fga4HXgpxpj7m8e6AX8EpsYY76nSCqXymPYhPHJMYWi01/WFYVEttWBZDg9NmMbEGYu49f82p1F6Crccvjn9OzWlVeP0Mo8/YtJLQPUFM+VV1XXF3FyWT5jAklfGsfyDD+j62KOEtDQaDd6RBgO3oNHQoaR17Fj2iarIBz9/wOmvnU5qUirzVsyjZWbL9Trf6rDo7RlvM/Ljkdw05KYNdjRNRdZw2fyBzctssyGu4bJVu63Yql3h2mVf/fIVRz5/JLkFuWUcVai8694YFmldbGg/axsi18mSJK2r0t4dHg+cCYwMIcwH5lK4rlE28B1wS4zxqSqvUCpNjPDBnfDS+dCkPfx5LLSrnds/fz59If9+90ee/mwmOXkFbNOtOctW5dEwPYVd+rQp93mO/GZsFVa57qqqrpXffMMvd9/N0tdep2DxYkJ6Og0HDSJv4UJSW7em6R/+UCXXrYgnv32SS965hC5NunDrLrfSoVGHSjt3clIyPy35iSOfP5LbdrmNjZptVGnnri2KW8NlWe4ydn9sd1pktOCqHa6id4veruFSpFl6M7bvsD2vTXuNjZpuxIXbXMgWbbYotu1v+yy3IJeRH41kzFdj2Lz15ty7+70khaRqqrxucMSMNjSuk1X/+DomqbKUNiVtFnAOcE4IIRtoB6wAJscYl1dPeVI5fD8eNhoKB9wGmc1quppiPT/xZ0Y8+DEN0pI5ZGBHjtomm55tG9d0WbVS3rx5LBk/nsy+fcno04eCZctY9sabNB4yhMa7DKXhdtuR1KBB2SeqJk9++yQXvX0R27Tbhht2uoEmaU0q9fzbtNuG+3a/j+GvDOfoF4/m5iE3lxgObAi+XfAt3Zp2o2FqQ24fdjvdm3YnPbnskXc1rTrfnLdr1I6bh9zM+J/Gc/UHV/PHF//IIRsfwkXbXlTqcbOXzebsN87mkzmfcGjPQzlny3NqLCyqzR9mHDkhqa7zdUxSZSnX+PMY41RgapVWIlXE3MmQmgFNO8NBd0NKBiTVnv8ln7lwBf95/ye6tmzIQVt0ZKeerbhk374csHkHmmSkFntMeReXfoHqXVy6OuRMncqSca+yZNw4VnzyCcRIi7+cSEafPmQOGECPt94kpNTO6TI7d9qZEzc9kRP7n0hqUvH/tuurV/NePLDnA/xl7F844eUTeGjvhza4kUZ5BXncOfFObv/sds7d6lwO63UYfVr0qemyyq0m3pzv3Hlntmm/DXd+ficNUgtD1Bgjkfi7IGjRqkUc8uwhrMhbwbU7XsseXfeo9nrX5ocZSZKk2q92fgKTSvPlE/DUydBlOzjiEUirHaNNYoy8+90v/PvdH3n5q1kAHLt9Vw4CGqSlcMx22aUeX97FpSc9eVa1Li5dFUHW6UM3Im/uXFLbtCHm5zP1sMPJX7iQ9N69aXnSSTTeZSjpRYtWh6SkWhUGQuG27nd8fgdnbHEGWelZnLxZ5eyuVpoOjTpw/x7388S3T2xwW55PXTSV8986n4nzJrJ3t73Zs9ueNV1SnZGZksmpm5+65vb4aeO58/M7uXDbC+nbou+a+7PSszhh0xPYtt22dGvarSZKlSRJUh1jYKQadePYyeUfBZOfC2P/Du+Ngo5bwT4jq7a4CvrrI5/x+MczaNYglRMHd+eIrTvTsVntCLPWR2UFWTEnh2UffsjScf/j28tfJaSl0f3llwjJybS//nrSsrNJ61h5a/9UlamLpnLSuJOYtWwWu2XvxoDWA6rt2k0zmnLsJseuqePFqS9y4qYnlrij3rp6ZFDg75V6xpI99/1zXPzOxaQlp3Hd4OvYPXv3arryhuvnZT9z+LOHc0jPQwD4ePbHbN5mc47ofUQNVyZJkqS6pMzAKISwN/B8jLGgGupRPRNevwqG3Vt2w6Vz4KGjYNp7sPVwGHYppKRVfYGl+HbOEh547ydOHrIRLRulc+BmHdmue0v23rQdGan1cwv0kiz473+Z888bKViyhJCRQaMdBtFo6FAoKIDkZBoN2r6mSyyXCbMmcPprp5NEEnfvdne1hkW/9dwPz3HbZ7cxbck0Lt7u4kqdDvfIDsnVFhi1adCGVg1aMW3JNM5+/WzOfv3sUtu7g0/phnQewpZtt+SWT27hf9/8DygMkFT31eZ1nyRJ0oapPCOMDqNwp7THgHtjjJOquCbVI6enPA6UIzBKbQD5OfCHe2CTg6q8rpLk5RfwyqQ53P/eVN7+9hfSkpPYfqOWDOvThkE91m8b9Q1F3ty5LBk/niXjxtHmnHNI796d1A4daLzrMBoPHUrDbbclKTOzpsussFd+fIVz3jiHjo07cuvQW+nUuFON1jOi/wiSQzK3fnorv6z4hRt2uoGGqQ1rtKbyennqy/yw6AdO7H8iA9sO5PkDny/Xce7gUz6N0xpz3tbncfDGB3PA0wewV7fqm8KqqlNfQ1BJklRzygyMYoxHhhCaAIcD94YQIoWf8P8bY1xS1QWqHisogI/HwKaHQHoj+PO4Gl3LZnlOHsP++QYzFq6gfVYGZ+/Wk8O27ESLRrVjB6eYnw8FBcQYC/suRgiBpIwMAPKXLCHm5RXeX/R4SE0luWlTAHJnzvz1HEWPJzVsRGqb1kDh9vZrHiuIEAtIbt6CtI4dyF+8GICphx3Ois8+gxhJ7dSJvNmzSe/enUY77kijHXes1L9veddWOm5Q4J5KWCS8a1ZXduiwA5dufylZ6VkVqrUqhBD4S/+/0LpBay5991KOe+k4Ru8ymuYZzWu6tBItyVnCVe9fxTPfP8OmLTfluE2OIzW5ahYK39CN+nQUoz8bXa62jsqSJEnSuijvLmmLi0YYZQKnAwcAZ4cQboox3lyF9am+WrEQnhwO3zwPMR+2/HONhEWfTlvIRz8u4E+DutIgLYWDNu9A3w5ZDO3VmpTk6q1n+UcfMeP0MwCY1G9TKCggc8AAsh98AIAf9t+fVVO+TTim4fbb0/nuuwD4fr/9yJuZODWl8a670vGmwrWgfjjgQPIXLUp4PGv//Wl/9VWFj//hYMjNTXi82RFH0PaiC6FoDZ2Ym0urU0+h0dChpPfoUelr66ytvGsr9RtzLlOPWbcRFjn5OTz/w/Ps130/ujftzsgh5Vs3qzo/zB/Y40BaZrbkga8eIDOl9o7c+nDWh5z/1vnMXT6X4f2Hc/ymx1fZrnL1wYgBI8oV8DgqS5IkSeuqPGsY7QMcB3QH7ge2ijHOCSE0ACYBBkaqXD9/Dg8fBYumw+7XwMA/VevlV+XlA7DvLW/x+fRFNM5I4eCBHWmSkcqZu/assuvOvfkW5t16a/kaFwU3Kz76iEm9ehfbpMG229L04D+sud3qpJMpWL4ckgKEQEhKIrXjr9Oq2lx0ETEvt3BXspAEIZDWqWOpdS148EEWPPjgmtsrv/ySlV9+ydyRN5VYesuTTqLVKVW/q9j6WrRqEaeNP42PZn9EdpPsCq1XVN0f5nfsuCM7dNiBEAJLcpYwbcm0WrUl/fyV8xnxygjaNGzD/XvcT79WZYdkKp0jjCRVNtfJkiT9VnlGGB0M3BhjfGPtO2OMy0MIx1VNWaq3vn4OHj0OMpvDH5+HzltX6+U/nbaQkx78GIDlOflcul9fDtisA40zqn4kRKtTTi41SIkxkr9wIVO23Y7eX1d8KbGmBx1Y6uNZexc/Ciezf/9yBTyTevVep7pqo58W/8RJ405ixtIZXLPDNTW6uHV5rR7Ndc0H1/Dyjy9z/eDr2bFj5U4DrKiZS2fSvlF7mmc055aht9CvZT8apNb9nQNrA0cYSapshsaSpN8qz5yafwAfrL4RQsgMIWQDxBjHVVFdqq9a94Eew+DEN6o1LFq2Kg+Ajs0y6dCscFrP2DN25Ohts6slLCpJQU4OM889j5ypUwkhkNKsWY3VUl98MucTjnj+CBauWshdu97Fnt32rOmSKuT0LU4nu0k2p756Kk9MeaJGasgvyOeuiXex1xN7MfbHsQBs3W5rwyJJkiSpDinPCKNHgO3Wup1fdN+WVVKR6p8FU+Hjf8OQi6B5Vzj0gSq7VHkXSgboel7ZOzeVtVDy+ogx8vMFF7L4mWdoNHhH0rKzq+Q6SrR41WKaZTTj5iE306VJl5oup8JaZrbk3t3v5YzxZ/D3d/7OnOVzOGHTEwghVMs0pmlLpnHBWxfwyZxP2LXLrmzZxl8VkiRJUl1UnsAoJcaYs/pGjDEnhJBWhTWpvrl9cOHOXQOOgBbdq/RS733/S60+39rm3XwLi595hlann06TPfaosuvUVZUdfhzU4yAu3u5iBncazHYdtqvTCzI3TG3IrUNv5e/v/J2HJz/MYb0OIys9q8qnMT37/bNc9u5lJIdkrtrhKvbquleVLnwuSZIkqeqUJzCaG0LYN8b4NEAIYT9gXtWWpbquPCN5RiQ/xTmp8OXyLIbnns5P130NfF1s28oayfPQidvy0Y/zOeruD8jJK+DIbbpw6tAeNG+YmIFmn/scU69et521KsPCJ59k3qhRZB10IC1OPKHG6qjNKiv8yM3P5ZJ3L+GJb5/gkJ6H0KdFnzodFq2WmpzKlYOuZO6KuWSlZ5FfkE9ezCM9Ob3Krpkcktmk5SZcvv3ltGvUrsquI0mSJKnqlScw+gvwYAjhFiAA04Cjq7Qq1XlnpDzGGRlXl6tt36QfeSP9jNIbpZwLnLfO9eQXRKYvWE6XFg3p2z6LAzbrwPE7dCO7ZcN1PmdViQUFLHz0URpsuw3tLr7YERpVaHHOYs4cfybvz3qf4f2H07t58TvO1VUhBFo3aA3A9ROu58tfvuTmITeTlZ5VadcY/9N4FqxawIE9DmSPrnuwW/ZuJIXyLI/3K3f8kiRJkmqfMgOjGON3wDYhhEZAiDEuqfqyCoUQ9gH22WijjarrkqosO59X+Kck378Or1wMMz+GixdVWRkxRl77Zi5XvTCJZavyGffXwWSkJnPFAbV3W++QlETnu+4i5uYSUuv+SJfaavqS6Zw07iR+WvITVwy6gn2771vTJVWpzVpvxkPfPMTRLxzNbbvctt4jgJblLuPaD6/l8SmP079Vf/bfaH+SQlKFwyJwxy9JkiSpNirXO/sQwl7ACOCMEMLfQwh/r9qyCsUYn4kxnpCVVXn/G65aottgOGF8lV7iixmLOOKu9zn2vg/JySvgwr16k55S8Q+z1SVv/nxmXngh+UuWkJSRQXLjxjVd0gZt/LTxzFsxjzuG3bHBh0UAu2bvyu3Dbmfu8rkc+fyRfDP/m3U+18ezP+agpw/iyW+f5M/9/sy9u927TkGRJEmSpNqrzHf4IYTbgEOBUyicknYwUPe2DlLtEGPhjmi5K6r0Mp/8tIC9b36LST8v5uJ9+vDyGYPZo1+7Wju9q2DVKqaPOInFzzxLzo8/1XQ5G7RFqwpHtB3Z+0ie2O8Jtmxbc7t4De8/vFqvt2XbLRmzxxgIcOLYE1mRV/GfwxlLZ3DcS8cRCNy3+32ctvlppCY7Ek6SJEna0JRnDaPtYoybhhA+jzFeEkK4AXi8qgvTBuqrJ+HpUyAlAzY9pFJPvWhFLl/OWMR2G7VkQKemXLxPHw7coiNNMn79MFuexbhXyz73uTLbVMZi3LGggJnnnsuKTz+lw8iRZG7St9T2jwwKVMsQvwqqrXWtFmPk3i/v5Z4v7uE/e/6Hzk06r1nfp6bUxDo7PZr14ME9H+S7hd+RmZJZ7uMWrFxAs4xmdGjUgWt3vJbtO2xPw9TatwaYJEmSpMpRnsBoZdHX5SGE9sAvQNeqK0kbrPxcGHcZtO4DmxxUaafNySvggfd+5OZXp5CXH3nv/KE0TE/hj9v//ml6xrCNyxXwVOcuaXP/NZIlL7xI67PPosluu5bZ/pEdkqs1mCn3gsQ7JPNILV2QOLcglyveu4LHpjzG7tm706Zhm2q9fm3TtmFb2jZsC8ATU55gSc4Sju5b/F4GBbGAB756gJs/uZnbht3GFm22YNfssp+nkiRJkuq28gRGz4QQmgLXAR8DEbizKovSBurjf8P87+Dw/0FS8nqfLsbI8xNnce1LX/PjL8vZfqMWnLdHbxqml+dpXTvkL1rEoqeeounBB/PQ5isZXY7ABap3p6gNYUHik145iXd/fpfj+x3PyZud7Ho7RWKMvDPzHV6c+iJzls/hzIFnJvTNz0t/5sK3L+SDWR+wU6edyG6SXXPFSpIkSapWpX6yDiEkAeNijAuBx0IIzwIZMcaq29ZKG6acZfD6NdBpG9h490o55Tezl3DSfz6mZ5vG3Hvsluy0catau0ZRSZKzssh+5GFSmjVjRGoqIzY7qcxjanMwU50qshX7uz+/C8CdE+/kzonF5931cSv2EAJX73A1TdObMuarMcxZMYcrtr8CgOe/f57L3ruMgljAJdtdwgEbHVDnfr4kSZIkrbtSA6MYY0HRmkXbFt1eBayqjsK0gVk2D5p3g10uhvX40PnDvGW88908jti6C73aNuE/f96arbu1IDmpbn2QXfXttyx6+hlanXYqqa1rdh0d1W/JScmcv/X5tGnYhpEfj2T+yvkAzF0xlx7NenDFoCvo1LhTDVcpSZIkqbqVZ+7OyyGEg4DHY4yxqgvSBqpZFzj2hXUOi35Zuoqbxk3hwfd/IjMtmb37tSerQSrbbdSykgutennz5jHthBMpyM2h2ZFHGBito7Wnyn08+2NemvoSr/z4CnNWzCE1KZU/9v0jp25+qiOyyiGEwJ/7/ZnWDVrz89Kfef/n9zmqz1Ec2ftIkith+qgqX0VG2FXnFFZJkiRtOMoTGJ0JNATyQggrgQDEGGOTKq1MG46vnoZOW0Hjtr976F95B3J6KYeuzM3n7rd+YPRr37EiN5/DtuzE6btsTFaDurmNd8GKFUwbcRJ58+fT5f77DYvWUX5BPt8u/JaezXsCMPLjkXwx7wsGdRjEsOxh7NRxJxqlNarhKuuefbvvC8Atn95SuJZRLRu4N7z/8JouodbYENYWkyRJUu1WZmAUY2xcHYVoA7VwGjz2J+h/OOx70+8e/lfeH0oNjOYvy+GmcVPYoUcrzt2jFxu1rrshQCwoYObfzmXlxIl0vPkmMvttUtMl1Sl5BXl8NPsjxv44lld+fIVFOYt47ZDXyErP4tLtL6VlZku3eS/DsS8ey4TZE8rVtjyjUga2Gci9u9+7vmWVmyNgJEmSpOpTZmAUQtixuPtjjG9Ufjna4Lx2FRBg8DnlPuTNKXMZ+9VsLtm3L+2bZvLqWTvRoWlm1dVYTVZ98w1LX3uN1n87h8a77FLT5dQpb814iwveuoD5K+eTmZLJDh12IBIZ9L9B5TreKTmFtmy7ZbkDo/KeT5IkSdKGqTxT0s5e6/sMYCvgI2BIlVSkDcecSfDZf2GbEZDVsczmk35ezFUvfM0bk+fSsVkmpwzpQavG6RtEWASQ0bs33Z57ltSOZfdFfZZbkMv7P7/P2B/HMqTTEAZ3Gkznxp3Zuu3WDMsexqAOg8hMKf9zwik5v3IakyRJkqTyKs+UtH3Wvh1C6ARcW2UVacMx7lJIawQ7/LXUZguW5XDl85N49OPpNMlI5cK9enPUtl1IT6m5xXZPG9qj0s619M23yJs3j6YH7E9aJ3ebKk5BLOCtGW/x8tSXGT9tPItzFtMwtSE9mxWuUdS5SWeuHezLjiRJkiRVl/KMMPqt6YCLr6h0+bmQ3hgGnQENmhfbZPWme2kpSbzz3S/8eVBXTt65R61Y0PqMYRtXynlWfjOZGaefTmrnzmTtvRchteb/brVFTn4OPyz6gZ7NexIIXPPBNcxfOZ+dO+3Mrtm7sm37bUlPTq/pMiVJkiSpXirPGkY3A7HoZhIwAPisCmvSBuDGV39g5Af7ARGee67Utn3/8RIAd775A3e++UOxbU4b2qPSQpzqkjtnDtP+8heSGjak0+hRhkXAqvxVvD3jbV7+8WVen/Y6SSGJ1w55jdTkVG4deivtG7UnLTmtXOdyW3FJkiRJqjrlGWG09gqpecB/Y4xvV1E92hBM+4CWy+ZQuCd3LduXu5oULF/O9OEjyF+0iOwH7ie1bdv1PmeMkds/vx2A2z+7nWYZzchKz6JpelM2b7M5qUmp5Bfkk5xUc1P5SvPUt09x5ftXsjxvOVnpWeyavSvDugwjhMLnSHZWdoXO53o8FWfIJkmSJKm8yhMYPQqsjDHmA4QQkkMIDWKMy6u2NNVJBfnw9KkcVZDHUVd+AElJv2uyKi+fna57jfZNM/noxwVMvXqvGii0ai15dTwrJ02i4623kNGnT7mOqciH+Vs+vaXMNi0yWrBR041omtGU63a8jhAC7//8PrOXz6ZpetM1YdPq7yvT8tzlvDnjTcb+OJYjex/JgNYD6JrVlT277cmwLsPYsu2WpCY54qq6GbJJkiRJKq/yBEbjgF2ApUW3M4GXge2qqijVYZ/9D+ZOgoPHFBsWATz04TR+XrSS6w/uzxF3vV/NBVaPrL33IqNPH9K7dS33MSV9mF+0ahGv/vQqB/Q4ACj8MP/RkR+xaNUiFq5ayKJVixjYdiAAr097nQmzJ7Bg5YI1j09fMn3NKJ5HJj/CS1NfSjh/84zmvH7o6wBc8d4VTJo/aU2Q1DS9KZ0ad+LQXocCMHnBZIA1j/12+tgLP7zA2B/H8ub0N1mZv5LmGc3ZpcsuAGzaalM2bbVpuftD0vob3n94TZcgSZKkOiqsXni4xAYhfBpjHFDWfVVp4MCBccKECWU3VM3KXQk3bwGNWsPxr0L4/XS0lbn5DL5uPF2aN+ShE7eh63nPb1AjjBY+9hjp3buTOWBAhY899sVjmTC78p7nA9sM5N7d7024b2nOUuavnM/CVQvXhE0FsYD9NtoPKBzl9PGcj1m0atGa0CkQWJG/okrrqkqOlqk4+0ySJEmqH0IIH8UYBxb3WHlGGC0LIWweY/y46GRbAJX36VEbjg/vgsXTYf9RxYZFUBgY7dyzNfsN6LBm1MuGYslrr/HzRX+n8W670nEdAqPiwp0Tx57IV/O/4l87/YvBnQYD6/dhvlFaIxqlNaIznYt9vLgRTrn5uaQmF04f+2zuZ8xaNmvN6KWFqxbSpkEbjul7DP3G9OPZA56lY6OOtXYdJUmSJElS+ZQnMDodeCSEMLPodjvg0CqrSHVXzIfe+0C3wdw4djIjx00psen/Ppy25vvsc0vfRQ1q/y5pKydNYsaZfyWjVy/aX3HFep9vWe4yhr8ynK9++Yrrd7p+TVhUE1aHRQD9W/Wnf6v+Jbbt0qRLdZQkSZIkSapiZQZGMcYPQwi9gJ4Ubnn1dYwxt8orU92z/WlQNMXxjGEb/y7geenLWbRunM5mnZutuS/73Ofq/JS03FmzmHbiX0jOyqLj6NEkNWiw3ud8/+f3+eKXL7h28LUM7Ty0EqqUJEmSJKn8il+VeC0hhJOAhjHGL2KME4FGIQT3UdavlsyCb14oDItKmGa2PCePC56YyPUvf1PNxVW9+fffT8GyZXS6bTSpbVpXyjmHdB7Ccwc8x7AuwyrlfJIkSZIkVUSZgRFwfIxx4eobMcYFwPFVVpHqntevgYeOhMUzSmxy/7s/Mm9pDmfsUnunla2r1meeSfb//ktGz57rdZ6VeSs55dVTeHfmuwC0b9S+MsqTJEmSJKnCyrOGUVIIIcSi7dRCCMlAWhnHqL6Y9y18NAYGHgdZHYttsmxVHre/8T079GjJwOzm1Vxg1YgxMv+ee2iy116ktm1Leo8e63W+VfmrOPCpA5m2dBqvTXutzPb9xvQrs83w/sOLXcS6vnFbcUmSJEmquPIERi8BD4cQbgMi8BfgxSqtSnXHq5dBSgYMPqfEJmPencr8ZTm1etHqilrw738z57rrKVi1ilYj1i+UycnP4czXzmTa0mlcut2lHNDjgFLbV/eW56M+HcXoz0aXq21tDLIMzSrOkE2SJElSeQKjvwEnAMMpXPT6ZeDOqixKdcSMj+CrJ2Hw36BRyWv3pKcks2//9my+1mLXtd3cm2+h1SknF/vYknHjmH31NTTedVda/uUv63Wd3IJc/vr6X3lj+hv8fdu/lxkW1YQRA0aUK3Sp7iBLVceQTZIkSVJ5dkkrAG4r+kMIYRBwM3BS1ZamWm/ZL9C2H2z7+2DlxrGTGTluSsJ9T382s9jTZJ/7XJmXOm1oj2odoTTv1luLDYxWTPyCGWedTUa/frS/5mpCUnmWAStZEkk0S2/GhVtfyMEbH7xe55IkSZIkqbKUZ4QRIYQBwOHAocAPwONVWJPqio13hR7Dit0Z7YxhG/OnHbry9pR57Na3LUlJxe+eln3uc0y9eq+qrrTSzL3xn6Q0a0anUbeSlJm5zufJK8hj4aqFtMxsySXbXUIoYXc5SZIkSZJqQonDI0IIG4cQ/h5CmATcAkwHQoxx5xjjzdVWoWqfggL47H+Ql1NsWLTavW9NZfiDHzN5zpJqLK5qdRg5ks733E1Ky5brfI78gnzOf+t8jnz+SJblLjMskiRJkiTVOqXNp/kaGArsE2McVBQS5VdPWarVvnwcnjgRvn62xCaLVuRy11vfs2ufNvRq26Qai6t8MTeXeXfcScHKlSQ3bkxadvY6nyu/IJ+L3r6IF354gYM3PpiGqQ0rr1BJkiRJkipJaVPSDgIOA8aHEF4E/kfhoteqz/Jy4NXLoc0m0Gf/Epvd/dYPLFmZx+m71O2d0WKMzLr0MhY+8ghpXbNpMmzYOp+rIBbwj3f+wTPfP8Mpm53Cn/r9qRIrrTp1fZc0SZIkSVLFlRgYxRifAJ4IITQE9gfOANqEEEYDT8QYX66eElWrfDwGFvwA//cIlLDg88LlOdzz1g/ssUlb+rSv26OL5t9zDwsfeYQWJ5ywXmERwD1f3MNT3z3F8P7DOWHTEyqpwqrnLmmSJEmSVP+UZ5e0ZcCDwIMhhObAwcC5gIFRfbNqKbx+DXQZVLjYdQmmzV9Bi0ZpdX500eIXX2LOddfTeI/daXX6aet9voM3PpgmaU3cDU2SJEmSVOtVaE/wGOP8GOPtMcYhVVWQarGls6FJB9jl4lIXu+7XMYvxf92Jnm0bV19tVWD2VVeROWAA7a+6ilDCaKqyxBh5ZPIjrMpfRVZ6Fof0PGS9F7ke3n/4eh0vSZIkSVJZyhxhJK3Rojuc8FqpYdGEqfPZpEMWGanJ1VdXFeky5j6SmjQhKSNjnY6PMXLth9fywKQHSCKJgzY+qFLqcv0fSZIkSVJVMzBS+Xz9PHTeBho0L7HJvKWrOPqeD9h/sw5ceUDZix/XhLk338K8W28tV9vvdt+jzDYtTzqJVqec/Lv7Y4zc+NGNPDDpAY7sfSQH9jiwwrVKkiRJklRTDIxUtgU/wiPHwOZHw143lNjsjje+Z2VuPsdt37Xcpz5taI/KqLDcWp1ycrEBD8Cq73/gpz/+kbhqFfmLFtH760nrdI0YIzd/cjP3fnkvh/Y8lHO2PGe9p6FJkiRJklSdDIxUtvFXQkiCHf5aYpO5S1bx73enst+ADmzUulG5T33GsOpdGLukLeI7zY1c9N98iHDZ4cnccPe6bxE/b8U8Hp78MAf1OIjztz7fsEiSJEmSVOcYGKl0s76Azx+C7U+FJu1LbHb769+Rmx85tZpHDFVUcVvEr/jyS6b96c+Ehml0vu9enu/WjUl3917nLeJbNWjFQ3s/RLuG7UgK67ZYtiRJkiRJNclPsyrduEsgowkMOqPEJjFGJs1azAGbdaBry4bVWFzlyJ0+g6QmTejywP2kd+u2zue5a+JdjP50NDFGOjTqYFgkSZIkSaqzHGGkkuWtguS0wqlomc1KbBZC4IE/bc2qvIJqLG795S9aRHJWFk1225VGO+9EUlraOp/rvi/uY+THI9mz655EIoH6Nw1teP/hNV2CJEmSJKmSOARCJUtJh8MehO1OLbHJL0tXMXfJKkIIZKQmV2Nx62fp22/z7dBdWPrW2wDrFRbd/9X93PDRDeyevTtXDLqi3o4s+u1UP0mSJElS3VU/P9mqbNM+hHlTCr8vZdHmkeOmMOSG11iyMreaClt/S8aPZ/rwEaR26EBG717rda7/TPoP1354LcO6DOPKHa4kJclBe5IkSZKkus/ASL+XnwdPjYCHj4YYS2w2c+EK/vfBNPbetD2NM1KrscB1t/ill5l+yqmkb7wxXcbcR0qLFut1vsZpjRnWZRjX7HgNqUl1ow8kSZIkSSqLwyH0e5/9B+ZNhkPuL3V00a3jvyUSOXnIRtVY3Lpb+dVXzDjzTDI33ZROd9xOcuPG63yuucvn0qpBK/bpvg97d9ubUEo/SZIkSZJU1zjCSIlyV8D4q6DDQOi9T4nNpi9YzsMTpnHolp3o0DSzGgtcd+m9e9Pm/PPofNedZYZFjwwqOQB68tsn2fPxPfl0zqcAhkWSJEmSpA2OgZESvX87LJkJwy4pdXTRm1PmkRQCJ+1c+0cXLXz0UVZ9/z0hBJofcQRJDRuWecwjOxS/gPcz3z3D39/+O5u13oxezddv/SNJkiRJkmorAyMlyl0BvfaG7EGlNjt8q868fe4Q2mXV7tFFv9xzLz9feBHz7xuz3ud64YcXuPDtC9my7ZaMHDKSjJSMSqhQkiRJkqTaxzWMlGjn80pd6BpgzpKVtG6cQctG6dVU1LqZN3o0c0feROM9dqftRReu17m+nPcl5715Hpu13oybh9xMZkrtDsokSZIkSVofjjBSocUz4fvXCr8vZSra1HnL2P7qV3n0o+nVU9c6iDEy58Z/MXfkTWTtty8drruOkLp+O5j1btGbvw78K6OGjqJBaoNKqlSSJEmSpNrJwEiFXrsKHjwYlswqtdlNr04hOSmw48Ytq6mwiou5uSz/aAJNDzmEdlddRUhZ94F0b814i2lLppEUkjiqz1GGRZIkSZKkesEpaYK5k+GTB2CrE6Fx2xKbfT93KU9+MoPjtu9K68a1b/2eWFBAXLmSpAYN6HznnYSMjN/tYDbq01GM/mx0uc7Xb0y/MtsM7z+cEQNGrFO9kiRJkiTVVo4wErx6KaQ2hB3PKrXZTeOmkJ6SzImDu1dTYeUX8/P5+YIL+en4E4g5OSRlZrrdvSRJkiRJ68gRRvXd9Akw6RnY6XxoWPI0s4XLcxj71WyO3rYLrRrXrsWuY24uM//2NxY//wItTz0FSlmvaMSAEWWOCHpj+hucNO4kejXvxV273kVWelZllyxJkiRJUq1mYFTfLfkZWvWGbU8qtVnTBmmMP3sn0pJr16C0gpwcZpx5JktfGUfrs8+ixZ/+tF7nizEy5ssxANwx7A7DIkmSJElSvVS7Pv2r+vXeB0a8C+mNSmyyPCePGCOtG2fQtEFaNRZXtlmXXMLSV8bR5oIL1iss+nHxj8xbMY8QAtcNvg6AZhnNKqtMSZIkSZLqFEcY1VcFBTDpKei1DySX/jQ4+5HPWbIqjzHHblnr1gVq8ec/02DgljQ9YP9ytXfRa0mSJEmSymZgVA/cOHYyZwzbOPHOLx6Fx4+HQx8oHGVUgkk/L+a5iT9z8s4bVUlYNOrTURUOXPKXLmXR44/T7KijSO/alfSuXct97NprGC3LXcaV71/J0989zeatN+fqHa6mXaN2QGFYNPGYiRWqS5IkSZKkDYVT0uqBkeOmJN6RtwpevQzabgo99yr92Fem0Dg9hT/vUP5QpiLKO9pntfyFC/np2OOYfe11rPr663W+7g+LfuDQZw/l2e+fZXj/4dy9291rwiJJkiRJkuo7A6N64PSURxPvmHAvLPwJdrkYkkp+CnwxYxEvfjmL4wZ1rRVrF+XNn8+PfzyWVV9/TcebRpLRu/c6n6t5RnOapTfjrl3vYsSAEaQkOdhOkiRJkqTVDIzqgdNTHv/1xqol8MZ10HVH6D6k1OPufXsqjTNSOG5Q1YwuqojcOXP48eijyfnhBzqOGkXjIaXXXpz5K+dzw4QbyM3PJSs9i3/v8W+2bLtlFVQrSZIkSVLd5rCK+mbRDGjYqnB0URlrEl1xwCYcsU1nsjJTq6e2UqyaPIW8ufPodMcdNNx6qwof//7P73Pem+exaNUihnQewmatN6t1C3hLkiRJklRbGBjVN617wfB3Sp2KBpBfEMlITWbzzlW7tfzBb+bDMSU/XrBqFUnp6TQatD0bvTKW5MaNK3T+3IJcRn86mrsm3kV2VjajdxlNz+Y917NqSZIkSZI2bE5Jq08mvwQrF5cZFn06bSE7X/8aX81cXOUlHfxWLPGxVT/8wPd77MniF18CqHBYBHDJO5dw58Q7OaDHAfxvr/8ZFkmSJEmSVA6OMKov5v8A/zsCtjoedr+q1Kb/emUyS1bm0rlFg2oq7vdWTp7MT8f9CQoKSOuaXeHj8wvySU5K5qg+R7F9h+3Zo+selV+kJEmSJEkbKAOj+mL8FZCUAtudWmqzj35cwGvfzOVvu/eiUXrNPD1WfvUVPx33J0JaGp3/PYb0bt3KfeyKvBVc88E1FMQCLt3+Uno27+moIkmSJEmSKsgpafXFxEdgm+HQpF2pzf71ymRaNEzj6G27VFNhiXJnzeLHPx5LaJBJlwfur1BYNHnBZA579jAem/IYzTKaURALqrBSSZIkSZI2XI4wqsNuHDuZkeOmlNluagYsjA3Z8ZXeLH7luRLbHbplJ96cMo/z9+xFw/UcXTTq01GM/mx0me0eBvqN6ffrHTGyz8DIu72WMW/8XmvuHt5/OCMGjCj2HDFGHvrmIa778DqapDfh9mG3s1377darfkmSJEmS6rMQY8mLDtcWAwcOjBMmTKjpMuqmnOVwZTsYdhlsX/p0tIKCyEtfzmJwz1Y0SKueLHFSr970/noSy959l+TmLcjouXGFzzF3+Vz2fXJf+rfuzxXbX0GLzBbrXVe/Mf2YeMzE9T6PJEmSJEm1VQjhoxjjwOIec4RRXTb+Knj96vK1HXtR4Z9SJA0+lz12Pq8SCquYJa+9xoxTT6PBwC3ofM895T5u8oLJ9Gjag1YNWvHgXg+S3SSbpOAsS0mSJEmS1peBUR12Y95BjFy5aZntpmb8H9kr/1Nmu51+aMV9O1dGZRUz/ZRTydh4Y9rfcEO52ucX5HPHxDu47bPbuHjbizmgxwF0yyr/WkeSJEmSJKl0BkZ12BnDNuaMYeWYwnUxTL16rxIffue7efzfne+zU89WlVdcOSx87DEAMjfZhE533E5y48ZlHjNr2SzOffNcPpr9EXt124thXYZVdZmSJEmSJNU7Bkb1XIyRG8dOpm2TDA7bqnOlnXfuzbcw79Zby9V2xSefMHnLrUpt0/Kkk/j6gP6c99Z55OTncMWgK9i3+76VUaokSZIkSfoNA6N67q1v5/Hh1AVctl9fMlKTK+28rU45mVannEze/PksffVVFo8dy/J33iXm5tL9xRdIy84mb948pgzagd5fTyrXOafMfIcOjTpwzQ7XkJ2VXWm1SpIkSZKkRAZG9djq0UXtszI4ZMtOlXreEAJL33yTaSf+BQoKSO3QgWZHHEHjYbuQ2qnwWiktW5Z5ru8Xfs/Hcz7mDxv/ge3ab8c27bZZr4WtR306itGfjS5X235j+pXZZnj/4YwYMGKd65EkSZIkqTYyMKoH5k5sTHGrE4UQuGjvPixcnkt6yvqNLlr1/Q8seeUVlowdS9Y++9D86KPI3HRTWpx4Ak123ZX0Xr0IIZT7fDFGnvj2Ca7+4GoapDRg9+zdaZTWaL13QRsxYES5Ap5+Y/ox8ZiJ63UtSZIkSZLqKgOjemDel8UHRgCbdW62zueNMTLvlltZ/NKL5Hz7HQAZm25KcvPmACRnZdH6tNMqfN4lOUu49N1LeXHqi2zddmuu3OFKGqU1Wuc6JUmSJElSxRgY1VPjv5nDS1/M4rw9e5OVmVquY2J+Pis+/ZRVkyfT7PDDCSGwfMIEUlq0pNmhh9F4l6GktmsHlH/q18OUPvXr/VnvM/SRoU79kiRJkiSpGhkY1UMxRv758mQWrsihQVrpU9FiTg7L3v+AJWPHsmTcOPJ/+YXQoAFZ++9PUmYmne++i5Dy+6dRead+TbqqNxOPmbhm3SOAxyY/Rvem3RnQesA6/f0kSZIkSdL6MTCqh16ZNIeJMxZx7R82JTX592sCFSxfDikpJKWlMf/+B5hz3XWEBg1oNHhHmgwbRsMddyQpMxOg2LCoouatmMf5b57PYb0OY0jnIRy08UHrfU5JkiRJkrTuDIzqmdU7o3Vp0YADN+uw5v78RYtY+tprLB47lmVvvU37q66kyR570GSvPUnr2pWG229HUnp6ldR00NMHsTx3Oft036dKzi9JkiRJkirGwKieeenL2Xz182JuOLg/KclJ5C9dxozTTmPZ++9DXh4pbdrQ9KCDSOvWDYDUtm1Jbdu20uvILcjlpo9vYk+geUZz7tntHro37V7p15EkSZIkSRVnYFTP9GEx18cv2OGDabDFX0hq2ACSk2jxx2NoPGwYGf36EZLWb+v68nhj+hvc9+V9LBsU+O9e/yUjJaPKrylJkiRJksrHwKgOu3HsZEaOm1JmuxeA8/c/je1mfkH3xTPpC4xr2Z3zfuxU2KD5fjAPTpuTyRlVHBYtzVlKo7RGDOk0hPv3uJ+jOIq/GxZJkiRJklSrhBhjTddQpoEDB8YJEybUdBl11qRevSEE5nTemJZ77EaPP+xDWseOVXrNUZ+OYvRnoyvtfMP7Dy/XrmuVZdSno6r1epIkSZIkVbcQwkcxxoHFPmZgVHfNvfkW5t16a6Wdr+VJJ9HqlJMr7Xyr5eTncOX7V/LYlMfYrv12XLPDNTTNaApAvzH9mHjMxEq/piRJkiRJKl1pgZFT0uqwVqecXK6AZ1Kv3px8/GiSkwIvnrYjSUmhGqorNGvZLM587UwmzpvIn/v9mZMHnExyUnK1XV+SJEmSJFWcgVE98d3cZYw6YvNqC4uKm5J218S7uGviXb9r229MvzLPV91T0iRJkiRJqs8MjDZwefkFAPRq25jd+7atlmvGGDm056GMGDCC3PxcZi6bSZcmXYpt65Q0SZIkSZJqn6rfP101Kq+gcI2qc3bvWS2ji5bnLufcN8/liOePYHHOYlKTU0sMiyRJkiRJUu1kYLSBy0gtXC9oSK82VX6taYuncdQLR/HCDy9wUI+DaJTaqMqvKUmSJEmSKp9T0lQp3pz+Jn97828EAqN3Gc32Hbav6ZIkSZIkSdI6MjDSeosxMubLMbRv2J4bd76RTo071XRJkiRJkiRpPRgYaZ0tyVlCXkEezTKacf3g60lPSSczJbOmy5IkSZIkSevJNYy0Tr5b+B3/99z/8bc3/kaMkaYZTQ2LJEmSJEnaQDjCqB54ZFDg75V4vpenvsyFb19IZkom/9j2H4Tw+93XRn06itGfjS7X+fqN6Vdmm+H9hzNiwIgK1ypJkiRJkiouxBhruoYyDRw4ME6YMKGmy6iz+o3px8RjJq73efIL8rnpk5u454t72LTVpvxz8D9p03D9dl+rrNokSZIkSVLFhBA+ijEOLO4xRxip3JbmLuWlqS9x8MYHc+5W55KWnFbTJUmSJEmSpCpgYKQyTVkwhewm2WSlZ/HQ3g+RlZ5V0yVJkiRJkqQq5KLXKtXT3z3N4c8dvmY9IsMiSZIkSZI2fI4wUrFy83O59sNr+d83/2PLtltyRO8jarokSZIkSZJUTQyM9Dtzl8/lr6//lU/mfMIxfY7h9C1OJyXJp4okSZIkSfWFKYB+Z+Gqhfy4+Eeu3fFa9ui6R02XI0mSJEmSqpmBUR026tNRa9YWKku/Mf3KbLNvt325Yocr6NGsBy8e9CKZKZnrW6IkSZIkSaqDDIzqsBEDRjBiwIgy2/Ub04+Jx0ws8fGVeSu5/L3Leeq7p9it627s2HFHwyJJkiRJkuoxA6M6rLJHGA1sM5BBHQatb1kVMrz/8Gq9niRJkiRJKpuBUR22au4uLJnUpcx2jXufy5JJV//u/uQG35LR4T+EUMCKmYeyaft9SQpJVVFqicozQkqSJEmSJFWvEGOs6RrKNHDgwDhhwoSaLqPOKmlK2rifxnHLJ7fwr53/RZcmZQdPkiRJkiRpwxFC+CjGOLC4xxxhVM8sy13Gx7M/ZoeOOzC081AGdxxMSpJPA0mSJEmS9KvqnX+kGjV10VSOeO4ITh9/OnOXzwUwLJIkSZIkSb9jYFRPjP9pPIc/dzi/rPyFW3e5lVYNWtV0SZIkSZIkqZZyeEk9cer4U+nTog837nQj7Ru1r+lyJEmSJElSLWZgVE/s130/LtzmQjJSMmq6FEmSJEmSVMsZGNUTl21/GSGEmi5DkiRJkiTVAa5hVE8YFkmSJEmSpPIyMJIkSZIkSVICAyNJkiRJkiQlcA2jOmzUp6MY/dnocrXtN6ZfmW2G9x/OiAEj1rcsSZIkSZJUxznCSJIkSZIkSQlCjLGmayjTwIED44QJE2q6jDqr35h+TDxmYk2XIUmSJEmSapEQwkcxxoHFPeaUtDrMKWmSJEmSJKkqGBjVYavm7sKSSV3KbNe497ksmXR12edr36MyypIkSZIkSXWcU9LqAaekSZIkSZKk3yptSpqLXkuSJEmSJCmBgZEkSZIkSZISGBhJkiRJkiQpgYGRJEmSJEmSEhgYSZIkSZIkKYGBkSRJkiRJkhIYGEmSJEmSJCmBgVE9sGru0JouQZIkSZIk1SFVFhiFEHqGED5d68/iEMLpIYTmIYSxIYQpRV+bVVUNKjS8/4iaLkGSJEmSJNUhVRYYxRi/iTEOiDEOALYAlgNPAOcC42KMPYBxRbdVhc4YtnFNlyBJkiRJkuqQ6pqSNhT4Lsb4I7AfMKbo/jHA/tVUgyRJkiRJksqhugKjw4D/Fn3fJsb4M0DR19bFHRBCOCGEMCGEMGHu3LnVVKYkSZIkSZKqPDAKIaQB+wKPVOS4GOMdMcaBMcaBrVq1qpriJEmSJEmS9DvVMcJoD+DjGOPsotuzQwjtAIq+zqmGGiRJkiRJklRO1REYHc6v09EAngaOKfr+GOCpaqhBkiRJkiRJ5VSlgVEIoQEwDHh8rbuvBoaFEKYUPXZ1VdYgSZIkSZKkikmpypPHGJcDLX5z3y8U7pomSZIkSZKkWqi6dkmTJEmSJElSHWFgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQEBkaSJEmSJElKYGAkSZIkSZKkBAZGkiRJkiRJSmBgJEmSJEmSpAQGRpIkSZIkSUpgYCRJkiRJkqQE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\\n\",\n       \"text/plain\": [\n        \"<Figure size 1440x1080 with 1 Axes>\"\n       ]\n@@ -285,13 +295,13 @@\n     \"fig, ax = plt.subplots()\\n\",\n     \"\\n\",\n     \"json_paths = [\\n\",\n-    \"    './test_accuracy_20220704-1426.json', \\n\",\n-    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1657.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1112.json', \\n\",\n     \"]\\n\",\n     \"\\n\",\n     \"info_dicts = [load_plotinfo_from_file(path) for path in json_paths]\\n\",\n-    \"info_dicts[1].update(load_plotinfo_from_file(\\n\",\n-    \"    \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1556.json\\\"))\\n\",\n+    \"# info_dicts[1].update(load_plotinfo_from_file(\\n\",\n+    \"#     \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1556.json\\\"))\\n\",\n     \"\\n\",\n     \"for info_dict in info_dicts:\\n\",\n     \"    dict_test_accuracies, dict_val_accuracies, guessing_level_percent, title = plotinfo_from_dict(info_dict)\\n\",\n@@ -327,6 +337,14 @@\n    \"metadata\": {},\n    \"outputs\": [],\n    \"source\": []\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"adb233a3-a03e-4656-922f-ce8384dc3ac2\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": []\n   }\n  ],\n  \"metadata\": {\n\n---", "paper/hyperparameter_optimization.ipynb\n=======================================================\nlhs: 100644 | 3b9ea856d14d5aa4939b74a7e86e89a9ae569756\nrhs: 100644 | 60aa995ba3a2e9e5b423ecd6e706b4454daff3de\n---@@ -2,7 +2,7 @@\n  \"cells\": [\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 1,\n+   \"execution_count\": null,\n    \"id\": \"a69a9920-5590-4200-824e-6d685a99b917\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -25,7 +25,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 2,\n+   \"execution_count\": null,\n    \"id\": \"fee74dce-cdcb-4be0-8437-4eaab1a7d590\",\n    \"metadata\": {\n     \"tags\": []\n@@ -94,18 +94,25 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 3,\n+   \"execution_count\": null,\n+   \"id\": \"089eb97b-4ab7-4b98-9454-fc1233287b3d\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"debug=False\\n\",\n+    \"use_new_data=False\\n\",\n+    \"num_test_data_sets = 10\\n\",\n+    \"offset_header_rev1 = -200\\n\",\n+    \"offset_header_rev2 = 200\\n\",\n+    \"offset_header = offset_header_rev2\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n    \"id\": \"50bb7930-54d1-4e34-8d58-c03ace7beb35\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Evaluating datasets: ['7.0cm', '00cm', '1.0cm', '2.0cm', '3.0cm', '4.0cm']\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"# Technical details of your experimental setup\\n\",\n     \"technical_details = {\\n\",\n@@ -118,7 +125,7 @@\n     \"    \\\"do_normalize_data\\\": True,  # Use if data should be normalized to have zero mean and std 1\\n\",\n     \"}\\n\",\n     \"\\n\",\n-    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise\\\"\\n\",\n+    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/\\\"\\n\",\n     \"\\n\",\n     \"# Array of the different distances in cm (folder names) used for the measurement\\n\",\n     \"# position = [dirname for dirname in os.listdir(data_directory) \\n\",\n@@ -131,7 +138,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 4,\n+   \"execution_count\": null,\n    \"id\": \"ee7cba52-820e-4058-a241-93c19f3ae772\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -144,57 +151,18 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 5,\n+   \"execution_count\": null,\n    \"id\": \"af969409-2b19-4c66-a5c6-55badf735280\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(11896, 500), before header:(7992, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"(556864, 500)\\n\",\n-      \"(556864,)\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stderr\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"2022-03-30 11:16:03.135639: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n-      \"To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n-      \"2022-03-30 11:16:03.681481: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43630 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:01:00.0, compute capability: 8.6\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"training_data, training_labels, validation_data, validation_labels = pp.get_datasets(\\n\",\n-    \"    os.path.join(data_directory, position[2]), \\n\",\n-    \"    technical_details, data_augmentation_halflength=3,\\n\",\n+    \"    os.path.join(data_directory, position[0]), \\n\",\n+    \"    technical_details=technical_details,\\n\",\n+    \"    offset_header=offset_header,\\n\",\n+    \"    data_augmentation_halflength=1, \\n\",\n+    \"    debug=debug, \\n\",\n+    \"    force_create_npy_files=use_new_data\\n\",\n     \")\\n\",\n     \"\\n\",\n     \"print(training_data.shape)\\n\",\n@@ -211,57 +179,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 6,\n+   \"execution_count\": null,\n    \"id\": \"db20a227-a4fc-4745-9df5-a5a5ab640d0d\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"INFO:tensorflow:Reloading Oracle from existing project ./hyperparam_tuning_testing_3convs/oracle.json\\n\",\n-      \"Model: \\\"sequential\\\"\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Layer (type)                 Output Shape              Param #   \\n\",\n-      \"=================================================================\\n\",\n-      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d (Conv1D)              (None, 500, 3)            6         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d (MaxPooling1D) (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization (BatchNo (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_1 (Conv1D)            (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_1 (MaxPooling1 (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_1 (Batch (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_2 (Conv1D)            (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_2 (MaxPooling1 (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_2 (Batch (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dropout (Dropout)            (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"flatten (Flatten)            (None, 1500)              0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense (Dense)                (None, 32)                48032     \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense_1 (Dense)              (None, 4)                 132       \\n\",\n-      \"=================================================================\\n\",\n-      \"Total params: 48,230\\n\",\n-      \"Trainable params: 48,212\\n\",\n-      \"Non-trainable params: 18\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"INFO:tensorflow:Reloading Tuner from ./hyperparam_tuning_testing_3convs/tuner0.json\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"#tuner = kt.RandomSearch(\\n\",\n     \"#tuner = kt.BayesianOptimization(\\n\",\n@@ -279,7 +200,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n+   \"execution_count\": null,\n    \"id\": \"87d2e9ca-1749-4d12-bb39-573ae2157753\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -302,104 +223,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 8,\n+   \"execution_count\": null,\n    \"id\": \"36ca9e2d-ef5a-45db-ad7a-83d676246a65\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Model: \\\"sequential\\\"\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Layer (type)                 Output Shape              Param #   \\n\",\n-      \"=================================================================\\n\",\n-      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d (Conv1D)              (None, 498, 13)           52        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d (MaxPooling1D) (None, 249, 13)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization (BatchNo (None, 249, 13)           52        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_1 (Conv1D)            (None, 235, 118)          23128     \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_1 (MaxPooling1 (None, 235, 118)          0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_1 (Batch (None, 235, 118)          472       \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_2 (Conv1D)            (None, 221, 118)          208978    \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_2 (MaxPooling1 (None, 55, 118)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_2 (Batch (None, 55, 118)           472       \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dropout (Dropout)            (None, 55, 118)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"flatten (Flatten)            (None, 6490)              0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense (Dense)                (None, 224)               1453984   \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense_1 (Dense)              (None, 4)                 900       \\n\",\n-      \"=================================================================\\n\",\n-      \"Total params: 1,688,038\\n\",\n-      \"Trainable params: 1,687,540\\n\",\n-      \"Non-trainable params: 498\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Successfully loaded test data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the test data synchronization at 64\\n\",\n-      \"\\n\",\n-      \"prepared test data with shape: (19994, 500)\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stderr\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"2022-03-30 11:16:08.813432: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n-      \"2022-03-30 11:16:09.600153: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n-      \"2022-03-30 11:16:10.578419: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.579219: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.579242: W tensorflow/stream_executor/gpu/asm_compiler.cc:77] Couldn't get ptxas version string: Internal: Couldn't invoke ptxas --version\\n\",\n-      \"2022-03-30 11:16:10.580133: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.580183: W tensorflow/stream_executor/gpu/redzone_allocator.cc:314] Internal: Failed to launch ptxas\\n\",\n-      \"Relying on driver to perform ptx compilation. \\n\",\n-      \"Modify $PATH to customize ptxas location.\\n\",\n-      \"This message will be only logged once.\\n\",\n-      \"2022-03-30 11:16:11.621361: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Confusion matrix:\\n\",\n-      \"H V P M \\n\",\n-      \"[[2458    0    5    2]\\n\",\n-      \" [   3 1906   33  581]\\n\",\n-      \" [   3   40 2404   48]\\n\",\n-      \" [   2  476   34 2004]]\\n\",\n-      \"Test accuracy: 0.8772877287728773\\n\",\n-      \"0.8772877287728773\\n\",\n-      \"Successfully loaded test data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the test data synchronization at 65\\n\",\n-      \"\\n\",\n-      \"prepared test data with shape: (19994, 500)\\n\",\n-      \"Confusion matrix:\\n\",\n-      \"H V P M \\n\",\n-      \"[[2456    1    5    3]\\n\",\n-      \" [   0 1892   31  600]\\n\",\n-      \" [   4   31 2424   36]\\n\",\n-      \" [   1  454   42 2019]]\\n\",\n-      \"Test accuracy: 0.8791879187918792\\n\",\n-      \"0.8791879187918792\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"best_model = tuner.get_best_models(1)[0]\\n\",\n     \"\\n\",\n@@ -423,148 +250,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 9,\n+   \"execution_count\": null,\n    \"id\": \"417d23fc-dcf8-42b9-99ef-6fc7d775c4b3\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 0 samples, test_accuracy=0.8791879187918792. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 1 samples, test_accuracy=0.8807880788078808. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 2 samples, test_accuracy=0.8781878187818782. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 3 samples, test_accuracy=0.8778877887788779. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 4 samples, test_accuracy=0.8735873587358736. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 5 samples, test_accuracy=0.8692869286928693. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 6 samples, test_accuracy=0.8593859385938594. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 7 samples, test_accuracy=0.8510851085108511. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 8 samples, test_accuracy=0.8343834383438344. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 9 samples, test_accuracy=0.8227822782278228. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 10 samples, test_accuracy=0.8014801480148015. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 11 samples, test_accuracy=0.7728772877287728. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 12 samples, test_accuracy=0.7338733873387339. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 13 samples, test_accuracy=0.686068606860686. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 14 samples, test_accuracy=0.6310631063106311. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 15 samples, test_accuracy=0.572957295729573. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 16 samples, test_accuracy=0.5141514151415142. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 17 samples, test_accuracy=0.45854585458545855. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 18 samples, test_accuracy=0.39893989398939894. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 19 samples, test_accuracy=0.2946294629462946. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 20 samples, test_accuracy=0.3029302930293029. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 21 samples, test_accuracy=0.2552255225522552. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 22 samples, test_accuracy=0.26242624262426245. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 23 samples, test_accuracy=0.2585258525852585. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 24 samples, test_accuracy=0.2548254825482548. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 25 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 26 samples, test_accuracy=0.25822582258225824. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 27 samples, test_accuracy=0.2557255725572557. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 28 samples, test_accuracy=0.31683168316831684. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 29 samples, test_accuracy=0.3161316131613161. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 30 samples, test_accuracy=0.3175317531753175. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 31 samples, test_accuracy=0.3181318131813181. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 32 samples, test_accuracy=0.32143214321432145. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 33 samples, test_accuracy=0.3215321532153215. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 34 samples, test_accuracy=0.32323232323232326. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 35 samples, test_accuracy=0.3209320932093209. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 36 samples, test_accuracy=0.26512651265126513. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 37 samples, test_accuracy=0.2672267226722672. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 38 samples, test_accuracy=0.27002700270027. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 39 samples, test_accuracy=0.27542754275427545. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 40 samples, test_accuracy=0.2556255625562556. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 41 samples, test_accuracy=0.2583258325832583. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 42 samples, test_accuracy=0.2621262126212621. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 43 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 44 samples, test_accuracy=0.25682568256825683. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 45 samples, test_accuracy=0.2565256525652565. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 46 samples, test_accuracy=0.2532253225322532. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 47 samples, test_accuracy=0.25842584258425844. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 48 samples, test_accuracy=0.25742574257425743. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 49 samples, test_accuracy=0.25292529252925294. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 50 samples, test_accuracy=0.2625262526252625. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 51 samples, test_accuracy=0.2654265426542654. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 52 samples, test_accuracy=0.2648264826482648. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 53 samples, test_accuracy=0.2542254225422542. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 54 samples, test_accuracy=0.2544254425442544. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 55 samples, test_accuracy=0.25642564256425643. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 56 samples, test_accuracy=0.25882588258825884. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 57 samples, test_accuracy=0.2526252625262526. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 58 samples, test_accuracy=0.25662566256625663. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 59 samples, test_accuracy=0.25072507250725073. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 60 samples, test_accuracy=0.25412541254125415. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 61 samples, test_accuracy=0.25742574257425743. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 62 samples, test_accuracy=0.2518251825182518. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 63 samples, test_accuracy=0.2569256925692569. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 64 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 65 samples, test_accuracy=0.2536253625362536. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 66 samples, test_accuracy=0.28172817281728174. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 67 samples, test_accuracy=0.2796279627962796. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 68 samples, test_accuracy=0.2554255425542554. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 69 samples, test_accuracy=0.2611261126112611. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 70 samples, test_accuracy=0.25272527252725274. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 71 samples, test_accuracy=0.2644264426442644. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 72 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 73 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 74 samples, test_accuracy=0.25512551255125515. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 75 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 76 samples, test_accuracy=0.25252525252525254. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 77 samples, test_accuracy=0.2524252425242524. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 78 samples, test_accuracy=0.25862586258625864. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 79 samples, test_accuracy=0.26572657265726574. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 80 samples, test_accuracy=0.2723272327232723. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 81 samples, test_accuracy=0.28392839283928395. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 82 samples, test_accuracy=0.3013301330133013. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 83 samples, test_accuracy=0.3361336133613361. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 84 samples, test_accuracy=0.39403940394039405. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 85 samples, test_accuracy=0.47024702470247026. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 86 samples, test_accuracy=0.25332533253325334. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 87 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 88 samples, test_accuracy=0.7174717471747175. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 89 samples, test_accuracy=0.7701770177017702. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 90 samples, test_accuracy=0.8061806180618062. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 91 samples, test_accuracy=0.8306830683068307. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 92 samples, test_accuracy=0.8438843884388438. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 93 samples, test_accuracy=0.8577857785778578. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 94 samples, test_accuracy=0.8647864786478647. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 95 samples, test_accuracy=0.866986698669867. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 96 samples, test_accuracy=0.8691869186918691. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 97 samples, test_accuracy=0.876987698769877. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 98 samples, test_accuracy=0.8755875587558756. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 99 samples, test_accuracy=0.8809880988098809. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 100 samples, test_accuracy=0.8791879187918792. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 101 samples, test_accuracy=0.8807880788078808. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 102 samples, test_accuracy=0.8781878187818782. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 103 samples, test_accuracy=0.8778877887788779. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 104 samples, test_accuracy=0.8735873587358736. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 105 samples, test_accuracy=0.8692869286928693. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 106 samples, test_accuracy=0.8593859385938594. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 107 samples, test_accuracy=0.8510851085108511. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 108 samples, test_accuracy=0.8343834383438344. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 109 samples, test_accuracy=0.8227822782278228. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 110 samples, test_accuracy=0.8014801480148015. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 111 samples, test_accuracy=0.7728772877287728. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 112 samples, test_accuracy=0.7338733873387339. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 113 samples, test_accuracy=0.686068606860686. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 114 samples, test_accuracy=0.6310631063106311. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 115 samples, test_accuracy=0.572957295729573. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 116 samples, test_accuracy=0.5141514151415142. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 117 samples, test_accuracy=0.45854585458545855. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 118 samples, test_accuracy=0.39893989398939894. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 119 samples, test_accuracy=0.2946294629462946. BEST Test accuracy after trying all displacements: 0.8810 at displacement 99 \\n\"\n-     ]\n-    },\n-    {\n-     \"data\": {\n-      \"text/plain\": [\n-       \"0.8809880988098809\"\n-      ]\n-     },\n-     \"execution_count\": 9,\n-     \"metadata\": {},\n-     \"output_type\": \"execute_result\"\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"ml.test_model_all_displacements(best_model, test_data, test_labels, technical_details)\"\n    ]\n\n---"]}