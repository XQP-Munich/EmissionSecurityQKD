{"test_accuracies": {"FPGA2.5cm_2": [0.7188172312002802, 0.7046728036822093, 0.7102616700855556, 0.7244709060889578, 0.7236703857507379], "FPGA2.5cm_3": [0.7441837194176214, 0.7397938763257955, 0.7422824836143493, 0.7506379146445189, 0.7443838495021764], "FPGA2.5cm_4": [0.7512883374193225, 0.7487992795677406, 0.751588532546155, 0.757192174913694, 0.7512883374193225], "FPGA2.5cm_5": [0.756992044829139, 0.7553532119271563, 0.759493670886076, 0.7607945164356832, 0.757192174913694], "FPGA2.5cm_6": [0.7610947115625156, 0.7550030018010806, 0.7592435082803822, 0.7659978986341122, 0.7570921098714164], "FPGA2.5cm_7": [0.7650472807324761, 0.753352011206724, 0.7593936058437984, 0.7621954270275679, 0.7636463701405913], "FPGA2.5cm_8": [0.7652974433381698, 0.7620072043225935, 0.7671486466203032, 0.773152549156952, 0.7670986140991645], "FPGA2.5cm_9": [0.7670986140991645, 0.7604062437462478, 0.7704007604943213, 0.7739530694951718, 0.7673487767048581], "FPGA2.5cm_10": [0.7715014759593736, 0.7697618571142686, 0.7730024515935358, 0.774503427227698, 0.7690999149447141], "FPGA2.5cm_11": [0.773552809326062, 0.7676605963578147, 0.775654175213889, 0.7798569069895432, 0.7750537849602241], "FPGA2.5cm_12": [0.7721018662130384, 0.7683109865919552, 0.7725521589032871, 0.7766548256366639, 0.7687496872967429], "FPGA2.5cm_13": [0.7742032321008656, 0.7684610766459876, 0.7751538500025016, 0.7792064842147396, 0.7748536548756692]}, "train_accuracies": {"FPGA2.5cm_2": 0.8198153376579285, "FPGA2.5cm_3": 0.7928698062896729, "FPGA2.5cm_4": 0.8108429908752441, "FPGA2.5cm_5": 0.8109847903251648, "FPGA2.5cm_6": 0.8089784979820251, "FPGA2.5cm_7": 0.8164060115814209, "FPGA2.5cm_8": 0.7956286668777466, "FPGA2.5cm_9": 0.8021577596664429, "FPGA2.5cm_10": 0.7965824604034424, "FPGA2.5cm_11": 0.8052275776863098, "FPGA2.5cm_12": 0.8089292645454407, "FPGA2.5cm_13": 0.8005097508430481}, "validation_accuracies": {"FPGA2.5cm_2": 0.7240206003189087, "FPGA2.5cm_3": 0.7503377199172974, "FPGA2.5cm_4": 0.7612448334693909, "FPGA2.5cm_5": 0.7665482759475708, "FPGA2.5cm_6": 0.7662981152534485, "FPGA2.5cm_7": 0.7744033336639404, "FPGA2.5cm_8": 0.7754040360450745, "FPGA2.5cm_9": 0.7815079689025879, "FPGA2.5cm_10": 0.7820583581924438, "FPGA2.5cm_11": 0.7888127565383911, "FPGA2.5cm_12": 0.7830590009689331, "FPGA2.5cm_13": 0.787712037563324}, "GIT_SHA1_ONSAVING": "d213120d69048907d68ba3f8ee67c014a502990c", "GIT_DIFF_ONSAVING": ["paper/TEMPEST_ATTACK_VARY_TRAINING_DATA.ipynb\n=======================================================\nlhs: 100644 | fcf20b54e56436f0b706fd7f758d1b619c9ec282\nrhs: 100644 | db5ca00e61cac18af9407922d7fca35516d565f0\n---@@ -10,7 +10,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 1,\n    \"id\": \"ca8f60de-7398-49a9-a734-3f19e817e32a\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -43,7 +43,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 2,\n    \"id\": \"e320dcf4-a857-47e0-8de6-99a0ce4eb17e\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -71,7 +71,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 3,\n    \"id\": \"91866f75-1bcb-4089-839f-5b80ca993610\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -122,7 +122,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": null,\n+   \"execution_count\": 4,\n    \"id\": \"d9e4a0d8-97e0-4ac7-b635-b1209cef0bc4\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -187,7 +187,1578 @@\n     },\n     \"tags\": []\n    },\n-   \"outputs\": [],\n+   \"outputs\": [\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Evaluating datasets: ['FPGA2.5cm']\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=2 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"2022-07-05 14:46:08.300077: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n+      \"To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n+      \"2022-07-05 14:46:08.734885: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43614 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:81:00.0, compute capability: 8.6\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"Model: \\\"sequential\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d (Conv1D)              (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d (MaxPooling1D) (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d (SpatialDr (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization (BatchNo (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_1 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_1 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_1 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_1 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_2 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_2 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_2 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_2 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten (Flatten)            (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense (Dense)                (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_1 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stderr\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"2022-07-05 14:46:11.413223: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n+      \"2022-07-05 14:46:12.280858: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n+      \"2022-07-05 14:46:13.745352: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n+     ]\n+    },\n+    {\n+     \"name\": \"stdout\",\n+     \"output_type\": \"stream\",\n+     \"text\": [\n+      \"1094/1094 [==============================] - 14s 10ms/step - loss: 0.8599 - accuracy: 0.6130 - val_loss: 0.7343 - val_accuracy: 0.6729\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.6961 - accuracy: 0.6938 - val_loss: 0.6590 - val_accuracy: 0.7187\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.6500 - accuracy: 0.7156 - val_loss: 0.6482 - val_accuracy: 0.7174\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.6117 - accuracy: 0.7334 - val_loss: 0.6320 - val_accuracy: 0.7265\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.5779 - accuracy: 0.7504 - val_loss: 0.6398 - val_accuracy: 0.7253\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.5360 - accuracy: 0.7718 - val_loss: 0.6414 - val_accuracy: 0.7319\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.4850 - accuracy: 0.7957 - val_loss: 0.6563 - val_accuracy: 0.7338\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"1094/1094 [==============================] - 10s 9ms/step - loss: 0.4333 - accuracy: 0.8198 - val_loss: 0.7034 - val_accuracy: 0.7240\\n\",\n+      \"Epoch 00008: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4685   27   57  185]\\n\",\n+      \" [  19 3061 1114  904]\\n\",\n+      \" [  45 1162 3280  487]\\n\",\n+      \" [ 183  871  566 3341]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8127282733776955\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7738029719317556\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8511032170911093\\n\",\n+      \"Test accuracy: 0.7188172312002802\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4695   40   66  153]\\n\",\n+      \" [  32 3115  907 1045]\\n\",\n+      \" [  48 1502 2829  595]\\n\",\n+      \" [ 190  888  437 3446]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8070842505503302\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7599059435661397\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8423554132479487\\n\",\n+      \"Test accuracy: 0.7046728036822093\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4702   41   47  164]\\n\",\n+      \" [  32 3107  977  982]\\n\",\n+      \" [  43 1332 3000  599]\\n\",\n+      \" [ 211  894  469 3387]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8086256066443188\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7673487767048581\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8445489568219342\\n\",\n+      \"Test accuracy: 0.7102616700855556\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4691   39   58  166]\\n\",\n+      \" [  17 3103 1092  886]\\n\",\n+      \" [  31 1218 3294  431]\\n\",\n+      \" [ 138  864  567 3392]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.816480712463101\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.77720518336919\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8552559163456247\\n\",\n+      \"Test accuracy: 0.7244709060889578\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4710   29   58  157]\\n\",\n+      \" [  36 3075 1035  952]\\n\",\n+      \" [  45 1200 3295  434]\\n\",\n+      \" [ 179  824  574 3384]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8176814929704308\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7773552809326062\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.852303997598439\\n\",\n+      \"Test accuracy: 0.7236703857507379\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=3 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_1\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_1 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_1 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_3 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_3 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_3 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_3 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_4 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_4 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_4 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_4 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_5 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_5 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_5 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_5 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_1 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_2 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_3 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"2187/2187 [==============================] - 22s 9ms/step - loss: 0.7961 - accuracy: 0.6449 - val_loss: 0.6498 - val_accuracy: 0.7158\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.6565 - accuracy: 0.7146 - val_loss: 0.5959 - val_accuracy: 0.7410\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.6104 - accuracy: 0.7378 - val_loss: 0.5815 - val_accuracy: 0.7510\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.5779 - accuracy: 0.7526 - val_loss: 0.5828 - val_accuracy: 0.7509\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.5487 - accuracy: 0.7671 - val_loss: 0.5830 - val_accuracy: 0.7528\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.5208 - accuracy: 0.7794 - val_loss: 0.5940 - val_accuracy: 0.7530\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"2187/2187 [==============================] - 20s 9ms/step - loss: 0.4928 - accuracy: 0.7929 - val_loss: 0.6075 - val_accuracy: 0.7503\\n\",\n+      \"Epoch 00007: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4753   20   42  139]\\n\",\n+      \" [  21 2950 1234  893]\\n\",\n+      \" [  51  868 3633  422]\\n\",\n+      \" [ 152  697  574 3538]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8283884524941212\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.796067443838495\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8639115425026267\\n\",\n+      \"Test accuracy: 0.7441837194176214\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4766   13   48  127]\\n\",\n+      \" [  30 2768 1362  939]\\n\",\n+      \" [  45  841 3693  395]\\n\",\n+      \" [ 159  703  539 3560]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8265959575745447\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7886732039223534\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8643185911546928\\n\",\n+      \"Test accuracy: 0.7397938763257955\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4762   26   32  134]\\n\",\n+      \" [  31 2841 1296  930]\\n\",\n+      \" [  33  814 3674  453]\\n\",\n+      \" [ 156  703  543 3559]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8272377045079301\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7949667283734427\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8623605343473257\\n\",\n+      \"Test accuracy: 0.7422824836143493\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4776   16   39  123]\\n\",\n+      \" [  21 3042 1191  844]\\n\",\n+      \" [  26  846 3697  405]\\n\",\n+      \" [ 149  734  590 3488]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8328413468754691\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8022714764596988\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.86616300595387\\n\",\n+      \"Test accuracy: 0.7506379146445189\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4756   21   45  132]\\n\",\n+      \" [  38 2915 1146  999]\\n\",\n+      \" [  36  878 3655  405]\\n\",\n+      \" [ 160  672  577 3552]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8320408265372492\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7964677040076049\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8602591684594987\\n\",\n+      \"Test accuracy: 0.7443838495021764\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=4 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_2\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_2 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_2 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_6 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_6 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_6 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_6 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_7 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_7 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_7 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_7 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_8 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_8 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_8 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_8 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_2 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_4 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_5 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"3280/3280 [==============================] - 32s 9ms/step - loss: 0.7340 - accuracy: 0.6757 - val_loss: 0.6034 - val_accuracy: 0.7412\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.6215 - accuracy: 0.7312 - val_loss: 0.5750 - val_accuracy: 0.7537\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.5870 - accuracy: 0.7470 - val_loss: 0.5628 - val_accuracy: 0.7590\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.5647 - accuracy: 0.7583 - val_loss: 0.5625 - val_accuracy: 0.7614\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.5397 - accuracy: 0.7698 - val_loss: 0.5570 - val_accuracy: 0.7646\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.5171 - accuracy: 0.7804 - val_loss: 0.5657 - val_accuracy: 0.7650\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.4943 - accuracy: 0.7911 - val_loss: 0.5759 - val_accuracy: 0.7645\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.4738 - accuracy: 0.8002 - val_loss: 0.5941 - val_accuracy: 0.7616\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"3280/3280 [==============================] - 30s 9ms/step - loss: 0.4517 - accuracy: 0.8108 - val_loss: 0.6094 - val_accuracy: 0.7612\\n\",\n+      \"Epoch 00009: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4786   14   28  126]\\n\",\n+      \" [  24 2964 1174  936]\\n\",\n+      \" [  49  836 3599  490]\\n\",\n+      \" [ 165  677  452 3667]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8358432981437934\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8003202081352879\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8664131685595637\\n\",\n+      \"Test accuracy: 0.7512883374193225\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4800   13   38  103]\\n\",\n+      \" [  31 2939 1171  958]\\n\",\n+      \" [  48  891 3598  437]\\n\",\n+      \" [ 190  696  445 3630]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.835851510906544\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7951270762457474\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.86661997198319\\n\",\n+      \"Test accuracy: 0.7487992795677406\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4810   12   32  100]\\n\",\n+      \" [  28 2963 1204  903]\\n\",\n+      \" [  47  854 3577  496]\\n\",\n+      \" [ 196  617  476 3672]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8315905338470005\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8022214439385601\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8693650873067494\\n\",\n+      \"Test accuracy: 0.751588532546155\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4809   15   25  105]\\n\",\n+      \" [  23 3071 1105  899]\\n\",\n+      \" [  47  845 3605  477]\\n\",\n+      \" [ 178  637  497 3649]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8376444689047882\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.807825086306099\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8689147946165007\\n\",\n+      \"Test accuracy: 0.757192174913694\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4832    9   26   87]\\n\",\n+      \" [  34 2933 1136  995]\\n\",\n+      \" [  56  858 3620  440]\\n\",\n+      \" [ 181  661  488 3631]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.838244859158453\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7998699154450393\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8644619002351529\\n\",\n+      \"Test accuracy: 0.7512883374193225\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=5 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_3\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_3 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_3 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_9 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_9 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_9 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_9 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_10 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_10 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_10 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_10 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_11 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_11 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_11 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_11 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_3 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_6 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_7 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"4373/4373 [==============================] - 42s 9ms/step - loss: 0.7157 - accuracy: 0.6853 - val_loss: 0.5844 - val_accuracy: 0.7488\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.6076 - accuracy: 0.7389 - val_loss: 0.5525 - val_accuracy: 0.7626\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.5774 - accuracy: 0.7519 - val_loss: 0.5497 - val_accuracy: 0.7643\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"4373/4373 [==============================] - 39s 9ms/step - loss: 0.5529 - accuracy: 0.7635 - val_loss: 0.5425 - val_accuracy: 0.7672\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.5315 - accuracy: 0.7739 - val_loss: 0.5378 - val_accuracy: 0.7694\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.5101 - accuracy: 0.7837 - val_loss: 0.5469 - val_accuracy: 0.7686\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.4911 - accuracy: 0.7924 - val_loss: 0.5545 - val_accuracy: 0.7692\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.4702 - accuracy: 0.8018 - val_loss: 0.5735 - val_accuracy: 0.7633\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"4373/4373 [==============================] - 40s 9ms/step - loss: 0.4515 - accuracy: 0.8110 - val_loss: 0.5753 - val_accuracy: 0.7665\\n\",\n+      \"Epoch 00009: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4765   26   31  132]\\n\",\n+      \" [  12 3260  932  894]\\n\",\n+      \" [  25 1113 3337  499]\\n\",\n+      \" [ 130  704  359 3768]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8397458347926152\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8018211837694501\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8724170710962126\\n\",\n+      \"Test accuracy: 0.756992044829139\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4794   21   33  106]\\n\",\n+      \" [  21 3280  911  887]\\n\",\n+      \" [  28 1138 3310  498]\\n\",\n+      \" [ 138  764  345 3714]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.841004602761657\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7996297778667201\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8700720432259356\\n\",\n+      \"Test accuracy: 0.7553532119271563\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4772   27   30  125]\\n\",\n+      \" [  22 3297  957  822]\\n\",\n+      \" [  33 1065 3368  508]\\n\",\n+      \" [ 149  741  328 3743]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8408465502576675\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8037724520938611\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8743683394206234\\n\",\n+      \"Test accuracy: 0.759493670886076\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4791   20   17  126]\\n\",\n+      \" [  11 3400  846  841]\\n\",\n+      \" [  22 1160 3328  464]\\n\",\n+      \" [ 112  798  364 3687]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8447490869064892\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8037724520938611\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8730674938710161\\n\",\n+      \"Test accuracy: 0.7607945164356832\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4775   22   35  122]\\n\",\n+      \" [  20 3316  829  933]\\n\",\n+      \" [  41 1130 3334  469]\\n\",\n+      \" [ 130  773  349 3709]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8463501275829289\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8002201430930105\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8678140791514485\\n\",\n+      \"Test accuracy: 0.757192174913694\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=6 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_4\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_4 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_4 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_12 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_12 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_12 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_12 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_13 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_13 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_13 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_13 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_14 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_14 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_14 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_14 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_4 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_8 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_9 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"5466/5466 [==============================] - 52s 9ms/step - loss: 0.7303 - accuracy: 0.6782 - val_loss: 0.5928 - val_accuracy: 0.7458\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.6141 - accuracy: 0.7352 - val_loss: 0.5596 - val_accuracy: 0.7600\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.5848 - accuracy: 0.7481 - val_loss: 0.5471 - val_accuracy: 0.7689\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.5597 - accuracy: 0.7604 - val_loss: 0.5418 - val_accuracy: 0.7706\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.5388 - accuracy: 0.7704 - val_loss: 0.5436 - val_accuracy: 0.7709\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.5197 - accuracy: 0.7794 - val_loss: 0.5382 - val_accuracy: 0.7726\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.5036 - accuracy: 0.7869 - val_loss: 0.5421 - val_accuracy: 0.7723\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.4887 - accuracy: 0.7940 - val_loss: 0.5487 - val_accuracy: 0.7688\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.4724 - accuracy: 0.8013 - val_loss: 0.5511 - val_accuracy: 0.7703\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"5466/5466 [==============================] - 49s 9ms/step - loss: 0.4561 - accuracy: 0.8090 - val_loss: 0.5661 - val_accuracy: 0.7663\\n\",\n+      \"Epoch 00010: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4783    8   37  126]\\n\",\n+      \" [  12 2844 1370  872]\\n\",\n+      \" [  29  683 3842  420]\\n\",\n+      \" [ 130  566  522 3743]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8363436233551809\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8092259968979837\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8766198028718667\\n\",\n+      \"Test accuracy: 0.7610947115625156\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4808   15   38   93]\\n\",\n+      \" [  23 2811 1395  870]\\n\",\n+      \" [  32  748 3792  402]\\n\",\n+      \" [ 154  646  481 3680]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8343506103662197\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8010806483890334\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8745747448469081\\n\",\n+      \"Test accuracy: 0.7550030018010806\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4796   15   38  105]\\n\",\n+      \" [  19 2857 1399  823]\\n\",\n+      \" [  33  680 3844  417]\\n\",\n+      \" [ 161  615  507 3678]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8347425826787411\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8071746635312953\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.876569770350728\\n\",\n+      \"Test accuracy: 0.7592435082803822\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4794   17   27  116]\\n\",\n+      \" [  11 2969 1319  799]\\n\",\n+      \" [  29  711 3854  380]\\n\",\n+      \" [ 126  602  540 3693]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8388952819332566\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8134287286736379\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8796717866613298\\n\",\n+      \"Test accuracy: 0.7659978986341122\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4786   15   33  120]\\n\",\n+      \" [  21 2789 1326  962]\\n\",\n+      \" [  34  743 3846  351]\\n\",\n+      \" [ 130  578  542 3711]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.837494371341372\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8035723220093061\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8731175263921549\\n\",\n+      \"Test accuracy: 0.7570921098714164\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=7 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_5\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_5 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_5 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_15 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_15 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_15 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_15 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_16 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_16 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_16 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_16 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_17 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_17 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_17 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_17 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_5 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_10 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_11 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.7042 - accuracy: 0.6908 - val_loss: 0.5795 - val_accuracy: 0.7529\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.6098 - accuracy: 0.7370 - val_loss: 0.5552 - val_accuracy: 0.7612\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5781 - accuracy: 0.7525 - val_loss: 0.5442 - val_accuracy: 0.7678\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5579 - accuracy: 0.7619 - val_loss: 0.5375 - val_accuracy: 0.7713\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5413 - accuracy: 0.7696 - val_loss: 0.5359 - val_accuracy: 0.7723\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5267 - accuracy: 0.7764 - val_loss: 0.5394 - val_accuracy: 0.7717\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"6559/6559 [==============================] - 56s 9ms/step - loss: 0.5125 - accuracy: 0.7833 - val_loss: 0.5369 - val_accuracy: 0.7734\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"6559/6559 [==============================] - 56s 9ms/step - loss: 0.4983 - accuracy: 0.7897 - val_loss: 0.5351 - val_accuracy: 0.7751\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"6559/6559 [==============================] - 56s 9ms/step - loss: 0.4848 - accuracy: 0.7960 - val_loss: 0.5433 - val_accuracy: 0.7725\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"6559/6559 [==============================] - 56s 9ms/step - loss: 0.4709 - accuracy: 0.8028 - val_loss: 0.5517 - val_accuracy: 0.7746\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"6559/6559 [==============================] - 56s 9ms/step - loss: 0.4551 - accuracy: 0.8099 - val_loss: 0.5537 - val_accuracy: 0.7773\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"6559/6559 [==============================] - 58s 9ms/step - loss: 0.4409 - accuracy: 0.8164 - val_loss: 0.5618 - val_accuracy: 0.7744\\n\",\n+      \"Epoch 00012: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4791   13   27  123]\\n\",\n+      \" [   8 3134 1111  845]\\n\",\n+      \" [  27  912 3606  429]\\n\",\n+      \" [ 102  618  481 3760]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.840946615299945\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8116275579126432\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.877520388252364\\n\",\n+      \"Test accuracy: 0.7650472807324761\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4736   19   52  147]\\n\",\n+      \" [  13 3045 1114  927]\\n\",\n+      \" [  25  963 3551  435]\\n\",\n+      \" [  97  694  444 3726]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8383029817890735\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7989293576145687\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8694716830098059\\n\",\n+      \"Test accuracy: 0.753352011206724\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4765   19   43  127]\\n\",\n+      \" [  14 3098 1127  859]\\n\",\n+      \" [  21  938 3600  415]\\n\",\n+      \" [ 133  659  454 3715]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8385450542852855\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8045229399109421\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8757192174913694\\n\",\n+      \"Test accuracy: 0.7593936058437984\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4784   18   22  130]\\n\",\n+      \" [  11 3185 1055  847]\\n\",\n+      \" [  23 1014 3561  376]\\n\",\n+      \" [ 100  689  468 3704]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8412968429479162\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8058738179816881\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8772201931255316\\n\",\n+      \"Test accuracy: 0.7621954270275679\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4792   11   25  126]\\n\",\n+      \" [  11 3097 1025  965]\\n\",\n+      \" [  29  925 3647  373]\\n\",\n+      \" [ 122  625  487 3727]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8458998348926803\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8077750537849602\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8736178516035423\\n\",\n+      \"Test accuracy: 0.7636463701405913\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=8 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_6\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_6 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_6 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_18 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_18 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_18 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_18 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_19 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_19 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_19 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_19 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_20 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_20 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_20 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_20 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_6 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_12 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_13 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"7652/7652 [==============================] - 72s 9ms/step - loss: 0.6980 - accuracy: 0.6951 - val_loss: 0.5809 - val_accuracy: 0.7516\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.6047 - accuracy: 0.7408 - val_loss: 0.5472 - val_accuracy: 0.7650\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.5719 - accuracy: 0.7562 - val_loss: 0.5342 - val_accuracy: 0.7736\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.5506 - accuracy: 0.7663 - val_loss: 0.5363 - val_accuracy: 0.7729\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.5352 - accuracy: 0.7732 - val_loss: 0.5288 - val_accuracy: 0.7745\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.5228 - accuracy: 0.7785 - val_loss: 0.5291 - val_accuracy: 0.7767\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.5102 - accuracy: 0.7843 - val_loss: 0.5377 - val_accuracy: 0.7719\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.4980 - accuracy: 0.7903 - val_loss: 0.5360 - val_accuracy: 0.7743\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"7652/7652 [==============================] - 69s 9ms/step - loss: 0.4857 - accuracy: 0.7956 - val_loss: 0.5373 - val_accuracy: 0.7754\\n\",\n+      \"Epoch 00009: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4789   11   32  122]\\n\",\n+      \" [  12 2967 1256  863]\\n\",\n+      \" [  37  754 3760  423]\\n\",\n+      \" [ 126  565  490 3780]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8401961274828639\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8121278831240306\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8782708760694451\\n\",\n+      \"Test accuracy: 0.7652974433381698\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4779   13   43  119]\\n\",\n+      \" [  13 2960 1226  900]\\n\",\n+      \" [  26  862 3692  394]\\n\",\n+      \" [ 118  629  414 3800]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8419551731038624\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8037322393436062\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8783269961977186\\n\",\n+      \"Test accuracy: 0.7620072043225935\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4789    9   38  118]\\n\",\n+      \" [  16 3010 1227  845]\\n\",\n+      \" [  20  774 3749  431]\\n\",\n+      \" [ 134  602  440 3785]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8424475909341071\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8119777855606144\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8798719167458848\\n\",\n+      \"Test accuracy: 0.7671486466203032\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4805   14   22  113]\\n\",\n+      \" [  11 3045 1198  844]\\n\",\n+      \" [  18  773 3826  357]\\n\",\n+      \" [ 106  617  461 3777]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.848251363386201\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.81532996447691\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.882723770450793\\n\",\n+      \"Test accuracy: 0.773152549156952\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4792   10   24  128]\\n\",\n+      \" [   9 2961 1152  976]\\n\",\n+      \" [  25  774 3802  373]\\n\",\n+      \" [ 113  598  473 3777]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8483013959073398\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8103767448841747\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8755190874068144\\n\",\n+      \"Test accuracy: 0.7670986140991645\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=9 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_7\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_7 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_7 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_21 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_21 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_21 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_21 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_22 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_22 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_22 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_22 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_23 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_23 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_23 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_23 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_7 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_14 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_15 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"8745/8745 [==============================] - 82s 9ms/step - loss: 0.6854 - accuracy: 0.6988 - val_loss: 0.5893 - val_accuracy: 0.7468\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5979 - accuracy: 0.7421 - val_loss: 0.5535 - val_accuracy: 0.7629\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"8745/8745 [==============================] - 78s 9ms/step - loss: 0.5729 - accuracy: 0.7539 - val_loss: 0.5379 - val_accuracy: 0.7706\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5569 - accuracy: 0.7613 - val_loss: 0.5315 - val_accuracy: 0.7724\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5420 - accuracy: 0.7687 - val_loss: 0.5266 - val_accuracy: 0.7752\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5293 - accuracy: 0.7748 - val_loss: 0.5211 - val_accuracy: 0.7769\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5172 - accuracy: 0.7808 - val_loss: 0.5193 - val_accuracy: 0.7802\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.5051 - accuracy: 0.7865 - val_loss: 0.5232 - val_accuracy: 0.7796\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.4939 - accuracy: 0.7919 - val_loss: 0.5228 - val_accuracy: 0.7804\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.4820 - accuracy: 0.7971 - val_loss: 0.5300 - val_accuracy: 0.7781\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"8745/8745 [==============================] - 79s 9ms/step - loss: 0.4720 - accuracy: 0.8022 - val_loss: 0.5282 - val_accuracy: 0.7815\\n\",\n+      \"Epoch 00011: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4797   13   38  106]\\n\",\n+      \" [  14 2912 1301  871]\\n\",\n+      \" [  28  673 3855  418]\\n\",\n+      \" [ 121  593  479 3768]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8436483714414369\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8133286636313604\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8772201931255316\\n\",\n+      \"Test accuracy: 0.7670986140991645\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4784   13   40  117]\\n\",\n+      \" [  14 2892 1332  861]\\n\",\n+      \" [  29  771 3787  387]\\n\",\n+      \" [ 122  663  440 3736]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8401040624374625\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8031318791274765\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8775765459275565\\n\",\n+      \"Test accuracy: 0.7604062437462478\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4821   18   24   91]\\n\",\n+      \" [  18 3000 1287  793]\\n\",\n+      \" [  37  687 3833  417]\\n\",\n+      \" [ 137  623  457 3744]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8442987942162405\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8159303547305748\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8805723720418271\\n\",\n+      \"Test accuracy: 0.7704007604943213\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4814   18   22  100]\\n\",\n+      \" [  14 3044 1249  791]\\n\",\n+      \" [  28  705 3863  378]\\n\",\n+      \" [ 116  630  467 3748]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8475509080902587\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.817831590533847\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8825236403662381\\n\",\n+      \"Test accuracy: 0.7739530694951718\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4816   13   26   99]\\n\",\n+      \" [  16 2882 1237  963]\\n\",\n+      \" [  25  689 3907  353]\\n\",\n+      \" [ 131  618  480 3732]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8490018512032821\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8104768099264522\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.875218892279982\\n\",\n+      \"Test accuracy: 0.7673487767048581\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=10 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Model: \\\"sequential_8\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_8 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_8 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_24 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_24 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_24 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_24 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_25 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_25 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_25 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_25 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_26 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_26 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_26 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_26 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_8 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_16 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_17 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"9838/9838 [==============================] - 92s 9ms/step - loss: 0.6720 - accuracy: 0.7078 - val_loss: 0.5635 - val_accuracy: 0.7574\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"9838/9838 [==============================] - 88s 9ms/step - loss: 0.5875 - accuracy: 0.7486 - val_loss: 0.5322 - val_accuracy: 0.7718\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"9838/9838 [==============================] - 88s 9ms/step - loss: 0.5655 - accuracy: 0.7591 - val_loss: 0.5236 - val_accuracy: 0.7761\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.5501 - accuracy: 0.7657 - val_loss: 0.5205 - val_accuracy: 0.7786\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.5373 - accuracy: 0.7717 - val_loss: 0.5172 - val_accuracy: 0.7794\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.5250 - accuracy: 0.7771 - val_loss: 0.5165 - val_accuracy: 0.7790\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.5134 - accuracy: 0.7826 - val_loss: 0.5191 - val_accuracy: 0.7814\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.5025 - accuracy: 0.7879 - val_loss: 0.5193 - val_accuracy: 0.7808\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.4921 - accuracy: 0.7923 - val_loss: 0.5234 - val_accuracy: 0.7825\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"9838/9838 [==============================] - 89s 9ms/step - loss: 0.4828 - accuracy: 0.7966 - val_loss: 0.5229 - val_accuracy: 0.7821\\n\",\n+      \"Epoch 00010: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4777   15   20  142]\\n\",\n+      \" [  10 3114 1035  939]\\n\",\n+      \" [  28  883 3571  492]\\n\",\n+      \" [ 106  559  338 3958]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8488517536398659\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8142792815329964\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8798719167458848\\n\",\n+      \"Test accuracy: 0.7715014759593736\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4813   11   28  102]\\n\",\n+      \" [  11 3052 1053  983]\\n\",\n+      \" [  25  902 3584  463]\\n\",\n+      \" [ 128  586  310 3937]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8509105463277967\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8095357214328597\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8790774464678808\\n\",\n+      \"Test accuracy: 0.7697618571142686\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4809   11   15  119]\\n\",\n+      \" [  13 3154 1026  905]\\n\",\n+      \" [  25  846 3581  522]\\n\",\n+      \" [ 143  589  323 3906]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8497523390203633\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.816480712463101\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8797718517036074\\n\",\n+      \"Test accuracy: 0.7730024515935358\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4805   14   19  116]\\n\",\n+      \" [   9 3179  990  920]\\n\",\n+      \" [  29  889 3613  443]\\n\",\n+      \" [ 112  625  341 3883]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8542052334017111\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8148796717866613\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8799219492670236\\n\",\n+      \"Test accuracy: 0.774503427227698\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4799    8   22  125]\\n\",\n+      \" [  18 3081  981 1018]\\n\",\n+      \" [  33  861 3612  468]\\n\",\n+      \" [ 120  585  376 3880]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8520538349927452\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.812628208335418\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8735177865612648\\n\",\n+      \"Test accuracy: 0.7690999149447141\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=11 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Model: \\\"sequential_9\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_9 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_9 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_27 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_27 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_27 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_27 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_28 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_28 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_28 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_28 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_29 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_29 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_29 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_29 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_9 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_18 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_19 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"10931/10931 [==============================] - 102s 9ms/step - loss: 0.6615 - accuracy: 0.7120 - val_loss: 0.5538 - val_accuracy: 0.7642\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"10931/10931 [==============================] - 98s 9ms/step - loss: 0.5772 - accuracy: 0.7524 - val_loss: 0.5303 - val_accuracy: 0.7728\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.5531 - accuracy: 0.7639 - val_loss: 0.5210 - val_accuracy: 0.7786\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.5374 - accuracy: 0.7708 - val_loss: 0.5144 - val_accuracy: 0.7810\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"10931/10931 [==============================] - 98s 9ms/step - loss: 0.5227 - accuracy: 0.7782 - val_loss: 0.5062 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.5085 - accuracy: 0.7847 - val_loss: 0.5041 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.4966 - accuracy: 0.7904 - val_loss: 0.5061 - val_accuracy: 0.7844\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"10931/10931 [==============================] - 98s 9ms/step - loss: 0.4851 - accuracy: 0.7956 - val_loss: 0.5130 - val_accuracy: 0.7859\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.4743 - accuracy: 0.8003 - val_loss: 0.5132 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"10931/10931 [==============================] - 99s 9ms/step - loss: 0.4643 - accuracy: 0.8052 - val_loss: 0.5142 - val_accuracy: 0.7888\\n\",\n+      \"Epoch 00010: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4797   14   28  115]\\n\",\n+      \" [  10 3208 1073  807]\\n\",\n+      \" [  27  903 3607  437]\\n\",\n+      \" [ 118  625  369 3849]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8479511682593686\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8150798018712163\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.884074648521539\\n\",\n+      \"Test accuracy: 0.773552809326062\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5992, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4807    6   29  112]\\n\",\n+      \" [  15 3154 1053  877]\\n\",\n+      \" [  34  983 3527  430]\\n\",\n+      \" [ 121  645  339 3856]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.846958174904943\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8071843105863518\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8811787072243346\\n\",\n+      \"Test accuracy: 0.7676605963578147\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4810    9   22  113]\\n\",\n+      \" [  13 3257 1076  752]\\n\",\n+      \" [  31  907 3578  458]\\n\",\n+      \" [ 121  606  376 3858]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8462500625406514\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8184820133086507\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.886576274578476\\n\",\n+      \"Test accuracy: 0.775654175213889\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4816   16   13  109]\\n\",\n+      \" [   8 3297  999  794]\\n\",\n+      \" [  25  882 3646  421]\\n\",\n+      \" [ 110  654  369 3828]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8542052334017111\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8205833791964777\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8849252013808976\\n\",\n+      \"Test accuracy: 0.7798569069895432\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4810   12   20  112]\\n\",\n+      \" [  16 3181 1017  884]\\n\",\n+      \" [  24  890 3673  387]\\n\",\n+      \" [ 105  641  388 3827]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8535548106269075\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8152298994346325\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8813228598589082\\n\",\n+      \"Test accuracy: 0.7750537849602241\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json\\n\",\n+      \"------------- dataset 0: FPGA2.5cm with max_train_files=12 ----------------------------------\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(13996, 500), before header:(5991, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97972, 500), before header:(41940, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/FPGA2.5cm\\n\",\n+      \"Cut data in pieces with these shapes: after header:(97971, 500), before header:(41941, 500)\\n\",\n+      \"Model: \\\"sequential_10\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_10 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_10 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_30 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_30 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_30 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_30 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_31 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_31 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_31 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_31 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_32 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_32 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_32 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_32 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_10 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_20 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_21 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/15\\n\",\n+      \"12024/12024 [==============================] - 112s 9ms/step - loss: 0.6727 - accuracy: 0.7074 - val_loss: 0.5664 - val_accuracy: 0.7563\\n\",\n+      \"Epoch 2/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.5915 - accuracy: 0.7457 - val_loss: 0.5463 - val_accuracy: 0.7650\\n\",\n+      \"Epoch 3/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.5692 - accuracy: 0.7564 - val_loss: 0.5331 - val_accuracy: 0.7717\\n\",\n+      \"Epoch 4/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.5531 - accuracy: 0.7640 - val_loss: 0.5204 - val_accuracy: 0.7761\\n\",\n+      \"Epoch 5/15\\n\",\n+      \"12024/12024 [==============================] - 107s 9ms/step - loss: 0.5400 - accuracy: 0.7703 - val_loss: 0.5185 - val_accuracy: 0.7774\\n\",\n+      \"Epoch 6/15\\n\",\n+      \"12024/12024 [==============================] - 107s 9ms/step - loss: 0.5262 - accuracy: 0.7767 - val_loss: 0.5099 - val_accuracy: 0.7829\\n\",\n+      \"Epoch 7/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.5142 - accuracy: 0.7823 - val_loss: 0.5087 - val_accuracy: 0.7857\\n\",\n+      \"Epoch 8/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.5032 - accuracy: 0.7875 - val_loss: 0.5076 - val_accuracy: 0.7847\\n\",\n+      \"Epoch 9/15\\n\",\n+      \"12024/12024 [==============================] - 107s 9ms/step - loss: 0.4921 - accuracy: 0.7926 - val_loss: 0.5059 - val_accuracy: 0.7859\\n\",\n+      \"Epoch 10/15\\n\",\n+      \"12024/12024 [==============================] - 107s 9ms/step - loss: 0.4818 - accuracy: 0.7971 - val_loss: 0.5125 - val_accuracy: 0.7863\\n\",\n+      \"Epoch 11/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.4737 - accuracy: 0.8009 - val_loss: 0.5128 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 12/15\\n\",\n+      \"12024/12024 [==============================] - 108s 9ms/step - loss: 0.4648 - accuracy: 0.8048 - val_loss: 0.5162 - val_accuracy: 0.7842\\n\",\n+      \"Epoch 13/15\\n\",\n+      \"   61/12024 [..............................] - ETA: 1:42 - loss: 0.4731 - accuracy: 0.8016\"\n+     ]\n+    }\n+   ],\n    \"source\": [\n     \"git_sha1, git_diff = get_repo_sha1_and_diff(search_parent_directories=True)\\n\",\n     \"result_file_path = os.path.join(data_directory, f\\\"result_vary_raining_data_{datetime.datetime.now().strftime('%Y%m%d-%H%M')}.json\\\")\\n\",\n\n---", "paper/Visualize_Results_Vary_Train_Data.ipynb\n=======================================================\nlhs: 100644 | a3ce525c3ab66b8f0970469f61a271da4dd5d9bc\nrhs: 100644 | f09c4c20917bfabfb44bfac8c37c014d8a04163a\n---@@ -2,7 +2,7 @@\n  \"cells\": [\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 2,\n+   \"execution_count\": 1,\n    \"id\": \"63bbe8e3-4d50-4240-b473-a7ad8dfad902\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -21,7 +21,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 3,\n+   \"execution_count\": 2,\n    \"id\": \"6d344711-3707-40af-9763-afd5e0f7bf17\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -86,7 +86,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 4,\n+   \"execution_count\": 3,\n    \"id\": \"ca1fe49b-f77b-4422-a172-7eb144577936\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -100,7 +100,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 12,\n+   \"execution_count\": 4,\n    \"id\": \"3ad46a0a-51fb-411f-a8da-cc6efed3ea36\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -129,7 +129,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 13,\n+   \"execution_count\": 5,\n    \"id\": \"301626aa-b0b7-46a7-861c-6144a1d446e8\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -212,7 +212,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n+   \"execution_count\": 10,\n    \"id\": \"9b1c2ac3-dce9-449f-a4c5-cc3f4dab0e72\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -221,55 +221,56 @@\n      \"output_type\": \"stream\",\n      \"text\": [\n       \"Warning. Failed to interpret n_classes from json file! Set to default.\\n\",\n+      \"distance=array([2., 3., 4., 5., 6., 7.]), accuracy=array([[71.88172312, 70.46728037, 71.02616701, 72.44709061, 72.36703858],\\n\",\n+      \"       [74.41837194, 73.97938763, 74.22824836, 75.06379146, 74.43838495],\\n\",\n+      \"       [75.12883374, 74.87992796, 75.15885325, 75.71921749, 75.12883374],\\n\",\n+      \"       [75.69920448, 75.53532119, 75.94936709, 76.07945164, 75.71921749],\\n\",\n+      \"       [76.10947116, 75.50030018, 75.92435083, 76.59978986, 75.70921099],\\n\",\n+      \"       [76.50472807, 75.33520112, 75.93936058, 76.2195427 , 76.36463701]])\\n\",\n+      \"distance=array([2., 3., 4., 5., 6., 7.]), accuracy=array([72.40206003, 75.03377199, 76.12448335, 76.65482759, 76.62981153,\\n\",\n+      \"       77.44033337])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([[54.37534397, 52.61156694, 53.84499925, 54.60049032, 54.68054235],\\n\",\n-      \"       [55.57612448, 55.65339204, 56.00140091, 56.41667084, 55.56611798],\\n\",\n-      \"       [55.96637815, 55.47328397, 56.67183669, 55.94136189, 56.10146595],\\n\",\n-      \"       [56.95201881, 56.91915149, 57.65247411, 57.59243508, 57.5073798 ],\\n\",\n-      \"       [57.58242858, 57.32939764, 57.94266273, 58.14779607, 58.12277981],\\n\",\n-      \"       [58.1127733 , 58.0648389 , 58.46300095, 58.87326762, 58.81823185],\\n\",\n-      \"       [58.91329364, 58.8903342 , 59.44363836, 59.08340421, 59.31355381],\\n\",\n-      \"       [58.76819933, 59.02541525, 59.82888878, 58.70315705, 59.53870016],\\n\",\n-      \"       [59.01335868, 58.69521713, 59.35357983, 58.99334567, 59.29854405],\\n\",\n-      \"       [58.63811477, 58.92035221, 59.773853  , 58.80322209, 59.4186221 ],\\n\",\n-      \"       [59.59873918, 59.38062838, 59.90393756, 59.78385951, 59.54370341],\\n\",\n-      \"       [59.35858308, 59.08545127, 59.56871967, 59.13843999, 59.25351478],\\n\",\n-      \"       [59.20848552, 58.6151691 , 60.17911643, 60.02901886, 60.05403512],\\n\",\n-      \"       [59.56371642, 59.4506704 , 60.25916846, 59.93395707, 60.14409366]])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([55.3309679 , 56.76689744, 57.81758428, 59.02836919, 59.3685925 ,\\n\",\n-      \"       60.0990653 , 60.63941717, 60.98464131, 61.11472249, 61.35488153,\\n\",\n-      \"       62.05533743, 62.20043302, 61.92525029, 62.46560216])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([[52.26897483, 50.94056434, 51.85370491, 52.15390004, 51.88372442],\\n\",\n-      \"       [51.63856507, 50.51030618, 51.36838945, 51.27833092, 51.46345124],\\n\",\n-      \"       [52.67924151, 51.96117671, 52.52914394, 52.74428378, 52.66423175],\\n\",\n-      \"       [52.75429029, 52.87172303, 53.29464152, 52.75929354, 52.57917646],\\n\",\n-      \"       [55.71121229, 54.94296578, 55.43103017, 55.85130335, 56.15650173],\\n\",\n-      \"       [56.07644969, 56.20872524, 56.73187572, 56.23155051, 56.27657978],\\n\",\n-      \"       [55.65617651, 55.13307985, 55.68619603, 55.53109521, 55.68619603],\\n\",\n-      \"       [56.62680742, 56.26876126, 56.98704158, 57.01706109, 57.18216841],\\n\",\n-      \"       [56.2115375 , 55.62337402, 56.44669035, 56.46170011, 56.52173913],\\n\",\n-      \"       [56.59678791, 56.29877927, 56.74688548, 56.63181068, 56.67683995],\\n\",\n-      \"       [56.52674238, 55.563338  , 56.32160905, 56.37664482, 56.46670336],\\n\",\n-      \"       [56.39665783, 56.58895337, 56.27157652, 56.38665132, 56.47170661],\\n\",\n-      \"       [57.48736679, 56.24374625, 57.34227248, 57.51238305, 57.51238305],\\n\",\n-      \"       [56.8069245 , 56.18371023, 56.72687247, 57.07710012, 56.76689848],\\n\",\n-      \"       [57.32225947, 57.70462277, 58.20783509, 57.71751639, 58.36293591],\\n\",\n-      \"       [58.19782859, 57.86471883, 58.60309201, 58.38795217, 58.75819283],\\n\",\n-      \"       [58.3529294 , 57.93476086, 58.37294241, 58.583079  , 58.78320909],\\n\",\n-      \"       [58.15780257, 57.79967981, 58.79821884, 58.65812778, 58.77820583],\\n\",\n-      \"       [58.78821234, 58.20992596, 59.20348226, 58.92330015, 58.96332616]])\\n\",\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([[71.06619303, 70.53231939, 70.59588733, 71.12623205, 70.6409166 ],\\n\",\n+      \"       [71.7166158 , 71.42785671, 71.85170361, 72.45209386, 72.09185971],\\n\",\n+      \"       [73.03247111, 72.19331599, 72.85235403, 73.55280933, 73.05748737],\\n\",\n+      \"       [74.31330365, 74.06944166, 74.37834592, 74.80862561, 74.29829389],\\n\",\n+      \"       [74.3183069 , 73.82429458, 74.31330365, 74.84364837, 74.04312803],\\n\",\n+      \"       [74.60349227, 74.76485892, 74.44839145, 75.11382399, 74.73858008],\\n\",\n+      \"       [75.78425977, 75.31518911, 75.73422725, 76.83994596, 76.05943864],\\n\",\n+      \"       [74.62850853, 74.58975385, 74.40336219, 75.15885325, 74.64852154],\\n\",\n+      \"       [75.63416221, 75.05503302, 75.41902236, 76.14949717, 76.06944514],\\n\",\n+      \"       [76.324611  , 75.94056434, 76.0844549 , 76.70485816, 76.17951669],\\n\",\n+      \"       [75.63416221, 74.69981989, 75.2689248 , 76.00440286, 75.32396057],\\n\",\n+      \"       [76.60479312, 75.91054633, 76.40466303, 77.0450793 , 76.34462401],\\n\",\n+      \"       [76.25956872, 75.94556734, 76.04442888, 76.58978336, 76.34962726],\\n\",\n+      \"       [76.0844549 , 75.78046828, 76.47971181, 76.59978986, 76.0944614 ],\\n\",\n+      \"       [76.45469555, 76.02061237, 76.77490369, 76.89498174, 76.55976385],\\n\",\n+      \"       [77.19517686, 76.30578347, 76.68484515, 77.43533297, 76.83494271],\\n\",\n+      \"       [77.03006955, 76.69601761, 76.66983539, 77.29023866, 76.62980938],\\n\",\n+      \"       [76.37964677, 75.62037222, 76.26957522, 76.71986791, 76.1044679 ],\\n\",\n+      \"       [76.92500125, 76.48589153, 76.72987442, 77.49537199, 76.85495572],\\n\",\n+      \"       [76.75989393, 76.32079248, 76.69985491, 77.34527443, 77.05508581],\\n\",\n+      \"       [77.12513134, 75.96557935, 76.76489718, 77.37529394, 77.09010857],\\n\",\n+      \"       [76.61980287, 76.17070242, 76.86996548, 77.26522239, 77.22019313],\\n\",\n+      \"       [77.09511182, 76.83109866, 76.98504028, 77.65547606, 77.15515085],\\n\",\n+      \"       [77.05508581, 76.71102662, 76.86996548, 77.49036874, 77.44533947],\\n\",\n+      \"       [76.95502076, 76.57094257, 77.12012808, 77.78055736, 77.42032321],\\n\",\n+      \"       [77.55541102, 76.60096058, 77.66548256, 77.94566468, 77.45034272],\\n\",\n+      \"       [76.85495572, 76.42085251, 77.00005003, 77.39530695, 77.1601541 ]])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([52.47410536, 51.6535759 , 53.55981588, 53.02446485, 56.6868484 ,\\n\",\n-      \"       57.35228062, 56.41166568, 58.03272128, 56.83193803, 57.94766545,\\n\",\n-      \"       57.54740834, 57.36228824, 58.67813826, 57.75253773, 59.2885375 ,\\n\",\n-      \"       60.15910506, 60.2391541 , 60.36423445, 60.74948907])\\n\"\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([71.81668282, 72.26697206, 73.62785935, 75.26892424, 75.27893186,\\n\",\n+      \"       75.71921945, 76.74488425, 75.82929134, 76.74488425, 77.3853004 ,\\n\",\n+      \"       76.52474046, 77.91564465, 77.47035623, 77.30024457, 77.56041288,\\n\",\n+      \"       78.26587558, 77.84059644, 77.44534016, 78.14579606, 78.18582058,\\n\",\n+      \"       78.26587558, 78.38094831, 78.53104472, 78.99634838, 78.69114876,\\n\",\n+      \"       78.66613269, 78.22084427])\\n\"\n      ]\n     },\n     {\n      \"data\": {\n-      \"image/png\": \"\\n\",\n+      \"image/png\": \"\\n\",\n       \"text/plain\": [\n        \"<Figure size 1440x1080 with 1 Axes>\"\n       ]\n@@ -285,13 +286,13 @@\n     \"fig, ax = plt.subplots()\\n\",\n     \"\\n\",\n     \"json_paths = [\\n\",\n-    \"    './test_accuracy_20220704-1426.json', \\n\",\n-    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1657.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1112.json', \\n\",\n     \"]\\n\",\n     \"\\n\",\n     \"info_dicts = [load_plotinfo_from_file(path) for path in json_paths]\\n\",\n-    \"info_dicts[1].update(load_plotinfo_from_file(\\n\",\n-    \"    \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1556.json\\\"))\\n\",\n+    \"# info_dicts[1].update(load_plotinfo_from_file(\\n\",\n+    \"#     \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1556.json\\\"))\\n\",\n     \"\\n\",\n     \"for info_dict in info_dicts:\\n\",\n     \"    dict_test_accuracies, dict_val_accuracies, guessing_level_percent, title = plotinfo_from_dict(info_dict)\\n\",\n@@ -327,6 +328,14 @@\n    \"metadata\": {},\n    \"outputs\": [],\n    \"source\": []\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"adb233a3-a03e-4656-922f-ce8384dc3ac2\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": []\n   }\n  ],\n  \"metadata\": {\n\n---", "paper/hyperparameter_optimization.ipynb\n=======================================================\nlhs: 100644 | 3b9ea856d14d5aa4939b74a7e86e89a9ae569756\nrhs: 100644 | 60aa995ba3a2e9e5b423ecd6e706b4454daff3de\n---@@ -2,7 +2,7 @@\n  \"cells\": [\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 1,\n+   \"execution_count\": null,\n    \"id\": \"a69a9920-5590-4200-824e-6d685a99b917\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -25,7 +25,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 2,\n+   \"execution_count\": null,\n    \"id\": \"fee74dce-cdcb-4be0-8437-4eaab1a7d590\",\n    \"metadata\": {\n     \"tags\": []\n@@ -94,18 +94,25 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 3,\n+   \"execution_count\": null,\n+   \"id\": \"089eb97b-4ab7-4b98-9454-fc1233287b3d\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"debug=False\\n\",\n+    \"use_new_data=False\\n\",\n+    \"num_test_data_sets = 10\\n\",\n+    \"offset_header_rev1 = -200\\n\",\n+    \"offset_header_rev2 = 200\\n\",\n+    \"offset_header = offset_header_rev2\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n    \"id\": \"50bb7930-54d1-4e34-8d58-c03ace7beb35\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Evaluating datasets: ['7.0cm', '00cm', '1.0cm', '2.0cm', '3.0cm', '4.0cm']\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"# Technical details of your experimental setup\\n\",\n     \"technical_details = {\\n\",\n@@ -118,7 +125,7 @@\n     \"    \\\"do_normalize_data\\\": True,  # Use if data should be normalized to have zero mean and std 1\\n\",\n     \"}\\n\",\n     \"\\n\",\n-    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise\\\"\\n\",\n+    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/\\\"\\n\",\n     \"\\n\",\n     \"# Array of the different distances in cm (folder names) used for the measurement\\n\",\n     \"# position = [dirname for dirname in os.listdir(data_directory) \\n\",\n@@ -131,7 +138,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 4,\n+   \"execution_count\": null,\n    \"id\": \"ee7cba52-820e-4058-a241-93c19f3ae772\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -144,57 +151,18 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 5,\n+   \"execution_count\": null,\n    \"id\": \"af969409-2b19-4c66-a5c6-55badf735280\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(11896, 500), before header:(7992, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the data synchronization at 799864\\n\",\n-      \"\\n\",\n-      \"Cut data in pieces with these shapes: after header:(83272, 500), before header:(55944, 500)\\n\",\n-      \"(556864, 500)\\n\",\n-      \"(556864,)\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stderr\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"2022-03-30 11:16:03.135639: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n-      \"To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n-      \"2022-03-30 11:16:03.681481: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43630 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:01:00.0, compute capability: 8.6\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"training_data, training_labels, validation_data, validation_labels = pp.get_datasets(\\n\",\n-    \"    os.path.join(data_directory, position[2]), \\n\",\n-    \"    technical_details, data_augmentation_halflength=3,\\n\",\n+    \"    os.path.join(data_directory, position[0]), \\n\",\n+    \"    technical_details=technical_details,\\n\",\n+    \"    offset_header=offset_header,\\n\",\n+    \"    data_augmentation_halflength=1, \\n\",\n+    \"    debug=debug, \\n\",\n+    \"    force_create_npy_files=use_new_data\\n\",\n     \")\\n\",\n     \"\\n\",\n     \"print(training_data.shape)\\n\",\n@@ -211,57 +179,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 6,\n+   \"execution_count\": null,\n    \"id\": \"db20a227-a4fc-4745-9df5-a5a5ab640d0d\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"INFO:tensorflow:Reloading Oracle from existing project ./hyperparam_tuning_testing_3convs/oracle.json\\n\",\n-      \"Model: \\\"sequential\\\"\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Layer (type)                 Output Shape              Param #   \\n\",\n-      \"=================================================================\\n\",\n-      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d (Conv1D)              (None, 500, 3)            6         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d (MaxPooling1D) (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization (BatchNo (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_1 (Conv1D)            (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_1 (MaxPooling1 (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_1 (Batch (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_2 (Conv1D)            (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_2 (MaxPooling1 (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_2 (Batch (None, 500, 3)            12        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dropout (Dropout)            (None, 500, 3)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"flatten (Flatten)            (None, 1500)              0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense (Dense)                (None, 32)                48032     \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense_1 (Dense)              (None, 4)                 132       \\n\",\n-      \"=================================================================\\n\",\n-      \"Total params: 48,230\\n\",\n-      \"Trainable params: 48,212\\n\",\n-      \"Non-trainable params: 18\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"INFO:tensorflow:Reloading Tuner from ./hyperparam_tuning_testing_3convs/tuner0.json\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"#tuner = kt.RandomSearch(\\n\",\n     \"#tuner = kt.BayesianOptimization(\\n\",\n@@ -279,7 +200,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n+   \"execution_count\": null,\n    \"id\": \"87d2e9ca-1749-4d12-bb39-573ae2157753\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -302,104 +223,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 8,\n+   \"execution_count\": null,\n    \"id\": \"36ca9e2d-ef5a-45db-ad7a-83d676246a65\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Model: \\\"sequential\\\"\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Layer (type)                 Output Shape              Param #   \\n\",\n-      \"=================================================================\\n\",\n-      \"reshape (Reshape)            (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"gaussian_noise (GaussianNois (None, 500, 1)            0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d (Conv1D)              (None, 498, 13)           52        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d (MaxPooling1D) (None, 249, 13)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization (BatchNo (None, 249, 13)           52        \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_1 (Conv1D)            (None, 235, 118)          23128     \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_1 (MaxPooling1 (None, 235, 118)          0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_1 (Batch (None, 235, 118)          472       \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"conv1d_2 (Conv1D)            (None, 221, 118)          208978    \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"max_pooling1d_2 (MaxPooling1 (None, 55, 118)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"batch_normalization_2 (Batch (None, 55, 118)           472       \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dropout (Dropout)            (None, 55, 118)           0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"flatten (Flatten)            (None, 6490)              0         \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense (Dense)                (None, 224)               1453984   \\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"dense_1 (Dense)              (None, 4)                 900       \\n\",\n-      \"=================================================================\\n\",\n-      \"Total params: 1,688,038\\n\",\n-      \"Trainable params: 1,687,540\\n\",\n-      \"Non-trainable params: 498\\n\",\n-      \"_________________________________________________________________\\n\",\n-      \"Successfully loaded test data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the test data synchronization at 64\\n\",\n-      \"\\n\",\n-      \"prepared test data with shape: (19994, 500)\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stderr\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"2022-03-30 11:16:08.813432: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n-      \"2022-03-30 11:16:09.600153: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n-      \"2022-03-30 11:16:10.578419: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.579219: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.579242: W tensorflow/stream_executor/gpu/asm_compiler.cc:77] Couldn't get ptxas version string: Internal: Couldn't invoke ptxas --version\\n\",\n-      \"2022-03-30 11:16:10.580133: I tensorflow/core/platform/default/subprocess.cc:304] Start cannot spawn child process: No such file or directory\\n\",\n-      \"2022-03-30 11:16:10.580183: W tensorflow/stream_executor/gpu/redzone_allocator.cc:314] Internal: Failed to launch ptxas\\n\",\n-      \"Relying on driver to perform ptx compilation. \\n\",\n-      \"Modify $PATH to customize ptxas location.\\n\",\n-      \"This message will be only logged once.\\n\",\n-      \"2022-03-30 11:16:11.621361: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Confusion matrix:\\n\",\n-      \"H V P M \\n\",\n-      \"[[2458    0    5    2]\\n\",\n-      \" [   3 1906   33  581]\\n\",\n-      \" [   3   40 2404   48]\\n\",\n-      \" [   2  476   34 2004]]\\n\",\n-      \"Test accuracy: 0.8772877287728773\\n\",\n-      \"0.8772877287728773\\n\",\n-      \"Successfully loaded test data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/Distance_precise/1.0cm\\n\",\n-      \"\\n\",\n-      \"Found the test data synchronization at 65\\n\",\n-      \"\\n\",\n-      \"prepared test data with shape: (19994, 500)\\n\",\n-      \"Confusion matrix:\\n\",\n-      \"H V P M \\n\",\n-      \"[[2456    1    5    3]\\n\",\n-      \" [   0 1892   31  600]\\n\",\n-      \" [   4   31 2424   36]\\n\",\n-      \" [   1  454   42 2019]]\\n\",\n-      \"Test accuracy: 0.8791879187918792\\n\",\n-      \"0.8791879187918792\\n\"\n-     ]\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"best_model = tuner.get_best_models(1)[0]\\n\",\n     \"\\n\",\n@@ -423,148 +250,10 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 9,\n+   \"execution_count\": null,\n    \"id\": \"417d23fc-dcf8-42b9-99ef-6fc7d775c4b3\",\n    \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 0 samples, test_accuracy=0.8791879187918792. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 1 samples, test_accuracy=0.8807880788078808. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 2 samples, test_accuracy=0.8781878187818782. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 3 samples, test_accuracy=0.8778877887788779. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 4 samples, test_accuracy=0.8735873587358736. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 5 samples, test_accuracy=0.8692869286928693. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 6 samples, test_accuracy=0.8593859385938594. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 7 samples, test_accuracy=0.8510851085108511. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 8 samples, test_accuracy=0.8343834383438344. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 9 samples, test_accuracy=0.8227822782278228. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 10 samples, test_accuracy=0.8014801480148015. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 11 samples, test_accuracy=0.7728772877287728. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 12 samples, test_accuracy=0.7338733873387339. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 13 samples, test_accuracy=0.686068606860686. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 14 samples, test_accuracy=0.6310631063106311. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 15 samples, test_accuracy=0.572957295729573. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 16 samples, test_accuracy=0.5141514151415142. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 17 samples, test_accuracy=0.45854585458545855. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 18 samples, test_accuracy=0.39893989398939894. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 19 samples, test_accuracy=0.2946294629462946. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 20 samples, test_accuracy=0.3029302930293029. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 21 samples, test_accuracy=0.2552255225522552. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 22 samples, test_accuracy=0.26242624262426245. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 23 samples, test_accuracy=0.2585258525852585. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 24 samples, test_accuracy=0.2548254825482548. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 25 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 26 samples, test_accuracy=0.25822582258225824. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 27 samples, test_accuracy=0.2557255725572557. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 28 samples, test_accuracy=0.31683168316831684. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 29 samples, test_accuracy=0.3161316131613161. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 30 samples, test_accuracy=0.3175317531753175. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 31 samples, test_accuracy=0.3181318131813181. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 32 samples, test_accuracy=0.32143214321432145. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 33 samples, test_accuracy=0.3215321532153215. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 34 samples, test_accuracy=0.32323232323232326. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 35 samples, test_accuracy=0.3209320932093209. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 36 samples, test_accuracy=0.26512651265126513. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 37 samples, test_accuracy=0.2672267226722672. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 38 samples, test_accuracy=0.27002700270027. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 39 samples, test_accuracy=0.27542754275427545. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 40 samples, test_accuracy=0.2556255625562556. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 41 samples, test_accuracy=0.2583258325832583. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 42 samples, test_accuracy=0.2621262126212621. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 43 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 44 samples, test_accuracy=0.25682568256825683. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 45 samples, test_accuracy=0.2565256525652565. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 46 samples, test_accuracy=0.2532253225322532. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 47 samples, test_accuracy=0.25842584258425844. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 48 samples, test_accuracy=0.25742574257425743. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 49 samples, test_accuracy=0.25292529252925294. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 50 samples, test_accuracy=0.2625262526252625. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 51 samples, test_accuracy=0.2654265426542654. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 52 samples, test_accuracy=0.2648264826482648. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 53 samples, test_accuracy=0.2542254225422542. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 54 samples, test_accuracy=0.2544254425442544. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 55 samples, test_accuracy=0.25642564256425643. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 56 samples, test_accuracy=0.25882588258825884. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 57 samples, test_accuracy=0.2526252625262526. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 58 samples, test_accuracy=0.25662566256625663. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 59 samples, test_accuracy=0.25072507250725073. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 60 samples, test_accuracy=0.25412541254125415. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 61 samples, test_accuracy=0.25742574257425743. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 62 samples, test_accuracy=0.2518251825182518. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 63 samples, test_accuracy=0.2569256925692569. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 64 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 65 samples, test_accuracy=0.2536253625362536. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 66 samples, test_accuracy=0.28172817281728174. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 67 samples, test_accuracy=0.2796279627962796. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 68 samples, test_accuracy=0.2554255425542554. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 69 samples, test_accuracy=0.2611261126112611. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 70 samples, test_accuracy=0.25272527252725274. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 71 samples, test_accuracy=0.2644264426442644. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 72 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 73 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 74 samples, test_accuracy=0.25512551255125515. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 75 samples, test_accuracy=0.2538253825382538. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 76 samples, test_accuracy=0.25252525252525254. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 77 samples, test_accuracy=0.2524252425242524. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 78 samples, test_accuracy=0.25862586258625864. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 79 samples, test_accuracy=0.26572657265726574. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 80 samples, test_accuracy=0.2723272327232723. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 81 samples, test_accuracy=0.28392839283928395. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 82 samples, test_accuracy=0.3013301330133013. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 83 samples, test_accuracy=0.3361336133613361. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 84 samples, test_accuracy=0.39403940394039405. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 85 samples, test_accuracy=0.47024702470247026. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 86 samples, test_accuracy=0.25332533253325334. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 87 samples, test_accuracy=0.2571257125712571. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 88 samples, test_accuracy=0.7174717471747175. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 89 samples, test_accuracy=0.7701770177017702. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 90 samples, test_accuracy=0.8061806180618062. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 91 samples, test_accuracy=0.8306830683068307. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 92 samples, test_accuracy=0.8438843884388438. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 93 samples, test_accuracy=0.8577857785778578. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 94 samples, test_accuracy=0.8647864786478647. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 95 samples, test_accuracy=0.866986698669867. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 96 samples, test_accuracy=0.8691869186918691. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 97 samples, test_accuracy=0.876987698769877. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 98 samples, test_accuracy=0.8755875587558756. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 99 samples, test_accuracy=0.8809880988098809. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 100 samples, test_accuracy=0.8791879187918792. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 101 samples, test_accuracy=0.8807880788078808. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 102 samples, test_accuracy=0.8781878187818782. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 103 samples, test_accuracy=0.8778877887788779. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 104 samples, test_accuracy=0.8735873587358736. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 105 samples, test_accuracy=0.8692869286928693. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 106 samples, test_accuracy=0.8593859385938594. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 107 samples, test_accuracy=0.8510851085108511. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 108 samples, test_accuracy=0.8343834383438344. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 109 samples, test_accuracy=0.8227822782278228. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 110 samples, test_accuracy=0.8014801480148015. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 111 samples, test_accuracy=0.7728772877287728. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 112 samples, test_accuracy=0.7338733873387339. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 113 samples, test_accuracy=0.686068606860686. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 114 samples, test_accuracy=0.6310631063106311. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 115 samples, test_accuracy=0.572957295729573. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 116 samples, test_accuracy=0.5141514151415142. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 117 samples, test_accuracy=0.45854585458545855. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 118 samples, test_accuracy=0.39893989398939894. prepared test data with shape: (19994, 500)\\n\",\n-      \" at displacement 119 samples, test_accuracy=0.2946294629462946. BEST Test accuracy after trying all displacements: 0.8810 at displacement 99 \\n\"\n-     ]\n-    },\n-    {\n-     \"data\": {\n-      \"text/plain\": [\n-       \"0.8809880988098809\"\n-      ]\n-     },\n-     \"execution_count\": 9,\n-     \"metadata\": {},\n-     \"output_type\": \"execute_result\"\n-    }\n-   ],\n+   \"outputs\": [],\n    \"source\": [\n     \"ml.test_model_all_displacements(best_model, test_data, test_labels, technical_details)\"\n    ]\n\n---"]}