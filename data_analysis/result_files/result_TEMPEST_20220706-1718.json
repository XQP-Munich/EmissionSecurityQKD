{"test_accuracies": {"0deg": [0.9030369740331216, 0.896782908890779, 0.9080402261469955], "10deg": [0.9752339020363237, 0.9745334467403812, 0.974783609346075], "20deg": [0.9922449592234953, 0.9904437884625006, 0.9908940811527492], "30deg": [0.9836893981087707, 0.9809876419672787, 0.9817381297843598], "40deg": [0.9830389753339671, 0.9813378696152499, 0.9807875118827237], "50deg": [0.9803872517136138, 0.9805873817981688, 0.9821884224746085], "60deg": [0.982288487516886, 0.9816380647420824, 0.9836893981087707], "70deg": [0.9742832841346876, 0.9754340321208785, 0.9702806824435883], "80deg": [0.9532696252564167, 0.9533196577775555, 0.9511682593685896], "90deg": [0.9117426327112623, 0.9073898033721919, 0.9091409416120478], "100deg": [0.8279381598038725, 0.8224846149997498, 0.8276879971981789], "110deg": [0.7771051183269125, 0.773152549156952, 0.7750537849602241], "120deg": [0.7725521589032871, 0.7692500125081303, 0.7703507279731826], "130deg": [0.6958022714764597, 0.6950517836593786, 0.6933506779406614], "140deg": [0.7700505328463502, 0.759293540801521, 0.7716015410016511]}, "train_accuracies": {"0deg": 0.9267643094062805, "10deg": 0.9815844297409058, "20deg": 0.9849866628646851, "30deg": 0.9905605316162109, "40deg": 0.9852415919303894, "50deg": 0.9892989993095398, "60deg": 0.9904902577400208, "70deg": 0.980384886264801, "80deg": 0.9715219736099243, "90deg": 0.9492515325546265, "100deg": 0.8724599480628967, "110deg": 0.8634957671165466, "120deg": 0.8432111740112305, "130deg": 0.771064281463623, "140deg": 0.8083706498146057}, "validation_accuracies": {"0deg": 0.911092221736908, "10deg": 0.979186475276947, "20deg": 0.994046151638031, "30deg": 0.987742006778717, "40deg": 0.985890805721283, "50deg": 0.9852403998374939, "60deg": 0.9849902391433716, "70deg": 0.9769350290298462, "80deg": 0.9567719101905823, "90deg": 0.9186971783638, "100deg": 0.8357932567596436, "110deg": 0.8010706901550293, "120deg": 0.7886126041412354, "130deg": 0.7067093849182129, "140deg": 0.7744534015655518}, "GIT_SHA1_ONSAVING": "7264c87e853946834b8031426591b95fec2f0681", "GIT_DIFF_ONSAVING": ["paper/TEMPEST_ATTACK.ipynb\n=======================================================\nlhs: 100644 | 5942cd419aa9f4da640be7b8f77c4cfa8fb562e7\nrhs: 100644 | 5724d1aa5a9a5a98f4cb3d971858ab2b2c0cc743\n---@@ -45,12 +45,12 @@\n    \"metadata\": {},\n    \"outputs\": [],\n    \"source\": [\n-    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/\\\"\\n\",\n+    \"data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/\\\"\\n\",\n     \"# data_directory=\\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Airbus_notfixedfirmwareafterall\\\"\\n\",\n     \"# data_directory=\\\"C:/Users/marku/PycharmProjects/LMU/emissionsecurity/paper/Data2D/Test_accval_acctest\\\"\\n\",\n     \"debug=False\\n\",\n     \"use_new_data=False\\n\",\n-    \"num_test_data_sets = 5\\n\",\n+    \"num_test_data_sets = 3\\n\",\n     \"\\n\",\n     \"offset_header_rev1 = -200\\n\",\n     \"offset_header_rev2 = 200\\n\",\n@@ -72,7 +72,7 @@\n      \"name\": \"stdout\",\n      \"output_type\": \"stream\",\n      \"text\": [\n-      \"['FPGA2.5cm']\\n\"\n+      \"['0deg', '10deg', '20deg', '30deg', '40deg', '50deg', '60deg', '70deg', '80deg', '90deg', '100deg', '110deg', '120deg', '130deg', '140deg', '150deg', '160deg', '170deg']\\n\"\n      ]\n     }\n    ],\n@@ -110,7 +110,7 @@\n     \"}\\n\",\n     \"print(positions)\\n\",\n     \"\\n\",\n-    \"data_augmentation_halflength = 1\\n\",\n+    \"data_augmentation_halflength = 3\\n\",\n     \"\\n\",\n     \"stop_at_val_acc = 0.99\\n\",\n     \"\\n\",\n@@ -169,7 +169,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 5,\n+   \"execution_count\": null,\n    \"id\": \"b5cc5936-8054-40e6-9397-6597ba56bcb3\",\n    \"metadata\": {\n     \"pycharm\": {\n@@ -182,91 +182,31 @@\n      \"name\": \"stdout\",\n      \"output_type\": \"stream\",\n      \"text\": [\n-      \"Evaluating datasets: ['FPGA2.5cm']\\n\",\n-      \"Loading dataset 0: FPGA2.5cm\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stderr\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"/home/a/A.Baliuka/emissionsecurity/paper/preprocessing.py:184: RuntimeWarning: divide by zero encountered in double_scalars\\n\",\n-      \"  if np.max(correlation) / np.median(correlation) < 2.:\\n\"\n-     ]\n-    },\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(42279, 500), before header:(17682, 500)\\n\"\n+      \"Evaluating datasets: ['0deg', '10deg', '20deg', '30deg', '40deg', '50deg', '60deg', '70deg', '80deg', '90deg', '100deg', '110deg', '120deg', '130deg', '140deg', '150deg', '160deg', '170deg']\\n\",\n+      \"Loading dataset 0: 0deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\"\n      ]\n     },\n     {\n      \"name\": \"stderr\",\n      \"output_type\": \"stream\",\n      \"text\": [\n-      \"2022-07-06 14:31:30.800053: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n+      \"2022-07-06 17:19:06.337075: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  SSE4.1 SSE4.2 AVX AVX2 FMA\\n\",\n       \"To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\\n\",\n-      \"2022-07-06 14:31:31.454085: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43614 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:81:00.0, compute capability: 8.6\\n\"\n+      \"2022-07-06 17:19:06.776842: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 43614 MB memory:  -> device: 0, name: NVIDIA A40, pci bus id: 0000:81:00.0, compute capability: 8.6\\n\"\n      ]\n     },\n     {\n@@ -322,181 +262,1743 @@\n      \"name\": \"stderr\",\n      \"output_type\": \"stream\",\n      \"text\": [\n-      \"2022-07-06 14:31:48.064036: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n-      \"2022-07-06 14:31:51.888751: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n-      \"2022-07-06 14:31:53.880828: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n+      \"2022-07-06 17:19:12.615290: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)\\n\",\n+      \"2022-07-06 17:19:14.387627: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8201\\n\",\n+      \"2022-07-06 17:19:15.825145: I tensorflow/stream_executor/cuda/cuda_blas.cc:1760] TensorFloat-32 will be used for the matrix multiplication. This will only be logged once.\\n\"\n      ]\n     },\n     {\n      \"name\": \"stdout\",\n      \"output_type\": \"stream\",\n      \"text\": [\n-      \"13585/13585 [==============================] - 146s 10ms/step - loss: 0.9499 - accuracy: 0.5562 - val_loss: 0.8574 - val_accuracy: 0.5874\\n\",\n+      \"6559/6559 [==============================] - 64s 9ms/step - loss: 0.4143 - accuracy: 0.8343 - val_loss: 0.2743 - val_accuracy: 0.8935\\n\",\n       \"Epoch 2/20\\n\",\n-      \"13585/13585 [==============================] - 138s 10ms/step - loss: 0.8404 - accuracy: 0.6024 - val_loss: 0.8212 - val_accuracy: 0.6091\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.3055 - accuracy: 0.8794 - val_loss: 0.2548 - val_accuracy: 0.9008\\n\",\n       \"Epoch 3/20\\n\",\n-      \"13585/13585 [==============================] - 137s 10ms/step - loss: 0.7935 - accuracy: 0.6281 - val_loss: 0.8065 - val_accuracy: 0.6199\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.2758 - accuracy: 0.8920 - val_loss: 0.2469 - val_accuracy: 0.9042\\n\",\n       \"Epoch 4/20\\n\",\n-      \"13585/13585 [==============================] - 138s 10ms/step - loss: 0.7573 - accuracy: 0.6499 - val_loss: 0.7999 - val_accuracy: 0.6274\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.2565 - accuracy: 0.9002 - val_loss: 0.2396 - val_accuracy: 0.9069\\n\",\n       \"Epoch 5/20\\n\",\n-      \"13585/13585 [==============================] - 138s 10ms/step - loss: 0.7269 - accuracy: 0.6677 - val_loss: 0.7998 - val_accuracy: 0.6301\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.2425 - accuracy: 0.9056 - val_loss: 0.2361 - val_accuracy: 0.9100\\n\",\n       \"Epoch 6/20\\n\",\n-      \"13585/13585 [==============================] - 133s 10ms/step - loss: 0.7028 - accuracy: 0.6816 - val_loss: 0.8076 - val_accuracy: 0.6291\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.2303 - accuracy: 0.9101 - val_loss: 0.2357 - val_accuracy: 0.9095\\n\",\n       \"Epoch 7/20\\n\",\n-      \"13585/13585 [==============================] - 128s 9ms/step - loss: 0.6820 - accuracy: 0.6935 - val_loss: 0.8131 - val_accuracy: 0.6331\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.2202 - accuracy: 0.9143 - val_loss: 0.2322 - val_accuracy: 0.9135\\n\",\n       \"Epoch 8/20\\n\",\n-      \"13585/13585 [==============================] - 120s 9ms/step - loss: 0.6658 - accuracy: 0.7024 - val_loss: 0.8161 - val_accuracy: 0.6300\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.2117 - accuracy: 0.9176 - val_loss: 0.2363 - val_accuracy: 0.9109\\n\",\n       \"Epoch 9/20\\n\",\n-      \"13585/13585 [==============================] - 121s 9ms/step - loss: 0.6513 - accuracy: 0.7105 - val_loss: 0.8207 - val_accuracy: 0.6314\\n\",\n-      \"Epoch 00009: early stopping\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.2029 - accuracy: 0.9209 - val_loss: 0.2460 - val_accuracy: 0.9083\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.1953 - accuracy: 0.9240 - val_loss: 0.2390 - val_accuracy: 0.9117\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1884 - accuracy: 0.9268 - val_loss: 0.2482 - val_accuracy: 0.9111\\n\",\n+      \"Epoch 00011: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n       \"Confusion matrix:\\n\",\n       \"H V P M \\n\",\n-      \"[[2721  700  891  644]\\n\",\n-      \" [ 638 3090  557  817]\\n\",\n-      \" [ 977  731 2589  676]\\n\",\n-      \" [ 620  890  604 2842]]\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0101: 0.7413318657127133\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0011: 0.693450742982939\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0110: 0.690148596587782\\n\",\n-      \"Test accuracy: 0.5624656026417171\\n\",\n+      \"[[4910   11   11   25]\\n\",\n+      \" [   3 4313  148  637]\\n\",\n+      \" [  14  150 4473  337]\\n\",\n+      \" [  18  336  248 4353]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9529694301295842\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9330064541952269\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9200980637414319\\n\",\n+      \"Test accuracy: 0.9030369740331216\\n\",\n       \"\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n       \"Confusion matrix:\\n\",\n       \"H V P M \\n\",\n-      \"[[2866  668  813  609]\\n\",\n-      \" [ 660 3025  604  813]\\n\",\n-      \" [ 931  685 2670  687]\\n\",\n-      \" [ 673  813  627 2843]]\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0101: 0.7391804673037474\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0011: 0.7027567919147446\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0110: 0.699204482913894\\n\",\n-      \"Test accuracy: 0.570570871066193\\n\",\n+      \"[[4909    9   22   17]\\n\",\n+      \" [   4 4268  158  671]\\n\",\n+      \" [   9  138 4402  425]\\n\",\n+      \" [  11  360  239 4345]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9499174463401211\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9306549257017062\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9129934457397308\\n\",\n+      \"Test accuracy: 0.896782908890779\\n\",\n       \"\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/0deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n       \"Confusion matrix:\\n\",\n       \"H V P M \\n\",\n-      \"[[ 908 1531  555 1962]\\n\",\n-      \" [ 536 2185  322 2059]\\n\",\n-      \" [ 759 1488  760 1966]\\n\",\n-      \" [ 596 1286  384 2690]]\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0101: 0.5604643017961675\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0011: 0.5483564316805923\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0110: 0.5459048381447941\\n\",\n-      \"Test accuracy: 0.327362785810777\\n\",\n+      \"[[4908    9   21   19]\\n\",\n+      \" [   3 4399  117  582]\\n\",\n+      \" [  10  120 4468  376]\\n\",\n+      \" [  15  334  232 4374]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9554210236653825\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9390603892530145\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9215990393755942\\n\",\n+      \"Test accuracy: 0.9080402261469955\\n\",\n+      \"\\n\",\n+      \"\\n\",\n       \"\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 1: 10deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_1\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_1 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_1 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_3 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_3 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_3 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_3 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_4 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_4 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_4 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_4 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_5 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_5 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_5 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_5 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_1 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_2 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_3 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.2152 - accuracy: 0.9191 - val_loss: 0.1080 - val_accuracy: 0.9631\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1211 - accuracy: 0.9554 - val_loss: 0.0792 - val_accuracy: 0.9719\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0985 - accuracy: 0.9635 - val_loss: 0.0746 - val_accuracy: 0.9743\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0850 - accuracy: 0.9685 - val_loss: 0.0712 - val_accuracy: 0.9757\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0772 - accuracy: 0.9715 - val_loss: 0.0682 - val_accuracy: 0.9765\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0709 - accuracy: 0.9737 - val_loss: 0.0659 - val_accuracy: 0.9788\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0660 - accuracy: 0.9758 - val_loss: 0.0653 - val_accuracy: 0.9787\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0615 - accuracy: 0.9772 - val_loss: 0.0636 - val_accuracy: 0.9796\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0579 - accuracy: 0.9786 - val_loss: 0.0670 - val_accuracy: 0.9780\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0555 - accuracy: 0.9794 - val_loss: 0.0653 - val_accuracy: 0.9795\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0521 - accuracy: 0.9807 - val_loss: 0.0675 - val_accuracy: 0.9792\\n\",\n+      \"Epoch 12/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0503 - accuracy: 0.9816 - val_loss: 0.0650 - val_accuracy: 0.9792\\n\",\n+      \"Epoch 00012: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n       \"Confusion matrix:\\n\",\n       \"H V P M \\n\",\n-      \"[[2727  677  891  661]\\n\",\n-      \" [ 632 3041  601  828]\\n\",\n-      \" [ 933  755 2612  673]\\n\",\n-      \" [ 629  821  634 2872]]\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0101: 0.7367288737679492\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0011: 0.6938510031520488\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0110: 0.695351978786211\\n\",\n-      \"Test accuracy: 0.5629659278531045\\n\",\n+      \"[[4949    2    6    0]\\n\",\n+      \" [   0 4906   96   99]\\n\",\n+      \" [   1   44 4883   46]\\n\",\n+      \" [   4   91  106 4754]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9850903087006554\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9829389102916896\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9824385850803022\\n\",\n+      \"Test accuracy: 0.9752339020363237\\n\",\n       \"\\n\",\n-      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/FPGA2.5cm\\n\",\n-      \"Cut data in pieces with these shapes: after header:(14093, 500), before header:(5894, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n       \"Confusion matrix:\\n\",\n       \"H V P M \\n\",\n-      \"[[2820  665  831  640]\\n\",\n-      \" [ 659 3090  589  764]\\n\",\n-      \" [ 935  691 2700  647]\\n\",\n-      \" [ 611  849  668 2828]]\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0101: 0.7413318657127133\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0011: 0.7043078000700456\\n\",\n-      \"Estimated bit prediction accuracy given mapping 0110: 0.6989042877870616\\n\",\n-      \"Test accuracy: 0.5722719767849102\\n\",\n+      \"[[4951    2    4    0]\\n\",\n+      \" [   0 4902   80  119]\\n\",\n+      \" [   1   39 4879   55]\\n\",\n+      \" [   2  100  107 4746]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.985740731475459\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9827387802071347\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9805873817981688\\n\",\n+      \"Test accuracy: 0.9745334467403812\\n\",\n       \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/10deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4950    2    2    3]\\n\",\n+      \" [   0 4904   82  115]\\n\",\n+      \" [   1   46 4879   48]\\n\",\n+      \" [   2   99  104 4750]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9856406664331816\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9824886176014409\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9814379346575274\\n\",\n+      \"Test accuracy: 0.974783609346075\\n\",\n       \"\\n\",\n       \"\\n\",\n-      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/result_TEMPEST_20220706-1430.json\\n\",\n-      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev230meas2.5cm/result_TEMPEST_20220706-1430.json\\n\",\n-      \" ------------ Done ---------------\\n\"\n-     ]\n-    }\n-   ],\n-   \"source\": [\n-    \"git_sha1, git_diff = get_repo_sha1_and_diff(search_parent_directories=True)\\n\",\n-    \"result_file_path = os.path.join(data_directory, f\\\"result_TEMPEST_{datetime.datetime.now().strftime('%Y%m%d-%H%M')}.json\\\")\\n\",\n-    \"try:\\n\",\n-    \"    measurement_metadata = verify_json_metadata(data_directory, verbose=False)\\n\",\n-    \"except:\\n\",\n-    \"    measurement_metadata = \\\"FAILURE_TO_GET_METADATA\\\"\\n\",\n-    \"\\n\",\n-    \"test_accuracy = evaluate_all_positions(positions, technical_details, num_test_data_sets, debug, num_classes)\\n\",\n-    \"pp.write_result_dict({\\n\",\n-    \"    'test_accuracies': test_accuracy, \\n\",\n-    \"    'train_accuracies': train_accuracy, \\n\",\n-    \"    'validation_accuracies': validation_accuracy,\\n\",\n-    \"    'measurement_metadata': measurement_metadata, \\n\",\n-    \"    'n_classes': num_classes,\\n\",\n-    \"    'data_augmentation_halflength': data_augmentation_halflength,\\n\",\n-    \"    }, \\n\",\n-    \"    target_file_path=result_file_path, override=True, )\\n\",\n-    \"\\n\",\n-    \"print(\\\" ------------ Done ---------------\\\")\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": 6,\n-   \"id\": \"6928c4c3-415c-4d79-bbdc-75b289eb3c57\",\n-   \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"{'FPGA2.5cm': [0.5624656026417171, 0.570570871066193, 0.327362785810777, 0.5629659278531045, 0.5722719767849102]}\\n\"\n-     ]\n-    }\n-   ],\n-   \"source\": [\n-    \"print(f\\\"{test_accuracy}\\\")\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"markdown\",\n-   \"id\": \"c30b5e76-60a7-4ac2-9908-89847c085a06\",\n-   \"metadata\": {},\n-   \"source\": [\n-    \"# ------------------ Metadata ------------------\"\n-   ]\n-  },\n-  {\n-   \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n-   \"id\": \"c93639fe-5cdf-49a4-88f3-109ce37453b5\",\n-   \"metadata\": {},\n-   \"outputs\": [\n-    {\n-     \"name\": \"stdout\",\n-     \"output_type\": \"stream\",\n-     \"text\": [\n-      \"d95bae263e584e73a52ea8feaa140a2c150e7e70\\n\",\n       \"\\n\",\n-      \"Full git diff (only Python source files!):\\n\",\n-      \"\\n\"\n-     ]\n-    },\n-    {\n-     \"data\": {\n-      \"text/plain\": [\n-       \"[]\"\n-      ]\n-     },\n-     \"execution_count\": 7,\n-     \"metadata\": {},\n-     \"output_type\": \"execute_result\"\n-    }\n-   ],\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 2: 20deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_2\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_2 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_2 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_6 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_6 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_6 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_6 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_7 (Conv1D)            (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_7 (MaxPooling1 (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_7 (Spatial (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_7 (Batch (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_8 (Conv1D)            (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_8 (MaxPooling1 (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_8 (Batch (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_8 (Spatial (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_2 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_4 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_5 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.1079 - accuracy: 0.9600 - val_loss: 0.0294 - val_accuracy: 0.9890\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0433 - accuracy: 0.9850 - val_loss: 0.0173 - val_accuracy: 0.9940\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"Cancelling training because reached val_accuracy 0.994046151638031. (threshold 0.99)\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4955    1    0    1]\\n\",\n+      \" [   2 5009   49   41]\\n\",\n+      \" [   1   23 4940   10]\\n\",\n+      \" [   3   17    7 4928]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9951968779706809\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9932456096462701\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9960474308300395\\n\",\n+      \"Test accuracy: 0.9922449592234953\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4953    1    2    1]\\n\",\n+      \" [   1 4989   65   46]\\n\",\n+      \" [   1   39 4922   12]\\n\",\n+      \" [   4   12    7 4932]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9934957722519637\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9914944714064142\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9958973332666233\\n\",\n+      \"Test accuracy: 0.9904437884625006\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/20deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4954    1    2    0]\\n\",\n+      \" [   3 4986   56   56]\\n\",\n+      \" [   1   31 4934    8]\\n\",\n+      \" [   2   14    8 4931]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9945464551958774\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9918947315755241\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9953469755340971\\n\",\n+      \"Test accuracy: 0.9908940811527492\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 3: 30deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_3\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_3 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_3 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_9 (Conv1D)            (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_9 (MaxPooling1 (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_9 (Spatial (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_9 (Batch (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_10 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_10 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_10 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_10 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_11 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_11 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_11 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_11 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_3 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_6 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_7 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.1804 - accuracy: 0.9349 - val_loss: 0.0734 - val_accuracy: 0.9766\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0821 - accuracy: 0.9707 - val_loss: 0.0557 - val_accuracy: 0.9821\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0637 - accuracy: 0.9773 - val_loss: 0.0480 - val_accuracy: 0.9842\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0537 - accuracy: 0.9807 - val_loss: 0.0412 - val_accuracy: 0.9858\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0476 - accuracy: 0.9829 - val_loss: 0.0405 - val_accuracy: 0.9866\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0417 - accuracy: 0.9850 - val_loss: 0.0402 - val_accuracy: 0.9866\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0384 - accuracy: 0.9863 - val_loss: 0.0386 - val_accuracy: 0.9878\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0351 - accuracy: 0.9874 - val_loss: 0.0407 - val_accuracy: 0.9874\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0322 - accuracy: 0.9884 - val_loss: 0.0372 - val_accuracy: 0.9880\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0307 - accuracy: 0.9891 - val_loss: 0.0377 - val_accuracy: 0.9883\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0288 - accuracy: 0.9897 - val_loss: 0.0410 - val_accuracy: 0.9870\\n\",\n+      \"Epoch 12/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0268 - accuracy: 0.9905 - val_loss: 0.0403 - val_accuracy: 0.9880\\n\",\n+      \"Epoch 13/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0263 - accuracy: 0.9906 - val_loss: 0.0394 - val_accuracy: 0.9877\\n\",\n+      \"Epoch 00013: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4950    3    2    2]\\n\",\n+      \" [   0 4953   43  105]\\n\",\n+      \" [   1   29 4897   47]\\n\",\n+      \" [   3   46   45 4861]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9913944063641367\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.988442487616951\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9875419022364537\\n\",\n+      \"Test accuracy: 0.9836893981087707\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4950    1    4    2]\\n\",\n+      \" [   1 4932   57  111]\\n\",\n+      \" [   0   39 4880   55]\\n\",\n+      \" [   3   63   44 4845]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9898934307299745\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9860409266022915\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9860409266022915\\n\",\n+      \"Test accuracy: 0.9809876419672787\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/30deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4949    3    2    3]\\n\",\n+      \" [   3 4955   41  102]\\n\",\n+      \" [   0   47 4870   57]\\n\",\n+      \" [   3   60   44 4848]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9899434632511133\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.987091609546205\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9864411867714014\\n\",\n+      \"Test accuracy: 0.9817381297843598\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 4: 40deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_4\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_4 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_4 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_12 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_12 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_12 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_12 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_13 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_13 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_13 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_13 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_14 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_14 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_14 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_14 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_4 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_8 (Dense)              (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_9 (Dense)              (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.2099 - accuracy: 0.9222 - val_loss: 0.0785 - val_accuracy: 0.9717\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1009 - accuracy: 0.9629 - val_loss: 0.0575 - val_accuracy: 0.9796\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0802 - accuracy: 0.9704 - val_loss: 0.0505 - val_accuracy: 0.9821\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0691 - accuracy: 0.9745 - val_loss: 0.0458 - val_accuracy: 0.9845\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0613 - accuracy: 0.9775 - val_loss: 0.0500 - val_accuracy: 0.9826\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0554 - accuracy: 0.9797 - val_loss: 0.0457 - val_accuracy: 0.9846\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0513 - accuracy: 0.9812 - val_loss: 0.0438 - val_accuracy: 0.9846\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0475 - accuracy: 0.9826 - val_loss: 0.0468 - val_accuracy: 0.9847\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0452 - accuracy: 0.9834 - val_loss: 0.0477 - val_accuracy: 0.9845\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0424 - accuracy: 0.9847 - val_loss: 0.0446 - val_accuracy: 0.9857\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0403 - accuracy: 0.9852 - val_loss: 0.0483 - val_accuracy: 0.9859\\n\",\n+      \"Epoch 00011: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4949    2    5    1]\\n\",\n+      \" [   1 4954   39  107]\\n\",\n+      \" [   6   30 4890   48]\\n\",\n+      \" [   1   64   35 4855]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9921448941812178\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9873417721518988\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9865912843348177\\n\",\n+      \"Test accuracy: 0.9830389753339671\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4946    4    3    4]\\n\",\n+      \" [   1 4933   49  118]\\n\",\n+      \" [   3   28 4889   54]\\n\",\n+      \" [   5   59   45 4846]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9904938209836394\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9865412518136789\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9856406664331816\\n\",\n+      \"Test accuracy: 0.9813378696152499\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/40deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4947    3    4    3]\\n\",\n+      \" [   0 4942   52  107]\\n\",\n+      \" [   4   35 4893   42]\\n\",\n+      \" [   6   81   47 4821]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9905938860259168\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9853905038274878\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9855906339120428\\n\",\n+      \"Test accuracy: 0.9807875118827237\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 5: 50deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_5\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_5 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_5 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_15 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_15 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_15 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_15 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_16 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_16 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_16 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_16 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_17 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_17 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_17 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_17 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_5 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_10 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_11 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.2091 - accuracy: 0.9209 - val_loss: 0.0796 - val_accuracy: 0.9691\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1067 - accuracy: 0.9603 - val_loss: 0.0633 - val_accuracy: 0.9762\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0849 - accuracy: 0.9685 - val_loss: 0.0538 - val_accuracy: 0.9797\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0741 - accuracy: 0.9728 - val_loss: 0.0576 - val_accuracy: 0.9783\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0658 - accuracy: 0.9758 - val_loss: 0.0468 - val_accuracy: 0.9824\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0597 - accuracy: 0.9782 - val_loss: 0.0509 - val_accuracy: 0.9822\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0552 - accuracy: 0.9797 - val_loss: 0.0509 - val_accuracy: 0.9823\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0503 - accuracy: 0.9817 - val_loss: 0.0462 - val_accuracy: 0.9828\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0467 - accuracy: 0.9830 - val_loss: 0.0502 - val_accuracy: 0.9820\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0441 - accuracy: 0.9842 - val_loss: 0.0456 - val_accuracy: 0.9844\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0415 - accuracy: 0.9850 - val_loss: 0.0482 - val_accuracy: 0.9846\\n\",\n+      \"Epoch 12/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0398 - accuracy: 0.9857 - val_loss: 0.0438 - val_accuracy: 0.9856\\n\",\n+      \"Epoch 13/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0376 - accuracy: 0.9864 - val_loss: 0.0443 - val_accuracy: 0.9845\\n\",\n+      \"Epoch 14/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0364 - accuracy: 0.9869 - val_loss: 0.0470 - val_accuracy: 0.9833\\n\",\n+      \"Epoch 15/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0348 - accuracy: 0.9875 - val_loss: 0.0426 - val_accuracy: 0.9855\\n\",\n+      \"Epoch 16/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0334 - accuracy: 0.9880 - val_loss: 0.0429 - val_accuracy: 0.9856\\n\",\n+      \"Epoch 17/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0326 - accuracy: 0.9883 - val_loss: 0.0470 - val_accuracy: 0.9848\\n\",\n+      \"Epoch 18/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0316 - accuracy: 0.9887 - val_loss: 0.0469 - val_accuracy: 0.9846\\n\",\n+      \"Epoch 19/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0298 - accuracy: 0.9893 - val_loss: 0.0456 - val_accuracy: 0.9852\\n\",\n+      \"Epoch 00019: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4942    2    7    6]\\n\",\n+      \" [   2 4963   44   92]\\n\",\n+      \" [   3   40 4856   75]\\n\",\n+      \" [   2   78   41 4834]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9893931055185871\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9863911542502627\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.984990243658378\\n\",\n+      \"Test accuracy: 0.9803872517136138\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4948    3    4    2]\\n\",\n+      \" [   3 4953   51   94]\\n\",\n+      \" [   2   39 4873   60]\\n\",\n+      \" [   4   75   51 4825]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9893430729974484\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9864411867714014\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9853905038274878\\n\",\n+      \"Test accuracy: 0.9805873817981688\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/50deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4946    1    4    6]\\n\",\n+      \" [   2 4977   41   81]\\n\",\n+      \" [   2   49 4876   47]\\n\",\n+      \" [   4   67   52 4832]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9898934307299745\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.98729173963076\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9871916745884826\\n\",\n+      \"Test accuracy: 0.9821884224746085\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 6: 60deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_6\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_6 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_6 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_18 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_18 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_18 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_18 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_19 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_19 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_19 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_19 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_20 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_20 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_20 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_20 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_6 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_12 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_13 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.1709 - accuracy: 0.9344 - val_loss: 0.0665 - val_accuracy: 0.9754\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0810 - accuracy: 0.9699 - val_loss: 0.0545 - val_accuracy: 0.9796\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0625 - accuracy: 0.9771 - val_loss: 0.0555 - val_accuracy: 0.9813\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0519 - accuracy: 0.9810 - val_loss: 0.0470 - val_accuracy: 0.9835\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0448 - accuracy: 0.9835 - val_loss: 0.0463 - val_accuracy: 0.9838\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0394 - accuracy: 0.9857 - val_loss: 0.0493 - val_accuracy: 0.9837\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0359 - accuracy: 0.9870 - val_loss: 0.0435 - val_accuracy: 0.9859\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0325 - accuracy: 0.9882 - val_loss: 0.0457 - val_accuracy: 0.9857\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0301 - accuracy: 0.9891 - val_loss: 0.0460 - val_accuracy: 0.9863\\n\",\n+      \"Epoch 10/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0280 - accuracy: 0.9900 - val_loss: 0.0487 - val_accuracy: 0.9860\\n\",\n+      \"Epoch 11/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0261 - accuracy: 0.9905 - val_loss: 0.0450 - val_accuracy: 0.9850\\n\",\n+      \"Epoch 00011: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4953    2    1    1]\\n\",\n+      \" [   3 4953   90   55]\\n\",\n+      \" [   1   92 4853   28]\\n\",\n+      \" [   5   41   35 4874]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9871916745884826\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9856906989543203\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9916946014909691\\n\",\n+      \"Test accuracy: 0.982288487516886\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4955    1    0    1]\\n\",\n+      \" [   0 4960   94   47]\\n\",\n+      \" [   2   94 4829   49]\\n\",\n+      \" [   3   53   23 4876]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9867413818982339\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9852904387852104\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9912443088007205\\n\",\n+      \"Test accuracy: 0.9816380647420824\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/60deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4953    3    0    1]\\n\",\n+      \" [   1 4968   77   55]\\n\",\n+      \" [   0   80 4856   38]\\n\",\n+      \" [   2   43   26 4884]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9885925851803672\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.987091609546205\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9916946014909691\\n\",\n+      \"Test accuracy: 0.9836893981087707\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 7: 70deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_7\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_7 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_7 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_21 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_21 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_21 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_21 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_22 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_22 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_22 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_22 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_23 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_23 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_23 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_23 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_7 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_14 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_15 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 61s 9ms/step - loss: 0.2202 - accuracy: 0.9137 - val_loss: 0.1005 - val_accuracy: 0.9617\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1171 - accuracy: 0.9556 - val_loss: 0.0862 - val_accuracy: 0.9679\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0945 - accuracy: 0.9643 - val_loss: 0.0819 - val_accuracy: 0.9697\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0808 - accuracy: 0.9697 - val_loss: 0.0713 - val_accuracy: 0.9742\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0718 - accuracy: 0.9730 - val_loss: 0.0696 - val_accuracy: 0.9755\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0662 - accuracy: 0.9756 - val_loss: 0.0699 - val_accuracy: 0.9756\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0606 - accuracy: 0.9774 - val_loss: 0.0708 - val_accuracy: 0.9762\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0567 - accuracy: 0.9787 - val_loss: 0.0763 - val_accuracy: 0.9740\\n\",\n+      \"Epoch 9/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0529 - accuracy: 0.9804 - val_loss: 0.0732 - val_accuracy: 0.9769\\n\",\n+      \"Epoch 00009: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4950    1    2    4]\\n\",\n+      \" [   2 4876  118  105]\\n\",\n+      \" [   2   60 4853   59]\\n\",\n+      \" [   5   79   77 4794]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9836893981087707\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9812378045729724\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.983639365587632\\n\",\n+      \"Test accuracy: 0.9742832841346876\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4950    2    2    3]\\n\",\n+      \" [   0 4888  120   93]\\n\",\n+      \" [   3   56 4860   55]\\n\",\n+      \" [   8   82   67 4798]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9844398859258519\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9816380647420824\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.984790113573823\\n\",\n+      \"Test accuracy: 0.9754340321208785\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/70deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4942    3    5    7]\\n\",\n+      \" [   3 4830  155  113]\\n\",\n+      \" [   3   80 4822   69]\\n\",\n+      \" [   6   77   73 4799]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9801871216290589\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9776854955721219\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9826887476859959\\n\",\n+      \"Test accuracy: 0.9702806824435883\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 8: 80deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_8\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_8 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_8 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_24 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_24 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_24 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_24 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_25 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_25 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_25 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_25 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_26 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_26 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_26 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_26 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_8 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_16 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_17 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.2621 - accuracy: 0.8952 - val_loss: 0.1555 - val_accuracy: 0.9379\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1561 - accuracy: 0.9389 - val_loss: 0.1294 - val_accuracy: 0.9493\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1285 - accuracy: 0.9505 - val_loss: 0.1295 - val_accuracy: 0.9505\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1107 - accuracy: 0.9576 - val_loss: 0.1248 - val_accuracy: 0.9537\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.0991 - accuracy: 0.9622 - val_loss: 0.1258 - val_accuracy: 0.9561\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0895 - accuracy: 0.9662 - val_loss: 0.1328 - val_accuracy: 0.9564\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0819 - accuracy: 0.9690 - val_loss: 0.1331 - val_accuracy: 0.9556\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.0757 - accuracy: 0.9715 - val_loss: 0.1306 - val_accuracy: 0.9568\\n\",\n+      \"Epoch 00008: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4941    6    4    6]\\n\",\n+      \" [   1 4616  304  180]\\n\",\n+      \" [   2  176 4727   69]\\n\",\n+      \" [   3   90   93 4769]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.967078601090709\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9617251213288638\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9777355280932606\\n\",\n+      \"Test accuracy: 0.9532696252564167\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4942    3    5    7]\\n\",\n+      \" [   1 4606  321  173]\\n\",\n+      \" [   0  172 4729   73]\\n\",\n+      \" [   1  100   77 4777]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9672286986541252\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9610246660329214\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9783859508680642\\n\",\n+      \"Test accuracy: 0.9533196577775555\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/80deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4945    4    2    6]\\n\",\n+      \" [   0 4585  346  170]\\n\",\n+      \" [   3  183 4721   67]\\n\",\n+      \" [   2   98   95 4760]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9648271376394657\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9594736578776204\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.978035723220093\\n\",\n+      \"Test accuracy: 0.9511682593685896\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 9: 90deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98665, 500), before header:(41244, 500)\\n\",\n+      \"Model: \\\"sequential_9\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_9 (Reshape)          (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_9 (GaussianNo (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_27 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_27 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_27 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_27 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_28 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_28 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_28 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_28 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_29 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_29 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_29 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_29 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_9 (Flatten)          (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_18 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_19 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.3438 - accuracy: 0.8579 - val_loss: 0.2247 - val_accuracy: 0.9091\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.2344 - accuracy: 0.9062 - val_loss: 0.2087 - val_accuracy: 0.9177\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.2004 - accuracy: 0.9208 - val_loss: 0.2029 - val_accuracy: 0.9186\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1756 - accuracy: 0.9310 - val_loss: 0.2060 - val_accuracy: 0.9192\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1581 - accuracy: 0.9382 - val_loss: 0.2077 - val_accuracy: 0.9217\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1431 - accuracy: 0.9446 - val_loss: 0.2181 - val_accuracy: 0.9205\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.1308 - accuracy: 0.9493 - val_loss: 0.2266 - val_accuracy: 0.9187\\n\",\n+      \"Epoch 00007: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4936    5    1   15]\\n\",\n+      \" [   1 4347  484  269]\\n\",\n+      \" [   0  390 4447  137]\\n\",\n+      \" [   8  253  201 4493]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9379096412668234\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.928953819982989\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9566218041727123\\n\",\n+      \"Test accuracy: 0.9117426327112623\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4931    7    7   12]\\n\",\n+      \" [   1 4292  537  271]\\n\",\n+      \" [   1  379 4418  176]\\n\",\n+      \" [  15  255  190 4495]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9341071696602792\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9261019662780807\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9545704708060239\\n\",\n+      \"Test accuracy: 0.9073898033721919\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/90deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14095, 500), before header:(5892, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4932    4    7   14]\\n\",\n+      \" [   1 4280  582  238]\\n\",\n+      \" [   1  403 4435  135]\\n\",\n+      \" [  11  242  178 4524]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.9335568119277531\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.9250512833341672\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.9596737879621754\\n\",\n+      \"Test accuracy: 0.9091409416120478\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 10: 100deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Model: \\\"sequential_10\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_10 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_10 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_30 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_30 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_30 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_30 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_31 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_31 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_31 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_31 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_32 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_32 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_32 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_32 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_10 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_20 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_21 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.5388 - accuracy: 0.7705 - val_loss: 0.4488 - val_accuracy: 0.8126\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4362 - accuracy: 0.8185 - val_loss: 0.4266 - val_accuracy: 0.8255\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4010 - accuracy: 0.8346 - val_loss: 0.4092 - val_accuracy: 0.8312\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3762 - accuracy: 0.8460 - val_loss: 0.4143 - val_accuracy: 0.8338\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3545 - accuracy: 0.8552 - val_loss: 0.4157 - val_accuracy: 0.8358\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3341 - accuracy: 0.8643 - val_loss: 0.4182 - val_accuracy: 0.8362\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3158 - accuracy: 0.8725 - val_loss: 0.4279 - val_accuracy: 0.8358\\n\",\n+      \"Epoch 00007: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4911    6   19   21]\\n\",\n+      \" [   7 3950  527  618]\\n\",\n+      \" [  24  513 3939  497]\\n\",\n+      \" [  22  566  619 3748]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8893280632411067\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8844248761695102\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8821233801971281\\n\",\n+      \"Test accuracy: 0.8279381598038725\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4882    9   28   38]\\n\",\n+      \" [   8 3921  533  640]\\n\",\n+      \" [  30  477 3899  567]\\n\",\n+      \" [  20  578  620 3737]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8863261119727823\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.882723770450793\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8759193475759244\\n\",\n+      \"Test accuracy: 0.8224846149997498\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/100deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4895    8   24   30]\\n\",\n+      \" [   9 3884  554  655]\\n\",\n+      \" [  14  466 3978  515]\\n\",\n+      \" [  15  555  599 3786]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8901285835793266\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.8842747786060939\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8809726322109371\\n\",\n+      \"Test accuracy: 0.8276879971981789\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 11: 110deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Model: \\\"sequential_11\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_11 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_11 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_33 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_33 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_33 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_33 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_34 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_34 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_34 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_34 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_35 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_35 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_35 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_35 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_11 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_22 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_23 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.5779 - accuracy: 0.7402 - val_loss: 0.4800 - val_accuracy: 0.7865\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4762 - accuracy: 0.7905 - val_loss: 0.4712 - val_accuracy: 0.7912\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4357 - accuracy: 0.8108 - val_loss: 0.4637 - val_accuracy: 0.7967\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4030 - accuracy: 0.8269 - val_loss: 0.4716 - val_accuracy: 0.8014\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3750 - accuracy: 0.8405 - val_loss: 0.4737 - val_accuracy: 0.8030\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3484 - accuracy: 0.8532 - val_loss: 0.4872 - val_accuracy: 0.8043\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3260 - accuracy: 0.8635 - val_loss: 0.5008 - val_accuracy: 0.8011\\n\",\n+      \"Epoch 00007: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4884    9    9   55]\\n\",\n+      \" [   8 3080 1178  836]\\n\",\n+      \" [   5 1005 3765  198]\\n\",\n+      \" [  26  929  197 3803]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8661129734327313\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7977185170360734\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8903787461850202\\n\",\n+      \"Test accuracy: 0.7771051183269125\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4904   13    7   33]\\n\",\n+      \" [   8 2951 1259  884]\\n\",\n+      \" [   7 1018 3748  200]\\n\",\n+      \" [  31  890  184 3850]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8626106969530195\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7934157202181418\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8902786811427428\\n\",\n+      \"Test accuracy: 0.773152549156952\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/110deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4892    8    7   50]\\n\",\n+      \" [   7 3051 1181  863]\\n\",\n+      \" [   4  982 3768  219]\\n\",\n+      \" [  18  963  194 3780]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8669635262920898\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7964677040076049\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8866763396207535\\n\",\n+      \"Test accuracy: 0.7750537849602241\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 12: 120deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Model: \\\"sequential_12\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_12 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_12 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_36 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_36 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_36 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_36 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_37 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_37 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_37 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_37 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_38 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_38 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_38 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_38 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_12 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_24 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_25 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 61s 9ms/step - loss: 0.5873 - accuracy: 0.7281 - val_loss: 0.4988 - val_accuracy: 0.7675\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4962 - accuracy: 0.7736 - val_loss: 0.4759 - val_accuracy: 0.7793\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4649 - accuracy: 0.7901 - val_loss: 0.4739 - val_accuracy: 0.7863\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4391 - accuracy: 0.8034 - val_loss: 0.4679 - val_accuracy: 0.7930\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.4175 - accuracy: 0.8148 - val_loss: 0.4723 - val_accuracy: 0.7907\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3963 - accuracy: 0.8258 - val_loss: 0.4819 - val_accuracy: 0.7919\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3782 - accuracy: 0.8347 - val_loss: 0.4910 - val_accuracy: 0.7908\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.3601 - accuracy: 0.8432 - val_loss: 0.5004 - val_accuracy: 0.7886\\n\",\n+      \"Epoch 00008: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4892   10    8   47]\\n\",\n+      \" [  17 2889  993 1203]\\n\",\n+      \" [   8  846 4014  105]\\n\",\n+      \" [  35 1150  124 3646]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8910792014809626\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7853604843148047\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.868664632010807\\n\",\n+      \"Test accuracy: 0.7725521589032871\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4889   13   10   45]\\n\",\n+      \" [   9 2907 1009 1177]\\n\",\n+      \" [   7  832 4040   94]\\n\",\n+      \" [  40 1237  139 3539]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8908790713964077\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7820083053985091\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8656126482213439\\n\",\n+      \"Test accuracy: 0.7692500125081303\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/120deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4907   12    2   36]\\n\",\n+      \" [  17 2854 1031 1200]\\n\",\n+      \" [   6  790 4074  103]\\n\",\n+      \" [  42 1210  141 3562]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8913293640866563\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7840096062440587\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.8653624856156502\\n\",\n+      \"Test accuracy: 0.7703507279731826\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 13: 130deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Model: \\\"sequential_13\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_13 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_13 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_39 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_39 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_39 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_39 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_40 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_40 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_40 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_40 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_41 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_41 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_41 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_41 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_13 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_26 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_27 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 61s 9ms/step - loss: 0.7214 - accuracy: 0.6582 - val_loss: 0.6590 - val_accuracy: 0.6844\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.6351 - accuracy: 0.7004 - val_loss: 0.6380 - val_accuracy: 0.7026\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.6057 - accuracy: 0.7166 - val_loss: 0.6336 - val_accuracy: 0.7059\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5824 - accuracy: 0.7286 - val_loss: 0.6300 - val_accuracy: 0.7085\\n\",\n+      \"Epoch 5/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5618 - accuracy: 0.7398 - val_loss: 0.6379 - val_accuracy: 0.7081\\n\",\n+      \"Epoch 6/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5416 - accuracy: 0.7509 - val_loss: 0.6465 - val_accuracy: 0.7084\\n\",\n+      \"Epoch 7/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5221 - accuracy: 0.7619 - val_loss: 0.6626 - val_accuracy: 0.7063\\n\",\n+      \"Epoch 8/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.5041 - accuracy: 0.7711 - val_loss: 0.6764 - val_accuracy: 0.7067\\n\",\n+      \"Epoch 00008: early stopping\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4774   48   15  120]\\n\",\n+      \" [  98 2303  968 1733]\\n\",\n+      \" [  45  716 3952  260]\\n\",\n+      \" [ 186 1520  371 2878]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8615600140091059\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7346775404012608\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.7953669885425526\\n\",\n+      \"Test accuracy: 0.6958022714764597\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4767   53   18  119]\\n\",\n+      \" [ 130 2246 1015 1711]\\n\",\n+      \" [  38  715 3985  235]\\n\",\n+      \" [ 168 1574  319 2894]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8622104367839095\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7319257517386301\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.7959673787962176\\n\",\n+      \"Test accuracy: 0.6950517836593786\\n\",\n+      \"\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/130deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Confusion matrix:\\n\",\n+      \"H V P M \\n\",\n+      \"[[4795   49   17   96]\\n\",\n+      \" [ 124 2233 1001 1744]\\n\",\n+      \" [  38  748 3930  257]\\n\",\n+      \" [ 183 1526  346 2900]]\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0101: 0.8597088107269726\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0011: 0.7321759143443238\\n\",\n+      \"Estimated bit prediction accuracy given mapping 0110: 0.7948166308100265\\n\",\n+      \"Test accuracy: 0.6933506779406614\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"\\n\",\n+      \"created a json file of the test accuracies at /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/result_TEMPEST_20220706-1718.json\\n\",\n+      \"Loading dataset 14: 140deg\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(14096, 500), before header:(5891, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Successfully loaded data from folder /project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev1Rotation10deg/140deg\\n\",\n+      \"Cut data in pieces with these shapes: after header:(98672, 500), before header:(41237, 500)\\n\",\n+      \"Model: \\\"sequential_14\\\"\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Layer (type)                 Output Shape              Param #   \\n\",\n+      \"=================================================================\\n\",\n+      \"reshape_14 (Reshape)         (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"gaussian_noise_14 (GaussianN (None, 500, 1)            0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_42 (Conv1D)           (None, 500, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_42 (MaxPooling (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_42 (Spatia (None, 250, 13)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_42 (Batc (None, 250, 13)           52        \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_43 (Conv1D)           (None, 250, 118)          23128     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_43 (MaxPooling (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_43 (Spatia (None, 250, 118)          0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_43 (Batc (None, 250, 118)          472       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"conv1d_44 (Conv1D)           (None, 250, 100)          59100     \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"max_pooling1d_44 (MaxPooling (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"batch_normalization_44 (Batc (None, 62, 100)           400       \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"spatial_dropout1d_44 (Spatia (None, 62, 100)           0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"flatten_14 (Flatten)         (None, 6200)              0         \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_28 (Dense)             (None, 224)               1389024   \\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"dense_29 (Dense)             (None, 4)                 900       \\n\",\n+      \"=================================================================\\n\",\n+      \"Total params: 1,473,128\\n\",\n+      \"Trainable params: 1,472,666\\n\",\n+      \"Non-trainable params: 462\\n\",\n+      \"_________________________________________________________________\\n\",\n+      \"Epoch 1/20\\n\",\n+      \"6559/6559 [==============================] - 62s 9ms/step - loss: 0.7015 - accuracy: 0.6717 - val_loss: 0.6032 - val_accuracy: 0.7167\\n\",\n+      \"Epoch 2/20\\n\",\n+      \"6559/6559 [==============================] - 59s 9ms/step - loss: 0.6042 - accuracy: 0.7185 - val_loss: 0.5791 - val_accuracy: 0.7285\\n\",\n+      \"Epoch 3/20\\n\",\n+      \"6559/6559 [==============================] - 60s 9ms/step - loss: 0.5645 - accuracy: 0.7374 - val_loss: 0.5426 - val_accuracy: 0.7478\\n\",\n+      \"Epoch 4/20\\n\",\n+      \"5857/6559 [=========================>....] - ETA: 6s - loss: 0.5271 - accuracy: 0.7560\"\n+     ]\n+    }\n+   ],\n+   \"source\": [\n+    \"git_sha1, git_diff = get_repo_sha1_and_diff(search_parent_directories=True)\\n\",\n+    \"result_file_path = os.path.join(data_directory, f\\\"result_TEMPEST_{datetime.datetime.now().strftime('%Y%m%d-%H%M')}.json\\\")\\n\",\n+    \"try:\\n\",\n+    \"    measurement_metadata = verify_json_metadata(data_directory, verbose=False)\\n\",\n+    \"except:\\n\",\n+    \"    measurement_metadata = \\\"FAILURE_TO_GET_METADATA\\\"\\n\",\n+    \"\\n\",\n+    \"test_accuracy = evaluate_all_positions(positions, technical_details, num_test_data_sets, debug, num_classes)\\n\",\n+    \"pp.write_result_dict({\\n\",\n+    \"    'test_accuracies': test_accuracy, \\n\",\n+    \"    'train_accuracies': train_accuracy, \\n\",\n+    \"    'validation_accuracies': validation_accuracy,\\n\",\n+    \"    'measurement_metadata': measurement_metadata, \\n\",\n+    \"    'n_classes': num_classes,\\n\",\n+    \"    'data_augmentation_halflength': data_augmentation_halflength,\\n\",\n+    \"    }, \\n\",\n+    \"    target_file_path=result_file_path, override=True, )\\n\",\n+    \"\\n\",\n+    \"print(\\\" ------------ Done ---------------\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"6928c4c3-415c-4d79-bbdc-75b289eb3c57\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": [\n+    \"print(f\\\"{test_accuracy}\\\")\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"markdown\",\n+   \"id\": \"c30b5e76-60a7-4ac2-9908-89847c085a06\",\n+   \"metadata\": {},\n+   \"source\": [\n+    \"# ------------------ Metadata ------------------\"\n+   ]\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"c93639fe-5cdf-49a4-88f3-109ce37453b5\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n    \"source\": [\n     \"# repository git information (WARNING: THIS IS ONLY RELIABLE IF NO CHANGES WERE MADE BETWEEN RUNNING DIFFERENT NOTEBOOK CELLS!)\\n\",\n     \"print(git_sha1)\\n\",\n\n---", "paper/Visualize_Results_Vary_Train_Data.ipynb\n=======================================================\nlhs: 100644 | a3ce525c3ab66b8f0970469f61a271da4dd5d9bc\nrhs: 100644 | 6610a60f67837450213ab47ebb6c0e3bb8fcba9a\n---@@ -2,7 +2,7 @@\n  \"cells\": [\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 2,\n+   \"execution_count\": 1,\n    \"id\": \"63bbe8e3-4d50-4240-b473-a7ad8dfad902\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -21,7 +21,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 3,\n+   \"execution_count\": 16,\n    \"id\": \"6d344711-3707-40af-9763-afd5e0f7bf17\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -67,7 +67,10 @@\n     \"        # Adds the 25% (or 50%) accuracy line\\n\",\n     \"        guessing = np.full((1000, 1), guessing_level_percent)\\n\",\n     \"        ax.plot(guessing, 'r')\\n\",\n-    \"\\n\",\n+    \"    \\n\",\n+    \"    ax.set_ylim(70, 90)\\n\",\n+    \"    ax.set_xlim(1, 29)\\n\",\n+    \"    \\n\",\n     \"    ax.legend()\\n\",\n     \"    ax.set_ylabel(\\\"Accuracy (%)\\\")\\n\",\n     \"    ax.set_xlabel(\\\"Number of measurements\\\")\\n\",\n@@ -86,7 +89,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 4,\n+   \"execution_count\": 17,\n    \"id\": \"ca1fe49b-f77b-4422-a172-7eb144577936\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -100,7 +103,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 12,\n+   \"execution_count\": 18,\n    \"id\": \"3ad46a0a-51fb-411f-a8da-cc6efed3ea36\",\n    \"metadata\": {},\n    \"outputs\": [],\n@@ -129,7 +132,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 13,\n+   \"execution_count\": 19,\n    \"id\": \"301626aa-b0b7-46a7-861c-6144a1d446e8\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -178,7 +181,7 @@\n     },\n     {\n      \"data\": {\n-      \"image/png\": \"\\n\",\n+      \"image/png\": \"\\n\",\n       \"text/plain\": [\n        \"<Figure size 1440x1080 with 1 Axes>\"\n       ]\n@@ -212,7 +215,7 @@\n   },\n   {\n    \"cell_type\": \"code\",\n-   \"execution_count\": 7,\n+   \"execution_count\": 21,\n    \"id\": \"9b1c2ac3-dce9-449f-a4c5-cc3f4dab0e72\",\n    \"metadata\": {},\n    \"outputs\": [\n@@ -221,55 +224,72 @@\n      \"output_type\": \"stream\",\n      \"text\": [\n       \"Warning. Failed to interpret n_classes from json file! Set to default.\\n\",\n+      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.]), accuracy=array([[71.88172312, 70.46728037, 71.02616701, 72.44709061, 72.36703858],\\n\",\n+      \"       [74.41837194, 73.97938763, 74.22824836, 75.06379146, 74.43838495],\\n\",\n+      \"       [75.12883374, 74.87992796, 75.15885325, 75.71921749, 75.12883374],\\n\",\n+      \"       [75.69920448, 75.53532119, 75.94936709, 76.07945164, 75.71921749],\\n\",\n+      \"       [76.10947116, 75.50030018, 75.92435083, 76.59978986, 75.70921099],\\n\",\n+      \"       [76.50472807, 75.33520112, 75.93936058, 76.2195427 , 76.36463701],\\n\",\n+      \"       [76.52974433, 76.20072043, 76.71486466, 77.31525492, 76.70986141],\\n\",\n+      \"       [76.70986141, 76.04062437, 77.04007605, 77.39530695, 76.73487767],\\n\",\n+      \"       [77.1501476 , 76.97618571, 77.30024516, 77.45034272, 76.90999149],\\n\",\n+      \"       [77.35528093, 76.76605964, 77.56541752, 77.9856907 , 77.5053785 ],\\n\",\n+      \"       [77.21018662, 76.83109866, 77.25521589, 77.66548256, 76.87496873],\\n\",\n+      \"       [77.42032321, 76.84610766, 77.515385  , 77.92064842, 77.48536549]])\\n\",\n+      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13.]), accuracy=array([72.40206003, 75.03377199, 76.12448335, 76.65482759, 76.62981153,\\n\",\n+      \"       77.44033337, 77.5404036 , 78.15079689, 78.20583582, 78.88127565,\\n\",\n+      \"       78.3059001 , 78.77120376])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([[54.37534397, 52.61156694, 53.84499925, 54.60049032, 54.68054235],\\n\",\n-      \"       [55.57612448, 55.65339204, 56.00140091, 56.41667084, 55.56611798],\\n\",\n-      \"       [55.96637815, 55.47328397, 56.67183669, 55.94136189, 56.10146595],\\n\",\n-      \"       [56.95201881, 56.91915149, 57.65247411, 57.59243508, 57.5073798 ],\\n\",\n-      \"       [57.58242858, 57.32939764, 57.94266273, 58.14779607, 58.12277981],\\n\",\n-      \"       [58.1127733 , 58.0648389 , 58.46300095, 58.87326762, 58.81823185],\\n\",\n-      \"       [58.91329364, 58.8903342 , 59.44363836, 59.08340421, 59.31355381],\\n\",\n-      \"       [58.76819933, 59.02541525, 59.82888878, 58.70315705, 59.53870016],\\n\",\n-      \"       [59.01335868, 58.69521713, 59.35357983, 58.99334567, 59.29854405],\\n\",\n-      \"       [58.63811477, 58.92035221, 59.773853  , 58.80322209, 59.4186221 ],\\n\",\n-      \"       [59.59873918, 59.38062838, 59.90393756, 59.78385951, 59.54370341],\\n\",\n-      \"       [59.35858308, 59.08545127, 59.56871967, 59.13843999, 59.25351478],\\n\",\n-      \"       [59.20848552, 58.6151691 , 60.17911643, 60.02901886, 60.05403512],\\n\",\n-      \"       [59.56371642, 59.4506704 , 60.25916846, 59.93395707, 60.14409366]])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15.]), accuracy=array([55.3309679 , 56.76689744, 57.81758428, 59.02836919, 59.3685925 ,\\n\",\n-      \"       60.0990653 , 60.63941717, 60.98464131, 61.11472249, 61.35488153,\\n\",\n-      \"       62.05533743, 62.20043302, 61.92525029, 62.46560216])\\n\",\n-      \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([[52.26897483, 50.94056434, 51.85370491, 52.15390004, 51.88372442],\\n\",\n-      \"       [51.63856507, 50.51030618, 51.36838945, 51.27833092, 51.46345124],\\n\",\n-      \"       [52.67924151, 51.96117671, 52.52914394, 52.74428378, 52.66423175],\\n\",\n-      \"       [52.75429029, 52.87172303, 53.29464152, 52.75929354, 52.57917646],\\n\",\n-      \"       [55.71121229, 54.94296578, 55.43103017, 55.85130335, 56.15650173],\\n\",\n-      \"       [56.07644969, 56.20872524, 56.73187572, 56.23155051, 56.27657978],\\n\",\n-      \"       [55.65617651, 55.13307985, 55.68619603, 55.53109521, 55.68619603],\\n\",\n-      \"       [56.62680742, 56.26876126, 56.98704158, 57.01706109, 57.18216841],\\n\",\n-      \"       [56.2115375 , 55.62337402, 56.44669035, 56.46170011, 56.52173913],\\n\",\n-      \"       [56.59678791, 56.29877927, 56.74688548, 56.63181068, 56.67683995],\\n\",\n-      \"       [56.52674238, 55.563338  , 56.32160905, 56.37664482, 56.46670336],\\n\",\n-      \"       [56.39665783, 56.58895337, 56.27157652, 56.38665132, 56.47170661],\\n\",\n-      \"       [57.48736679, 56.24374625, 57.34227248, 57.51238305, 57.51238305],\\n\",\n-      \"       [56.8069245 , 56.18371023, 56.72687247, 57.07710012, 56.76689848],\\n\",\n-      \"       [57.32225947, 57.70462277, 58.20783509, 57.71751639, 58.36293591],\\n\",\n-      \"       [58.19782859, 57.86471883, 58.60309201, 58.38795217, 58.75819283],\\n\",\n-      \"       [58.3529294 , 57.93476086, 58.37294241, 58.583079  , 58.78320909],\\n\",\n-      \"       [58.15780257, 57.79967981, 58.79821884, 58.65812778, 58.77820583],\\n\",\n-      \"       [58.78821234, 58.20992596, 59.20348226, 58.92330015, 58.96332616]])\\n\",\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([[71.06619303, 70.53231939, 70.59588733, 71.12623205, 70.6409166 ],\\n\",\n+      \"       [71.7166158 , 71.42785671, 71.85170361, 72.45209386, 72.09185971],\\n\",\n+      \"       [73.03247111, 72.19331599, 72.85235403, 73.55280933, 73.05748737],\\n\",\n+      \"       [74.31330365, 74.06944166, 74.37834592, 74.80862561, 74.29829389],\\n\",\n+      \"       [74.3183069 , 73.82429458, 74.31330365, 74.84364837, 74.04312803],\\n\",\n+      \"       [74.60349227, 74.76485892, 74.44839145, 75.11382399, 74.73858008],\\n\",\n+      \"       [75.78425977, 75.31518911, 75.73422725, 76.83994596, 76.05943864],\\n\",\n+      \"       [74.62850853, 74.58975385, 74.40336219, 75.15885325, 74.64852154],\\n\",\n+      \"       [75.63416221, 75.05503302, 75.41902236, 76.14949717, 76.06944514],\\n\",\n+      \"       [76.324611  , 75.94056434, 76.0844549 , 76.70485816, 76.17951669],\\n\",\n+      \"       [75.63416221, 74.69981989, 75.2689248 , 76.00440286, 75.32396057],\\n\",\n+      \"       [76.60479312, 75.91054633, 76.40466303, 77.0450793 , 76.34462401],\\n\",\n+      \"       [76.25956872, 75.94556734, 76.04442888, 76.58978336, 76.34962726],\\n\",\n+      \"       [76.0844549 , 75.78046828, 76.47971181, 76.59978986, 76.0944614 ],\\n\",\n+      \"       [76.45469555, 76.02061237, 76.77490369, 76.89498174, 76.55976385],\\n\",\n+      \"       [77.19517686, 76.30578347, 76.68484515, 77.43533297, 76.83494271],\\n\",\n+      \"       [77.03006955, 76.69601761, 76.66983539, 77.29023866, 76.62980938],\\n\",\n+      \"       [76.37964677, 75.62037222, 76.26957522, 76.71986791, 76.1044679 ],\\n\",\n+      \"       [76.92500125, 76.48589153, 76.72987442, 77.49537199, 76.85495572],\\n\",\n+      \"       [76.75989393, 76.32079248, 76.69985491, 77.34527443, 77.05508581],\\n\",\n+      \"       [77.12513134, 75.96557935, 76.76489718, 77.37529394, 77.09010857],\\n\",\n+      \"       [76.61980287, 76.17070242, 76.86996548, 77.26522239, 77.22019313],\\n\",\n+      \"       [77.09511182, 76.83109866, 76.98504028, 77.65547606, 77.15515085],\\n\",\n+      \"       [77.05508581, 76.71102662, 76.86996548, 77.49036874, 77.44533947],\\n\",\n+      \"       [76.95502076, 76.57094257, 77.12012808, 77.78055736, 77.42032321],\\n\",\n+      \"       [77.55541102, 76.60096058, 77.66548256, 77.94566468, 77.45034272],\\n\",\n+      \"       [76.85495572, 76.42085251, 77.00005003, 77.39530695, 77.1601541 ]])\\n\",\n       \"distance=array([ 2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14.,\\n\",\n-      \"       15., 16., 17., 18., 19., 20.]), accuracy=array([52.47410536, 51.6535759 , 53.55981588, 53.02446485, 56.6868484 ,\\n\",\n-      \"       57.35228062, 56.41166568, 58.03272128, 56.83193803, 57.94766545,\\n\",\n-      \"       57.54740834, 57.36228824, 58.67813826, 57.75253773, 59.2885375 ,\\n\",\n-      \"       60.15910506, 60.2391541 , 60.36423445, 60.74948907])\\n\"\n+      \"       15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,\\n\",\n+      \"       28.]), accuracy=array([71.81668282, 72.26697206, 73.62785935, 75.26892424, 75.27893186,\\n\",\n+      \"       75.71921945, 76.74488425, 75.82929134, 76.74488425, 77.3853004 ,\\n\",\n+      \"       76.52474046, 77.91564465, 77.47035623, 77.30024457, 77.56041288,\\n\",\n+      \"       78.26587558, 77.84059644, 77.44534016, 78.14579606, 78.18582058,\\n\",\n+      \"       78.26587558, 78.38094831, 78.53104472, 78.99634838, 78.69114876,\\n\",\n+      \"       78.66613269, 78.22084427])\\n\",\n+      \"Warning. Failed to interpret n_classes from json file! Set to default.\\n\",\n+      \"distance=array([14., 15., 16., 17., 18., 19.]), accuracy=array([[77.21518987, 77.42645587, 77.78055736, 77.62545655, 77.72552159],\\n\",\n+      \"       [77.89563216, 77.39143486, 77.96067444, 78.28588583, 78.09075899],\\n\",\n+      \"       [77.55040777, 77.53652191, 78.15079802, 78.17581428, 77.68549557],\\n\",\n+      \"       [77.71551508, 77.62657595, 77.7455346 , 78.2258468 , 78.17081103],\\n\",\n+      \"       [78.00070046, 77.69661797, 77.95567119, 78.63111022, 78.11577525],\\n\",\n+      \"       [77.98068745, 77.68160897, 78.30589883, 78.51603542, 78.15079802]])\\n\",\n+      \"distance=array([14., 15., 16., 17., 18., 19.]), accuracy=array([78.84124517, 79.29654121, 79.44663763, 79.49166894, 79.43162918,\\n\",\n+      \"       79.80186939])\\n\"\n      ]\n     },\n     {\n      \"data\": {\n-      \"image/png\": \"\\n\",\n+      \"image/png\": \"\\n\",\n       \"text/plain\": [\n        \"<Figure size 1440x1080 with 1 Axes>\"\n       ]\n@@ -285,13 +305,14 @@\n     \"fig, ax = plt.subplots()\\n\",\n     \"\\n\",\n     \"json_paths = [\\n\",\n-    \"    './test_accuracy_20220704-1426.json', \\n\",\n-    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1657.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1446.json',\\n\",\n+    \"    '/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1112.json', \\n\",\n+    \"    \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220705-1718.json\\\",\\n\",\n     \"]\\n\",\n     \"\\n\",\n     \"info_dicts = [load_plotinfo_from_file(path) for path in json_paths]\\n\",\n-    \"info_dicts[1].update(load_plotinfo_from_file(\\n\",\n-    \"    \\\"/project/ag-weinfurter/crypto/PhDs/Adomas/EmissionSecurityMeasuredData/DataForEmSecPaper/Rev130meas2.5cm/result_vary_raining_data_20220704-1556.json\\\"))\\n\",\n+    \"#info_dicts[1].update(load_plotinfo_from_file(\\n\",\n+    \" #   ))\\n\",\n     \"\\n\",\n     \"for info_dict in info_dicts:\\n\",\n     \"    dict_test_accuracies, dict_val_accuracies, guessing_level_percent, title = plotinfo_from_dict(info_dict)\\n\",\n@@ -327,6 +348,22 @@\n    \"metadata\": {},\n    \"outputs\": [],\n    \"source\": []\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"adb233a3-a03e-4656-922f-ce8384dc3ac2\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": []\n+  },\n+  {\n+   \"cell_type\": \"code\",\n+   \"execution_count\": null,\n+   \"id\": \"3340e72b-8a0c-499c-9008-bcd7098ae281\",\n+   \"metadata\": {},\n+   \"outputs\": [],\n+   \"source\": []\n   }\n  ],\n  \"metadata\": {\n\n---"]}